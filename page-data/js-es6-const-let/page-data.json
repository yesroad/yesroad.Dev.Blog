{"componentChunkName":"component---src-templates-post-tsx","path":"/js-es6-const-let/","result":{"data":{"markdownRemark":{"html":"<p>ES6 (ES2015) 에서는 새로운 선언 방법이 생겼는데,<br>\n그것이 const와 let이다.<br>\n기존에 다른 프로그래밍 언어를 사용하고 왔다면 처음 var 를 접할때 당황스러운 점을 느껴본 적이 있을 것이다. var의 관대함 때문이다. 그런 것을 비교하며 살펴보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//case 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//case 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//case 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 변수를 선언하기 전에 호출하는 모습이다.</p>\n<ul>\n<li>case 1 : <code class=\"language-text\">undefined</code></li>\n<li>case 2 &#x26; 3 : <code class=\"language-text\">error</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//case 1</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//case 2</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//case 3</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 세 경우를 보자 같은 이름의 변수를 다시금 선언하고 있는 모습이다.</p>\n<ul>\n<li>case 1 : <code class=\"language-text\">a=1</code></li>\n<li>case 2 &#x26; 3 : <code class=\"language-text\">error</code></li>\n</ul>\n<p><strong>위의 두가지 경우를 통해서 let, const는 기존의 var의 관대함 없이 엄격해진 것을 볼 수 있다</strong></p>\n<h3 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scope</h3>\n<p>다음으로 스코프, 즉 유효 범위에 따른 차이점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//case 1</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'A'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'A'</span>\n\n<span class=\"token comment\">//case 2</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'A'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a'</span></code></pre></div>\n<ul>\n<li>\n<p>case 1</p>\n<ul>\n<li>함수 밖에서 a 선언, 그리고 함수 안에서 재선언되었다.</li>\n<li>함수 안 a 출력은 함수 안에서 선언한 'A'가 출력</li>\n<li>함수 밖 a 출력은 함수 안에서 재선언한 'A'가 출력</li>\n<li>즉, 동일한 유효범위 안에 있다.</li>\n</ul>\n</li>\n<li>\n<p>case 2</p>\n<ul>\n<li>함수 밖에서 a 선언, 그리고 함수 안에서 선언.</li>\n<li>함수 안 a 출력은 함수 안에서 선언한 'A'가 출력</li>\n<li>함수 밖 a 출력은 함수 밖에서 선언한 'a'가 출력</li>\n<li>즉, 서로 다른 유효범위를 가지고 있다.</li>\n<li>let, const는 블록 유효범위(Block scope)를 가지고 있어,\n해당 블록 범위 안에서만 유효하다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"let-const-의-차이점\" style=\"position:relative;\"><a href=\"#let-const-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"let const 의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let, const 의 차이점</h3>\n<p>var 와 let, const의 차이점을 알아보았고, 그렇다면 let, const의 차이점은 무엇일까?</p>\n<ul>\n<li>\n<p>const </p>\n<ul>\n<li>상수</li>\n<li>초기값 필요 / 값 재할당 불가</li>\n<li>Array, Object, function의 경우 멤버값 조작 가능</li>\n</ul>\n</li>\n<li>\n<p>let</p>\n<ul>\n<li>초기값 불필요 / 값 재할당 가능</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"let-const-의-사용\" style=\"position:relative;\"><a href=\"#let-const-%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"let const 의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let, const 의 사용</h3>\n<p>그렇다면 언제 let을 사용하고 const를 사용해야 할까?</p>\n<ul>\n<li>\n<p>const</p>\n<ul>\n<li>값이 수정되지 않는 상수값 선언시 사용</li>\n<li>array, object, function 활용시 사용</li>\n</ul>\n</li>\n<li>\n<p>let</p>\n<ul>\n<li>값을 재할당할 필요가 있는 변수에 사용</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>etc.</h3>\n<h4 id=\"immutable-array-만들기-불변의-어레이-만들기\" style=\"position:relative;\"><a href=\"#immutable-array-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%B6%88%EB%B3%80%EC%9D%98-%EC%96%B4%EB%A0%88%EC%9D%B4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"immutable array 만들기 불변의 어레이 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>immutable array 만들기 (불변의 어레이 만들기)</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> list2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\nlist2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 원하는 결과</span>\n<span class=\"token comment\">// list = [1,2,3]</span>\n<span class=\"token comment\">// list2 = [1,2,3,4]</span>\n<span class=\"token comment\">// 'list === list2' 가 false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1, '</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2, '</span><span class=\"token operator\">+</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list <span class=\"token operator\">===</span> list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 실제 결과</span>\n<span class=\"token comment\">// list = [1,2,3,4]</span>\n<span class=\"token comment\">// list2 = [1,2,3,4]</span>\n<span class=\"token comment\">// 'list === list2' 가 true</span>\n\n<span class=\"token comment\">// 원하는 결과를 얻기 위한 방법</span>\n<span class=\"token keyword\">const</span> newlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> newlist2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>newlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnewlist2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1, '</span><span class=\"token operator\">+</span>newlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2, '</span><span class=\"token operator\">+</span>newlist2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newlist <span class=\"token operator\">===</span> newlist2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// newlist = [1,2,3]</span>\n<span class=\"token comment\">// newlist2 = [1,2,3,4]</span>\n<span class=\"token comment\">// 'newlist === newlist2' false</span></code></pre></div>\n<hr>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/</a></li>\n</ul>","excerpt":"ES6 (ES2015) 에서는 새로운 선언 방법이 생겼는데, 그것이 const와 let이다. 기존에 다른 프로그래밍 언어를 사용하고 왔다면 처음 var 를 접할때 당황스러운 점을 느껴본 적이 있을 것이다. var의 관대함 때문이다. 그런 것을 비교하…","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/js-es6-const-let/#scope\">scope</a></li>\n<li><a href=\"/js-es6-const-let/#let-const-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">let, const 의 차이점</a></li>\n<li><a href=\"/js-es6-const-let/#let-const-%EC%9D%98-%EC%82%AC%EC%9A%A9\">let, const 의 사용</a></li>\n<li><a href=\"/js-es6-const-let/#etc\">etc.</a></li>\n</ul>\n</li>\n<li><a href=\"/js-es6-const-let/#references\">References</a></li>\n</ul>","fields":{"slug":"/js-es6-const-let/"},"frontmatter":{"title":"자바스크립트 ES6 const, let","date":"Jun 28, 2017","tags":["javascript","ES6"],"keywords":["yesroad.Dev","Eunggil Kim"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-es6-const-let/","series":[],"lastmod":"2017-06-28"}},"staticQueryHashes":["2027115977","694178885"]}