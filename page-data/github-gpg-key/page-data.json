{"componentChunkName":"component---src-templates-post-tsx","path":"/github-gpg-key/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p>우선 Homebrew 를 통해 gpg 패키지를 설치한다,</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew <span class=\"token function\">install</span> gpg</code></pre></div>\n<p>추가로 gpg 키 관리 프로그램인 GPG-SUITE를 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ brew cask <span class=\"token function\">install</span> gpg-suite</code></pre></div>\n<h2 id=\"key-생성\" style=\"position:relative;\"><a href=\"#key-%EC%83%9D%EC%84%B1\" aria-label=\"key 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key 생성</h2>\n<p>키 생성 방법은 두가지가 있다.</p>\n<ol>\n<li>gpg-suite를 통한 설치</li>\n<li>터미널내에서 설치</li>\n</ol>\n<p>1번의 경우 시스템 환경설정에서 확인 할 수 있는 GPG KeyChain을 통해 생성하는 방법이다.<br>\n본 글에서는 터미널에서 생성하는 방법을 소개하고 있기 때문에 1번의 방법은 <a href=\"https://medium.com/@star_zero/github%E3%81%AEgpg-key%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B-70e22874e533\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>를 확인해 보시기를 바란다.</p>\n<p>아래는 터미널에서 키를 생성하는 과정이다.</p>\n<p>우선 아래 명령어를 이용 키 생성 과정에 들어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ gpg --full-generate-key</code></pre></div>\n<p>아래 자세한 생성하는 과정이 나와있고, 간단히 요약하면 이러하다.</p>\n<ul>\n<li>암호화 방식 선택 (권장: 1)</li>\n<li>암호화 키 크기 선택 (권장: 4096)</li>\n<li>키 유효기간 설정 (권장: 0) // Enter 입력하여 패스</li>\n<li>이름, 이메일, 코멘트(공란 가능) 입력</li>\n<li>이후 보안 암호 문구 작성 창에서 암호 입력 (이후 첫 commit시 입력하는 암호로 쓰인다)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Please <span class=\"token keyword\">select</span> what kind of key you want:\n   <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> RSA and RSA <span class=\"token punctuation\">(</span>default<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> DSA and Elgamal\n   <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> DSA <span class=\"token punctuation\">(</span>sign only<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> RSA <span class=\"token punctuation\">(</span>sign only<span class=\"token punctuation\">)</span>\nYour selection? <span class=\"token number\">1</span>\n\n\nRSA keys may be between <span class=\"token number\">1024</span> and <span class=\"token number\">4096</span> bits long.\nWhat keysize <span class=\"token keyword\">do</span> you want? <span class=\"token punctuation\">(</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span> <span class=\"token number\">4096</span>\n\n\nPlease specify how long the key should be valid.\n         <span class=\"token number\">0</span> <span class=\"token operator\">=</span> key does not expire\n      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>  <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n days\n      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>w <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n weeks\n      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>m <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n months\n      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>y <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n years\nKey is valid for? <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Junho Baik\nEmail address: junhobaik@gmail.com\nComment:\nYou selected this <span class=\"token environment constant\">USER</span>-ID:\n    <span class=\"token string\">\"Junho Baik &lt;junhobaik@gmail.com>\"</span>\n\nChange <span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span>ame, <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span>omment, <span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span>mail or <span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span>kay/<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>uit? O</code></pre></div>\n<p>위의 과정을 마치고 나면 키가 생성되었고,</p>\n<p>이제 아래 명령어(<code class=\"language-text\">gpg --list-secret-keys --keyid-format LONG</code>)를 이용하여 생성한 키를 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ gpg --list-secret-keys --keyid-format LONG\n\n-----------------------------------\nsec   rsa4096/ABCDE12345678900 <span class=\"token number\">2018</span>-10-24 <span class=\"token punctuation\">[</span>SC<span class=\"token punctuation\">]</span>\n      AFWAEGWEGWAEDVADKAWGJIWRGLWJRGAIWALGRHRG\nuid                 <span class=\"token punctuation\">[</span>ultimate<span class=\"token punctuation\">]</span> Junho Baik <span class=\"token operator\">&lt;</span>junhobaik@gmail.com<span class=\"token operator\">></span>\nssb   rsa4096/AGRJIWGJWRGJIRWG <span class=\"token number\">2018</span>-10-24 <span class=\"token punctuation\">[</span>E<span class=\"token punctuation\">]</span></code></pre></div>\n<p>위의 예제에서 <code class=\"language-text\">ABCDE12345678900</code>에 해당하는 부분을 복사하고 아래 명령어에 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ gpg --armor --export ABCDE12345678900</code></pre></div>\n<p>위 명령어를 입력한 후 출력되는 키를 복사한다,<br>\n<code class=\"language-text\">-----BEGIN PGP PUBLIC KEY BLOCK-----</code>부터 <code class=\"language-text\">-----END PGP PUBLIC KEY BLOCK——.</code>를 포함해서 모두 복사하여야 한다.</p>\n<h2 id=\"github-에-gpg-key-등록\" style=\"position:relative;\"><a href=\"#github-%EC%97%90-gpg-key-%EB%93%B1%EB%A1%9D\" aria-label=\"github 에 gpg key 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub 에 GPG Key 등록</h2>\n<p>GitHub - Settings - <a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSH and GPG keys</a></p>\n<p>위의 메뉴로 진입하여 GPG Keys 부분의 new GPG key 버튼을 클릭하고 복사한 키를 등록한다.</p>\n<h2 id=\"git-에-gpg-key-등록\" style=\"position:relative;\"><a href=\"#git-%EC%97%90-gpg-key-%EB%93%B1%EB%A1%9D\" aria-label=\"git 에 gpg key 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 에 GPG Key 등록</h2>\n<p>아래 명령어를 통해 <code class=\"language-text\">~/.gitconfig</code>에 gpg 정보를 입력한다.</p>\n<p>여기서 <code class=\"language-text\">ABCDE12345678900</code>에 해당하는 것은 위에서 확인한 Key 부분이며, 본인의 것을 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> config --global user.signingkey ABCDE12345678900\n$ <span class=\"token function\">git</span> config --global gpg.program <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> gpg<span class=\"token variable\">)</span></span></code></pre></div>\n<p>이제 등록이 되었고, 이후 commit 부터는 <code class=\"language-text\">-S</code> 플래그를 넣음으로 서명을 적용한 Commit 을 보낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> commit -S</code></pre></div>\n<p>아래 명령어를 이용하면 <code class=\"language-text\">-S</code> 플래그를 번번히 넣지 않아도 항상 서명이 적용한 Commit 을 보내게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> config --global commit.gpgsign <span class=\"token boolean\">true</span></code></pre></div>\n<p>추가로 commit 시 오류가 발생한다면, 아래 내용을 <code class=\"language-text\">~/.zshrc</code> 또는 <code class=\"language-text\">~/.bashrc</code>에 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export GPG_TTY=$(tty)</code></pre></div>\n<p>추가로 가끔씩 물어보는 GPG 패스워드를 묻지 않길 원하면 <code class=\"language-text\">~/.gnupg/gpg-agent.conf</code> 파일을 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">default-cache-ttl 31536000\nmaximum-cache-ttl 31536000</code></pre></div>\n<p>GPG2.1 이후에서는 <code class=\"language-text\">maximum-cache-ttl</code>이 <code class=\"language-text\">max-cache-ttl</code>로 바뀌었으니 버전에 따라 다르게 입력해주어야 한다.<br>\n보통 처음 gpg-agent.conf 파일을 열었을때 두 값이 있으므로 어떤 값으로 써야할 지 알 수 있다. 하지만 알 수 없을 경우 버전을 확인하여 올바른 값을 입력해야한다.<br>\n31536000는 1년에 해당하는 초(sec)값이다.</p>\n<hr>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://help.github.com/articles/generating-a-new-gpg-key/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Generating a new GPG key</a></li>\n<li><a href=\"https://medium.com/@star_zero/github%E3%81%AEgpg-key%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B-70e22874e533\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KenjiAbe|GitHub の GPG Key を設定する</a></li>\n<li><a href=\"https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keep GnuPG credentials cached for entire user session</a></li>\n</ul>","excerpt":"설치 우선 Homebrew 를 통해 gpg 패키지를 설치한다, 추가로 gpg 키 관리 프로그램인 GPG-SUITE를 설치한다. key 생성 키 생성 방법은 두가지가 있다. gpg-suite를 통한 설치 터미널내에서 설치 1번의 경우 시스템 환경설정에…","tableOfContents":"<ul>\n<li><a href=\"/github-gpg-key/#%EC%84%A4%EC%B9%98\">설치</a></li>\n<li><a href=\"/github-gpg-key/#key-%EC%83%9D%EC%84%B1\">key 생성</a></li>\n<li><a href=\"/github-gpg-key/#github-%EC%97%90-gpg-key-%EB%93%B1%EB%A1%9D\">GitHub 에 GPG Key 등록</a></li>\n<li>\n<p><a href=\"/github-gpg-key/#git-%EC%97%90-gpg-key-%EB%93%B1%EB%A1%9D\">Git 에 GPG Key 등록</a></p>\n<ul>\n<li><a href=\"/github-gpg-key/#references\">References</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/github-gpg-key/"},"frontmatter":{"title":"GitHub에 GPG 서명 등록하기 (macOS)","date":"Oct 24, 2018","tags":["github"],"keywords":["github gpg","github gpg key","gpg 키 생성","gpg 키","gpg 서명"],"update":"Jan 31, 2020"}}},"pageContext":{"slug":"/github-gpg-key/","series":[],"lastmod":"2020-01-31"}},"staticQueryHashes":["2027115977","694178885"]}