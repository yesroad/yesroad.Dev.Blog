{"componentChunkName":"component---src-templates-post-tsx","path":"/js-script-position/","result":{"data":{"markdownRemark":{"html":"<p>처음 html, javascript를 공부 할 때는 script 태그는 head 태그에 위치하게끔 하는 코드나,<br>\n또는 body 태그의 어디에 위치하건 그 위치에 대해 별 의미를 두지 않는 코드들이 많았다.</p>\n<p>하지만 지금은 항상 스크립트는 body태그의 최하단에 넣는 것이 습관화되었고 그 이유도 알고 있다.<br>\n그런데 이제와서 이 글을 쓰는 이유는 <strong>script 태그의 async / defer</strong>를 공부하게 되면서 새로 정리해보고자 쓰게 되었다.</p>\n<h2 id=\"브라우저의-동작과-script-위치의-2가지-이유\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%8F%99%EC%9E%91%EA%B3%BC-script-%EC%9C%84%EC%B9%98%EC%9D%98-2%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0\" aria-label=\"브라우저의 동작과 script 위치의 2가지 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 동작과 script 위치의 2가지 이유</h2>\n<p>HTML에서 script 태그가 body 태그 안의 최하단에 위치해야 하는 이유는 브라우저의 동작 방식과 연관이 있다.</p>\n<ol>\n<li>HTML을 읽기 시작한다.</li>\n<li>HTML을 파싱한다 (parsing: 컴퓨터가 읽을 수 있는 코드로 바꾸는 작업)</li>\n<li>DOM 트리 생성.</li>\n<li>Render 트리가 생성 (DOM tree + CSS의 CSSOM 트리 결합)</li>\n<li>Display(브라우저)에 표시된다.</li>\n</ol>\n<p>여기서 중요하게 봐야할 구간은 1~2의 과정이다.</p>\n<p>HTML을 읽어 내려가는 과정에서 script 요소를 만나면 파싱을 중단,<br>\n중단 된 상태에서 자바스크립트 코드(파일)을 로드 후 자바스크립트 코드를 파싱한다.<br>\n그리고 다시 HTML 파싱이 계속된다.</p>\n<p>결론적으로 HTML을 읽는 과정에서 자바스크립트 로드와 파싱을 위해서 중단되는 시점이 생기고,\n그에 따라 그 만큼 Display에 표시되는 것이 지연된다.</p>\n<p>또 다른 이유로 <strong>HTML 파싱이 끝나고 DOM 트리가 생기기 전</strong>에 자바스크립트가 실행되어 DOM 조작을 할 경우 에러가 발생할 수 있다는 점이다. 아래 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> appEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 위와 같이 DOM에 관한 조작을 무수히 할 것인데 DOM 트리가 렌더링 되기 전이라면 <code class=\"language-text\">appEl</code>은 <code class=\"language-text\">undefined</code>이다. 이러한 오류점이 발생한 이유를 모르거나, 디버깅을 못한다면 이를 해결하는데 꽤나 애먹을 것이다.</p>\n<p>이로 알 수 있는 script 태그가 body 태그 최하단에 위치해야하는 2가지 이유</p>\n<ul>\n<li>HTML을 읽는 과정에서 중간에 스크립트를 만나면 스크립트 로드와 실행을 위해서 중단되는 시점이 생기고, 그에 따라 그 만큼 Display에 표시되는 것이 지연되게 된다.</li>\n<li>HTML 파싱이 끝나고 DOM 트리가 생기기 전 자바스크립트가 실행되어 DOM 조작을 할 경우 에러가 발생할 수 있다.</li>\n</ul>\n<p>이렇게 body 태그 최하단에 위치해야하는 이유를 알아봤고,<br>\n다음으로는 body태그 최하단에 위치하지 않고도 이러한 이유를 방지하기 위해서 사용하는 <strong>script 태그의 async / defer 속성</strong>을 알아보자.</p>\n<h2 id=\"script-태그의-async--defer-속성\" style=\"position:relative;\"><a href=\"#script-%ED%83%9C%EA%B7%B8%EC%9D%98-async--defer-%EC%86%8D%EC%84%B1\" aria-label=\"script 태그의 async  defer 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>script 태그의 async / defer 속성</h2>\n<p>기본적으로 script 태그는 위에서 작성한 브라우저의 동작 방식대로 불러진다.<br>\n하지만 async / defer 속성을 사용함으로 다르게 script 태그를 불러올 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>async 또는 defer 속성을 사용하면 공통적으로 <strong>HTML 파싱과 동시에 스크립트 로드</strong>가 이루어진다.</p>\n<p>그 후에,<br>\n<strong>async</strong>의 경우에는 <strong>HTML 파싱이 끝나지 않더라도 스크립트 로드가 완료되는 즉시 스크립트가 실행</strong>된다.<br>\n<strong>defer</strong>의 경우에는 <strong>HTML 파싱이 모두 끝난 뒤 스크립트가 실행</strong>된다.</p>\n<p>추가적으로 async의 경우에는 비동기적으로 여러 스크립트를 로드, 실행하기 때문에 스크립트의 순서에 상관없이 실행될 수 있다. 따라서 실행 순서가 서로 영향이 있는 스크립트들을 사용할 때에는 주의해서 사용해야 한다. (동기적인 실행을 위해서는 <code class=\"language-text\">async=false</code>로 설정하여 순서대로 실행할 수 있다.) defer의 경우에는 실행은 순서대로 실행된다.</p>\n<p>결론적으로,  </p>\n<p>script 태그가 body 태그의 최하단에 위치한다면 async와 defer가 필요없다고 할 수 있다.<br>\n하지만 그렇지 않을 경우 async와 defer를 활용해서 볼 수 있는 효과와 주의해야할 점을 정리해보면 아래와 같다.</p>\n<p><strong>async</strong> 또는 <strong>defer</strong> 중 어느것을 사용하더라도 <strong>HTML 파싱</strong>과 <strong>스크립트 로드</strong>가 동시에 진행되므로 <strong>HTML 파싱이 완료되는 시간을 줄일 수 있다</strong>  </p>\n<p><strong>async</strong>는 HTML 파싱과 동시에 스크립트 로드를 하지만 스크립트 실행은 HTML 파싱이 중지된 상태에서 되기 때문에 중간에 HTML 파싱이 멈추는 시점이 생길 수 있다. 다만 실행 순서를 감안해야 한다.</p>\n<p><strong>defer</strong>는 HTML 파싱과 동시에 스크립트를 로드하고 HTML 파싱이 완료 된 후 스크립트가 실행된다. 위에서 설명한 script 태그가 body 태그의 최하단에 위치해야하는 이유에 모두 적합하다.</p>\n<hr>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://poiemaweb.com/js-syntax-basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PoiemaWeb</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN|<script></a></li>\n</ul>","excerpt":"처음 html, javascript를 공부 할 때는 script 태그는 head 태그에 위치하게끔 하는 코드나, 또는 body 태그의 어디에 위치하건 그 위치에 대해 별 의미를 두지 않는 코드들이 많았다. 하지만 지금은 항상 스크립트는 body태그의…","tableOfContents":"<ul>\n<li><a href=\"/js-script-position/#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%8F%99%EC%9E%91%EA%B3%BC-script-%EC%9C%84%EC%B9%98%EC%9D%98-2%EA%B0%80%EC%A7%80-%EC%9D%B4%EC%9C%A0\">브라우저의 동작과 script 위치의 2가지 이유</a></li>\n<li><a href=\"/js-script-position/#script-%ED%83%9C%EA%B7%B8%EC%9D%98-async--defer-%EC%86%8D%EC%84%B1\">script 태그의 async / defer 속성</a></li>\n<li><a href=\"/js-script-position/#references\">References</a></li>\n</ul>","fields":{"slug":"/js-script-position/"},"frontmatter":{"title":"HTML에서 script태그는 어디에 위치해야 할까?","date":"May 02, 2018","tags":["javascript","html"],"keywords":["html script 위치","script 태그 옵션","script 태그 속성","script 태그 위치","script async","script defer","script async defer"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-script-position/","series":[],"lastmod":"2018-05-02"}},"staticQueryHashes":["2027115977","694178885"]}