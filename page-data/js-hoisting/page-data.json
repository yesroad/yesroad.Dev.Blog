{"componentChunkName":"component---src-templates-post-tsx","path":"/js-hoisting/","result":{"data":{"markdownRemark":{"html":"<p>Hoist는 \"끌어올리다\"라는 뜻을 가지고 있다.<br>\n자바스크립트 엔진은 코드를 실행하기 전에 코드 전체를 살펴본다.<br>\n이 과정에서 선언된 내용이 있는지 '선언'을 살펴본다.<br>\n그리고 그 '선언'된 내용들을 모두 호이스팅. 즉, 끌어올리게 된다.  </p>\n<p>아래 코드를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반적인 생각으로 코드가 라인 순서대로 실행된다면,\n1번 라인에서부터 함수 a가 선언되기 전이므로 a가 없어 오류가 발생해야한다.\n하지만 위에서 설명한 호이스팅에 따라서 결론적으로 실행되는 코드는 아래와 같게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>함수 선언문 a는 통째로 끌어올려졌다.</strong>\n기본 값이 담긴 변수 b와 함수 표현식 c는 선언만 끌어올려졌다.\n할당은 호이스팅의 해당 사항이 아니다.\nb와 c는 선언과 할당이 동시에 이루어진 것으로 분리되어 선언만 호이스팅 된 것이다.</p>\n<p>따라서 위의 코드에서는 에러가 하나 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a\n<span class=\"token keyword\">undefined</span>\nUncaught TypeError<span class=\"token operator\">:</span> c is not a <span class=\"token keyword\">function</span></code></pre></div>\n<p><code class=\"language-text\">console.log(a())</code>는 정상적으로 출력되어 'a'가 출력되었고,\n<code class=\"language-text\">console.log(b)</code>는 <code class=\"language-text\">var b</code>의 선언만이 호이스팅 되었으므로 undefined가 출력,\n<code class=\"language-text\">console.log(c())</code>는 <code class=\"language-text\">var c</code>의 선언만이 있고 함수 호출을 하였으므로 함수가 아니라는 오류가 발생하게 된다.</p>","excerpt":"Hoist는 \"끌어올리다\"라는 뜻을 가지고 있다. 자바스크립트 엔진은 코드를 실행하기 전에 코드 전체를 살펴본다. 이 과정에서 선언된 내용이 있는지 '선언'을 살펴본다. 그리고 그 '선언'된 내용들을 모두 호이스팅. 즉, 끌어올리게 된다.   아래 …","tableOfContents":"","fields":{"slug":"/js-hoisting/"},"frontmatter":{"title":"자바스크립트 호이스팅(Hoisting)","date":"Dec 30, 2017","tags":["javascript"],"keywords":["yesroad.Dev","Eunggil Kim"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-hoisting/","series":[],"lastmod":"2017-12-30"}},"staticQueryHashes":["2027115977","694178885"]}