{"componentChunkName":"component---src-templates-post-tsx","path":"/js-this/","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'user1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nuser1<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//user1 - Object {name: \"user1\", say: function}</span>\n<span class=\"token comment\">/* user1의 this는 해당 user1 object를 가리킨다 */</span>\n\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> user1<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">;</span>\n<span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined - Window {...}</span>\n<span class=\"token comment\">/* user의 this는 window를 가리킨다, window.user()로 window에서 호출했기 때문 */</span>\n\n<span class=\"token keyword\">var</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'user2'</span><span class=\"token punctuation\">,</span>\n  say<span class=\"token operator\">:</span> user1<span class=\"token punctuation\">.</span>say\n<span class=\"token punctuation\">}</span>\nuser2<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//user2 - Object {name: \"user2\", say: function}</span>\n<span class=\"token comment\">/* user2의 say가 user1의 say의 내용이지만 this는 호출된 해당 user2 object이다 */</span>\n\nuser2<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//user1 - Object {name: \"user1\", say: function}</span>\n<span class=\"token comment\">/* call과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 this를 가리키도록 지정하는 것 */</span></code></pre></div>\n<p><strong>call(), apply()</strong></p>\n<p>두 함수는 function 객체의 기본 내장 함수이다.\n일반적으로 함수가 호출될 때는 내부적으로 call() 함수로 변형되어서 처리된다.\ncall과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 this를 가리키도록 지정하는 것으로 첫번째 인자로 this를 지정하고 두번째 인자로는 함수의 인자를 지정한다.\ncall은 함수의 인자를 ','로 여러개를 넘기고 apply는 배열 한개로 넘긴다.</p>\n<hr>\n<h4 id=\"this의-이해\" style=\"position:relative;\"><a href=\"#this%EC%9D%98-%EC%9D%B4%ED%95%B4\" aria-label=\"this의 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this의 이해</h4>\n<p>일반적인 객체지향 언어와 달리 자바스크립트에서의 this는 조금 다르게 동작하는 경우가 많다.</p>\n<p>일반적인 상황에서 this가 어떻게 결정되는지 알려면 먼저 함수를 호출하는 방법에 대해 살펴봐야한다.</p>\n<p>자바스크립트에서 함수가 호출되는 방법은 다음 네가지가 주요하다.</p>\n<ol>\n<li>\n<p>일반 함수로의 호출</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jhon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>멤버함수로의 호출</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function-variable function\">say</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nhello<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>call() 함수를 통한 호출</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jhon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>apply() 함수를 통한 호출</p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jhon\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">whatsThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  what<span class=\"token operator\">:</span> whatsThis<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"[objcet user]\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">whatsThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//일반함수 \"[object Window]\"</span>\n<span class=\"token comment\">//글로벌 객체 window가 this로 설정되어있다.</span>\n<span class=\"token comment\">//일반적으로 함수가 호출될때는 내부적으로 call()함수로 변형되어 처리된다.</span>\n<span class=\"token comment\">//이때 call의 첫번째 인자는 undefined로 넘겨주어 this의 기본값으로 window가 되게 된다.</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//멤버함수 \"[objcet user]\"</span>\n<span class=\"token comment\">//이것또한 내부적으로 call함수로 변형되어 처리된다.</span>\n<span class=\"token comment\">//이때 call함수의 첫번째 인자로는 멤버함수를 보유한 객체(user)가 된다.</span>\n<span class=\"token comment\">//따라서 this는 user가 된다. </span>\n<span class=\"token comment\">//같은 함수라도 멤버함수가 호출되는 방법에 따라 this또한 변경되는 것이다.</span>\n\n<span class=\"token function\">whatsThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//call이용, 인자 없음 \"[object Window]\"</span>\n\n<span class=\"token function\">whatsThis</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//apply이용, 첫번째 인자 user\"[objcet user]\"</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">//멤버함수, call이용, 첫번째 인자 undefined \"[object Window]\"</span>\n\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">//멤버함수, call이용, 첫번째 인자 user \"[objcet user]\"</span></code></pre></div>\n<p><strong>this는 함수나 스코프를 기반으로 결정되는 것이 나닌, 호출 방법에 따라 변경된다.</strong></p>\n<p><strong>콜백함수를 인자로 넘기는 등의 비동기적 방식의 호출이 많은 자바스크립트에서는 중요하게 생각해야한다.</strong></p>","excerpt":"call(), apply() 두 함수는 function 객체의 기본 내장 함수이다.\n일반적으로 함수가 호출될 때는 내부적으로 call() 함수로 변형되어서 처리된다.\ncall과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 …","tableOfContents":"","fields":{"slug":"/js-this/"},"frontmatter":{"title":"자바스크립트 this","date":"May 14, 2017","tags":["javascript"],"keywords":["yesroad.Dev","Eunggil Kim"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-this/","series":[],"lastmod":"2017-05-14"}},"staticQueryHashes":["2027115977","694178885"]}