{"componentChunkName":"component---src-templates-post-tsx","path":"/js-functions/","result":{"data":{"markdownRemark":{"html":"<p>자바스크립트에서 함수선언문과 함수표현식의 차이점을 인식해두는 것은 중요한 점이다.\n큰 차이점이라 하면 호이스팅(Hoisting)이라고 할 수 있다.</p>\n<p>우선 함수선언문과 같은 경우를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">functionDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">functionDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'functionDeclaration'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'functionDeclaration'</span></code></pre></div>\n<p>함수 선언문의 경우에는 호이스팅에 의해 함수 전체가 호이스팅의 대상이 된다.\n따라서 작성한 코드에서 함수 선언문 보다 위에 함수 호출이 있더라도 정상적으로 호출이 된다.</p>\n<p>다음으로 함수표현식의 경우를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">unnamedFunctionExpression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">unnamedFunctionExpression</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'unnamedFunctionExpression'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Uncaught TypeError: unnamedFunctionExpression is not a function</code></pre></div>\n<p>결과는 unnamedFunctionExpression 변수가 함수가 아니라는 오류가 뜨게 된다.\n변수 선언 자체는 호이스팅되었지만 할당은 호이스팅의 대상이 아니므로 할당된 값이 없는 변수를 함수라 여기고 함수 호출을 한 샘이니 이러한 오류가 발생한 것이다.</p>\n<p>즉, 함수 선언문과 함수 표현식의 차이는 호이스팅 여부를 가름짓는 <strong>할당</strong>에 있다고 할 수 있다.</p>\n<p>함수선언문을 사용해서 나타날 수 있는 문제점을 아래 코드에 나타냈다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드는 a A 를 원하지만 A A가 나오게 된 문제가 생긴 코드 라인이 방대한 프로젝트의 경우 위와같은 커뮤니케이션 오류에 따라 원하는 함수의 결과를 얻지 못할 수 있다.</p>\n<p>이러한 점들을 종합해 함수선언문의 사용보다는 함수표현식의 사용이 권장된다.<br>\n유명한 더글라스 크락포드 그리고 Airbnb의 Code Convension에서도 함수표현식을 권장하고 있다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://blog.sonim1.com/142\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KENDRICK'S BLOG</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EC%8B%9D---function-declarations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CAPTAIN PANGYO</a></li>\n</ul>","excerpt":"자바스크립트에서 함수선언문과 함수표현식의 차이점을 인식해두는 것은 중요한 점이다.\n큰 차이점이라 하면 호이스팅(Hoisting)이라고 할 수 있다. 우선 함수선언문과 같은 경우를 살펴보자. 함수 선언문의 경우에는 호이스팅에 의해 함수 전체가 호이스팅…","tableOfContents":"<ul>\n<li><a href=\"/js-functions/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/js-functions/"},"frontmatter":{"title":"Javascript 함수선언문과 함수표현식","date":"Jan 02, 2018","tags":["javascript"],"keywords":["yesroad.Dev","Eunggil Kim"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/js-functions/","series":[],"lastmod":"2018-01-02"}},"staticQueryHashes":["2027115977","694178885"]}