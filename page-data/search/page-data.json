{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n### DataType\n---\n> 데이터 타입이란 프로그래밍 언어에서 사용할 수 있는 데이터 (숫자, 문자열, 불리언 등)의 종류를 말한다.\n\n1. **원시타입 (Primitive value)**\n    - number\n    - string\n    - boolean\n    - undefined\n    - null\n    - symbol (es6 추가 스펙)\n2. **객체 타입 (object / reference type)**\n    - Array\n    - Object\n    - Function\n    - ...\n    \n\n### Number\n\n---\n\n> 우리가 일반적으로 알고 있는 숫자와 동일하며, 덧셈(+) , 뺄셈(-), 곱셈(*), 나눗셈(/) 등의 연산을 할 수 있다.\n    \n```jsx\n// 숫자(number)\nconst num = 1 \nconst num02 = 1.2\n```\n    \n\n- **문자열을 숫자로 변경하는 방법도 존재한다**\n    - parseInt (정수 변환)\n    \n```jsx\n// parseInt ( 문자 -> 숫자 (정수) 변환 )\nconsole.log(parseInt('12')) // 12\nconsole.log(parseInt('3.14')) // 3\nconsole.log(parseInt('3.14 문자')) // 3\nconsole.log(parseInt('문자 3.14')) // NaN ( 문자열이 앞에 있으면 NaN )\n```\n    \n- parseFloat (소수 변환)\n    \n```jsx\n// parseFloat ( 문자 -> 숫자 (소수) 변환 )\nconsole.log(parseFloat('12')) // 12\nconsole.log(parseFloat('3.14')) // 3.14\nconsole.log(parseFloat('3.14 문자')) // 3.14\nconsole.log(parseFloat('문자 3.14')) // NaN ( 문자열이 앞에 있으면 NaN )\n```\n    \n\n### String\n\n---\n\n> '' 혹은 \"\" 를 사용하여 내용을 감싸서 문자열로 표시한다.\n    \n```jsx\n// 문자(string)\nconst string = '2' \nconst string02 = \"문자\"\n```\n    \n\n### Boolean\n\n---\n\n> 논리적인 요소를 나타내며 true / false 를 반환한다.\n    \n```jsx\n// 논리 true or false (boolean)\nconst boolean = true; \nconst boolean02 = false;\n```\n    \n\n### null\n\n---\n\n> 존재하지 않는 값을 나타낸다\n    \n```jsx\n// 존재하지않음(null)\nconst Null = null; \n```\n    \n\n### undefined\n\n---\n\n> 값이 할당되지 않았을 경우를 나타낸다\n    \n```jsx\n// 비어있는값(undefined)\nconst Undefined = undefined;\n```\n    \n\n### Symbol\n\n---\n\n> 심볼은 ES6에서 새롭게 추가된 타입이다. 심볼은 주로 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키를 만들기 위해 사용한다.\n    \n```jsx\n// es6 부터 사용\nconst symbol = Symbol(); \n```\n    \n\n### Object\n\n---\n\n> 자바스크립트의 객체(object)는 키(key)과 값(value)으로 구성된 프로퍼티(Property)들의 집합이다.\n    \n```jsx\n// 객체(object)\nconst object = {firstName: 'first, lastName: 'last'} \n```\n    \n\n### Array\n\n---\n\n> 배열은 [ ]로 감싸서 나타내며, 배열 안에는 무엇이든지(배열, 함수, 객체 등) 들어갈 수 있다.\n    \n```jsx\n// 배열(array)\nconst array = [1, 'second', {}, [], function(){}]\n```\n    \n\n### typeOf\n\n---\n\n> javascript 데이터 타입을 찾기 위한 함수\n    \n```jsx\nconsole.log(typeof 1) // number\nconsole.log(typeof 'strong') // string\nconsole.log(typeof []) // object(array) 베열도 객체로 본다.\nconsole.log(typeof {}) // object\nconsole.log(typeof true) // boolean\nconsole.log(typeof null) // object(null) 존재하지않는 null 값도 javascript 에서는 객체로 본다.\nconsole.log(typeof undefined) // undefined\n```\n    \n\n### undefined 와 null\n\n---\n\n> 기존값들을 undefined 및 null 을 사용하여 비어있는 값으로 만들 수 있다.\n    \n```jsx\nconsole.log(typeof undefined) // undefined\nconsole.log(typeof null) // object\nconsole.log(null === undefined) // false\nconsole.log(null == undefined) // true\n```\n    \n\n### NaN ( Not a Number )\n\n---\n\n> NaN 은 잘못된 입력으로 인해 계산을 할 수 없음을 나타내는 기호이다.\n\n```jsx\nconsole.log(NaN == undefined); // false\nconsole.log(NaN == null); // false\nconsole.log(undefined == null); // true\nconsole.log(NaN === NaN); // false\nconsole.log(NaN !== NaN); // true\nconsole.log(isNaN(NaN)) // true ( 전달된 값이 NaN 인지 아닌지 검사 );\n```","excerpt":"DataType 데이터 타입이란 프로그래밍 언어에서 사용할 수 있는 데이터 (숫자, 문자열, 불리언 등)의 종류를 말한다. 원시타입 (Primitive value) number string boolean undefined null symbol (es…","fields":{"slug":"/javascript-data-type/"},"frontmatter":{"date":"Jul 15, 2021","title":"Javascript - 데이터 타입(Data Type)","tags":["javscript"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}