{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n## **Debounce?**\n\n디바운스란 과도한 연속적인 요청을 방지하기 위해 사용합니다.\n연속된 요청 중 마지막 요청만을 실행합니다. (또는 첫번째 요청만)\n\n예를 들어 검색창에 타이핑을 할때마다 추천 검색어를 불러오는 API를 사용한다면, 빠르게 타이핑되는 자음모음마다 API가 호출될 테고 요청으로 받는 응답은 즉각적이지 않을 것인데, 따라서 호출을 통해 쓰이는 응답 결과는 얼마되지 않게 된다. 이렇게 낭비되는 API 호출은 유료 API의 경우 비용적인 문제로 치명적일 수 있다.\n\n---\n\n만들게 될 결과물은 Unsplash의 무료 이미지 API를 이용할 것입니다.\n\n한번의 검색에 하나의 이미지가 추가됩니다.\n(아래의 결과는 4번의 검색이 이루어져 4개의 이미지가 존재하는 것)\n\n빠르게 연속적인 검색 시 마지막 하나의 요청만 이루어져 하나의 이미지만 나오도록 하는 것이 목표입니다.\n\n![Untitled.png](Untitled.png)\n\n아래는 Debounce가 적용되기 전의 코드로 여기서 수정을 할 것입니다.\n\n`index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Debounce</title>\n    <style>\n      .keyword {\n        margin-bottom: 0.5em;\n      }\n      .image {\n        height: 4em;\n        margin-right: 2px;\n      }\n    </style>\n  </head>\n  <body>\n    <input class=\"keyword\" type=\"text\" autocomplete=\"false\" />\n    <div class=\"image-wrap\"></div>\n    <script src=\"/js-debounce.js\"></script>\n  </body>\n</html>\n```\n\n`js-debounce.js`\n\n```jsx\nconst keywordElement = document.querySelector(\".keyword\");\n\nconst renderImage = (imageURL) => {\n  const imgEl = document.createElement(\"img\");\n  imgEl.src = imageURL;\n  imgEl.className = 'image'\n\n  document.querySelector(\".image-wrap\").appendChild(imgEl);\n};\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n  const { key, target } = evt;\n  const { value } = target;\n\n  if (key === \"Enter\") {\n\t\tfetch(`https://source.unsplash.com/featured/?${value}`).then((res) => renderImage(res.url));\n  }\n});\n```\n\n여기에서 실행하여 검색을 해봅시다.\n검색어 입력 후 Enter를 빠르게 5번 입력한다면, 사진이 5개 추가되는 모습을 볼 수 있을겁니다.\n\n![Untitled1.png](Untitled1.png)\n\n이제 debounce를 구현해 봅시다.\n\n```jsx\n// js-debounce.js\n\n...\n\nlet timer = null;\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n\t...\n\n  if (key === \"Enter\") {\n    if (timer) clearTimeout(timer);\n\n    timer = setTimeout(() => {\n      fetch(`https://source.unsplash.com/featured/?${value}`).then((res) => renderImage(res.url));\n      timer = null;\n    }, 500);\n  }\n});\n```\n\nsetTimeout의 **동작을 500ms의 지연을 두고 실행되는 요청**이라고 하고\nclearTimeout의 동작을 **요청 취소**라고 이해하면 쉽습니다.\n\n500ms의 지연 중에 새로운 요청이 오면 요청 취소 후 다시 지연을 둔 요청이 이루어지는 것입니다.\n\n예로, 빠르게(< 500ms) 두번 Enter를 눌렀다고하면 아래와 같은 동작이 이루어 질 것입니다.\n\n1. [첫번째 요청] timer 값이 없습니다. (대기 중인 timeOut 동작 없음)\n2. [첫번째 요청] setTimeout에 해당하는 timer ID가 timer의 값이 되었고 해당 timeOut 동작은 대기 중입니다.\n3. [두번째 요청] timer 값이 있습니다. (대기 중인 timeOut 동작 있음)\n4. [두번째 요청] timer 값에 해당하는 timer ID를 가진 timeOut 동작을 취소합니다.\n5. [두번째 요청] setTimeout에 해당하는 timer ID가 timer의 값이 되었고 해당 timeOut 동작은 대기 중입니다.\n6. [두번째 요청] (500ms 후) 대기 중이던 timeOut 동작이 실행됩니다.\n\ndebounce를 구현하기 전처럼 빠르게 5번 검색을 실행하면 이제 마지막 요청 하나만 이루어지게 되는 모습을 볼 수 있습니다.\n\n![Untitled2.png](Untitled2.png)\n\n아래 코드는 debounce를 함수로 만들어 사용하는 모습입니다.\n\n```jsx\n// js-debounce.js\n\n...\n\nconst debounced = (func, wait) => {\n  let timerID;\n  return (...args) => {\n    clearTimeout(timerID);\n    timerID = setTimeout(() => func.apply(this, args), wait);\n  };\n};\n\nkeywordElement.addEventListener(\n  \"keyup\",\n  debounced((evt) => {\n    const { key, target } = evt;\n    const { value } = target;\n\n    if (key === \"Enter\") {\n      fetch(`https://source.unsplash.com/featured/?${value}`).then((res) => renderImage(res.url));\n    }\n  }, 500)\n);\n```\n\n아래처럼 간단히 lodash의 debounce를 이용할 수도 있습니다.\n\n```jsx\n// js-debounce.js\n\nimport _ from \"lodash\";\n\n...\n\nkeywordElement.addEventListener(\n  \"keyup\",\n  _.debounce((evt) => {\n    const { key, target } = evt;\n    const { value } = target;\n\n    if (key === \"Enter\") {\n      fetch(`https://source.unsplash.com/featured/?${value}`).then((res) => renderImage(res.url));\n    }\n  }, 500)\n);\n```","excerpt":"Debounce? 디바운스란 과도한 연속적인 요청을 방지하기 위해 사용합니다.\n연속된 요청 중 마지막 요청만을 실행합니다. (또는 첫번째 요청만) 예를 들어 검색창에 타이핑을 할때마다 추천 검색어를 불러오는 API를 사용한다면, 빠르게 타이핑되는 자…","fields":{"slug":"/js-debounce/"},"frontmatter":{"date":"Sep 20, 2020","title":"자바스크립트 Debounce","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트만을 사용해 React와 비슷하게 Component를 구현해보는 것이 오늘의 목표입니다.\n\n기본적인 최신 JS와 React에 대한 이해가 있다는 것을 가정으로 기술되었습니다.\n\n구현 할 것은 검색 시 해당 키워드에 해당하는 랜덤한 이미지를 하나 보여주는 간단한 앱입니다.\n\n![Untitled.png](Untitled.png)\n\n---\n\n## 기본적인 폴더 구조와 베이스 코드\n\n![Untitled1.png](Untitled1.png)\n\n### 폴더 구조\n\n- src/\n    - components/\n    - App.js\n    - style.css\n- index.html\n\n`~/index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Image Search</title>\n\t\t<link rel=\"stylesheet\" href=\"./src/style.css\" />\n  </head>\n  <body>\n    <main>\n      <header>\n        <h1>Image Search</h1>\n        <input class=\"keyword\" autocomplete=\"off\" />\n      </header>\n      <div class=\"search-results\"></div>\n\t\t\t<script type=\"module\" src=\"./src/App.js\"></script>\n    </main>\n  </body>\n</html>\n```\n\n`~/src/style.css`\n\n```css\nmain {\n  text-align: center;\n}\n\ndiv.search-results {\n  margin-top: 1rem;\n}\n\nimg.result-image {\n  width: 80vw;\n}\n```\n\n`~/src/App.js`\n\n```jsx\nconst keywordElement = document.querySelector(\".keyword\");\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n\tconst { key } = evt;\n\n  if (key === \"Enter\") {}\n});\n```\n\n`index.html`의 경우, 두가지 부분만 보시면 됩니다. `input.keyword`와 `div.search-results`입니다.\n`input.keyword`의 동작을 기준으로 App에서 `div.search-results`가 컴포넌트로 분리될 것입니다.  \n\n`App.js`의 경우, 기본적으로 검색의 동작을 구현하기 위해 `input.keyword` 엘리먼트에 keyup 이벤트리스너를 추가했고, enter 동작에 unsplash가 제공하는 무료 Simple API를 이용해 키워드에 해당하는 랜덤한 이미지의 주소를 가져오는 것까지 구현되었습니다.\n\n## 컴포넌트 구현\n\n`~/src/component/SearchResults.js`\n\n```jsx\nclass SearchResult {\n  constructor() {}\n\n\tasync render() {\n    const { keyword } = this.state;\n    const element = document.querySelector(\".search-results\");\n\n    if (keyword) {\n      const imageURL = (await fetch(`https://source.unsplash.com/featured/?${keyword}`)).url;\n      element.innerHTML = `<img class=\"result-image\" src=\"${imageURL}\">`\n    } else {\n      element.innerHTML = `<p>검색어를 입력하세요</p>`;\n    }\n  }\n}\n\nexport default SearchResult;\n```\n\n기본적인 컴포넌트의 코드는 위와 같습니다.\n\n검색어인 `keyword` 를 전달받았다면 이미지를 렌더하고, 없다면 검색어를 입력하라는 문구를 렌더합니다.\n\nrender 함수를 통해 렌더링이 이루어지므로, App.js에서 render 함수를 불러 첫 렌더링을 하면 됩니다.\n\n`~/src/App.js`\n\n```jsx\nimport SearchResults from \"./components/SearchResults.js\";\n\nconst SearchResultInstance = new SearchResults();\n\nconst keywordElement = document.querySelector(\".keyword\");\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n\tconst { key } = evt;\n\n  if (key === \"Enter\") {}\n});\n\nSearchResultInstance.render();\n```\n\nSearchResults 컴포넌트를 import 하였고,SearchResultInstance로 SearchResult의 instanse를 만들고 마지막에 render 함수를 실행하여 첫 렌더링이 이루어졌습니다.\n\n![Untitled2.png](Untitled2.png)\n\n이제 다음으로 구현할 것은 실제로 App에서 값을 전달 받아, 받을 때마다 새로운 결과를 보여줘야합니다.\n\n기본적으로 React를 생각해보면 컴포넌트는 state를 가지고 있고 state가 변경될 때마다 render가 실행됩니다.\n\n따라서 이 컴포넌트도 **state를 가지고, state가 변경 될 때마다 render가 실행**되도록 변경해봅시다.\n\n`~/src/component/SearchResults.js`\n\n```jsx\nclass SearchResult {\n  constructor() {\n    this.state = {\n      keyword: \"\",\n    };\n  }\n\n  setState(nextState) {\n    this.state = nextState;\n    this.render();\n  }\n\n\t...\n```\n\n위와 같이 state를 만들었고, setState가 호출 될 때마다 state를 새로운 값으로 바꾸고 render가 실행됩니다.\n\n`~/src/App.js`\n\n```jsx\n...\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n  const { value } = evt.target;\n  const { key } = evt;\n\n  if (key === \"Enter\") {\n    SearchResultInstance.setState({ keyword: value });\n  }\n});\n\n...\n```\n\n이제 `App.js` 에서 `SearchResultInstance.setState({ keyword: value });` 를 통해 enter로 검색마다 검색 키워드를 `SearchResultInstance`의 `setState`로 전달함으로 SearchResults 컴포넌트가 새로 렌더링 되며 결과가 바뀌게 됩니다.\n\n![Untitled.png](Untitled.png)\n\n## 컴포넌트 개선\n\n### 컴포넌트 상속\n\n이 프로젝트에서는 하나의 컴포넌트(SearchResults)만 만들어 사용하고 있지만 다수의 컴포넌트를 사용한다면,\n\n컴포넌트의 기능을 하는 컴포넌트 클래스를 하나 만들어 상속받아 사용하는 것으로 공통적으로 사용되는 중복을 개선할 수 있습니다.\n\n`~/src/component/Component.js`\n\n```jsx\nexport default class Component {\n  constructor(props = {}) {\n    this.state = this.state ?? {};\n    this.render = this.render ?? function () {};\n\n    if (props?.element) {\n      this.element = props.element;\n    }\n  }\n\n  setState(nextState) {\n    const prevState = this.state;\n\n    this.state = {\n      ...prevState,\n      ...nextState,\n    };\n\n    this.render();\n  }\n}\n```\n\n이제 element는 props으로 전달받을 것이며, \nsetState는 따로 구현하지 않아도 상속받아 사용이 가능 할 것입니다.\n\n`~/src/component/SearchResults.js`\n\n```jsx\nimport Component from \"./Component.js\";\n\nclass SearchResult extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: \"\",\n    };\n  }\n\n  async render() {\n    const { element, state } = this;\n    const { keyword } = state;\n\n\t\t...\n```\n\n이제 생성자의 super로 부모의 생성자를 호출하고, `render()` 에서 이제 `element` 를 this에서 가져온다.\n\n`~/src/App.js`\n\n```jsx\n...\n\nconst SearchResultInstance = new SearchResults({\n  element: document.querySelector(\".search-results\"),\n}\n\n...\n```\n\n`App.js` 에서는 인스턴스 생성시 element를 넘겨준다.\n\n## 최종 코드\n\n`~/index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Image Search</title>\n    <link rel=\"stylesheet\" href=\"./src/style.css\" />\n  </head>\n  <body>\n    <main>\n      <header>\n        <h1>Image Search</h1>\n        <input class=\"keyword\" autocomplete=\"off\" />\n      </header>\n      <div class=\"search-results\"></div>\n    </main>\n    <script type=\"module\" src=\"./src/App.js\"></script>\n  </body>\n</html>\n```\n\n`~/src/style.css`\n\n```css\nmain {\n  text-align: center;\n}\n\ndiv.search-results {\n  margin-top: 1rem;\n}\n\nimg.result-image {\n  width: 80vw;\n}\n```\n\n`~/src/App.js`\n\n```jsx\nimport SearchResults from \"./components/SearchResults.js\";\n\nconst SearchResultInstance = new SearchResults({\n  element: document.querySelector(\".search-results\"),\n});\n\nconst keywordElement = document.querySelector(\".keyword\");\n\nkeywordElement.addEventListener(\"keyup\", (evt) => {\n  const { value } = evt.target;\n  const { key } = evt;\n\n  if (key === \"Enter\") {\n    SearchResultInstance.setState({ keyword: value });\n  }\n});\n\nSearchResultInstance.render();\n```\n\n`~/src/components/Component.js`\n\n```jsx\nexport default class Component {\n  constructor(props = {}) {\n    this.state = this.state ?? {};\n    this.render = this.render ?? function () {};\n\n    if (props?.element) {\n      this.element = props.element;\n    }\n  }\n\n  setState(nextState) {\n    const prevState = this.state;\n\n    this.state = {\n      ...prevState,\n      ...nextState,\n    };\n\n    this.render();\n  }\n}\n```\n\n`~/src/components/SearchReults.js`\n\n```jsx\nimport Component from \"./Component.js\";\n\nclass SearchResult extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: \"\",\n    };\n  }\n\n  async render() {\n    const { element, state } = this;\n    const { keyword } = state;\n\n    if (keyword) {\n      const imageURL = (await fetch(`https://source.unsplash.com/featured/?${keyword}`)).url;\n      element.innerHTML = `<img class=\"result-image\" src=\"${imageURL}\">`;\n    } else {\n      element.innerHTML = `<p>검색어를 입력하세요</p>`;\n    }\n  }\n}\n\nexport default SearchResult;\n```","excerpt":"자바스크립트만을 사용해 React와 비슷하게 Component를 구현해보는 것이 오늘의 목표입니다. 기본적인 최신 JS와 React에 대한 이해가 있다는 것을 가정으로 기술되었습니다. 구현 할 것은 검색 시 해당 키워드에 해당하는 랜덤한 이미지를 하…","fields":{"slug":"/js-component/"},"frontmatter":{"date":"Sep 18, 2020","title":"자바스크립트로 컴포넌트 구현하기","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![Untitled%2096a200fb805647d29f1cf6f0413fcf28/Untitled.png](Untitled.png)\n\n**유튜브 영상에서 한글 댓글만을 볼 수 있는 크롬 확장 프로그램 \"한댓\"**  \n쉽게 댓글 화면의 우측 상단에 위치한 버튼으로 한글 댓글만 보기를 활성화할 수 있습니다.\n\n[유튜브의 한국어 차별, 더이상 못 참겠어서 폭로합니다. by 영국남자](https://youtu.be/DoOD8LBwjqI) 영상을 보고 간단하게 만들어봤습니다.\n\n### 🇰🇷 [\"한댓: 유튜브 한글 댓글만 보기\" **다운로드 (크롬 웹 스토어 바로가기)**](https://chrome.google.com/webstore/detail/%ED%95%9C%EB%8C%93-%EC%9C%A0%ED%8A%9C%EB%B8%8C-%ED%95%9C%EA%B8%80-%EB%8C%93%EA%B8%80%EB%A7%8C-%EB%B3%B4%EA%B8%B0/ljbjgmahddhnccggldafiaemkgacmmld?hl=ko)\n\n---\n\n- 댓글창의 우측 상단에 위치한 \"한국어 댓글만\" 체크박스를 체크하면 한글 댓글만 보여지게 됩니다.\n- 확장 프로그램 아이콘을 클릭하여 '항상 활성화', '고사양 모드' 설정을 활성/비활성 할 수 있습니다.\n  - 고사양 모드와 일반 모드의 차이\n  - 일반 모드: 외국어 댓글이 잠깐 노출된 후 바로 사라집니다.\n- 고사양 모드: 외국어 댓글이 전혀 노출되지 않습니다.\n- 한글 댓글의 기준은 댓글의 시작과 끝의 각 여섯 글자 안에 한글이 있어야 합니다.\n","excerpt":"유튜브 영상에서 한글 댓글만을 볼 수 있는 크롬 확장 프로그램 \"한댓\" 쉽게 댓글 화면의 우측 상단에 위치한 버튼으로 한글 댓글만 보기를 활성화할 수 있습니다. 유튜브의 한국어 차별, 더이상 못 참겠어서 폭로합니다. by 영국남자 영상을 보고 간단하…","fields":{"slug":"/yt-ohc/"},"frontmatter":{"date":"Jun 26, 2020","title":"한댓: 유튜브 한글 댓글만 보기 (크롬 확장 프로그램)","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n2020년을 맞아 이미 많이 알고 있는 ES2015(ES6) 다음부터인 ES2016부터 ES2020까지 새로 나온 자바스크립트 기능들을 살펴보려고 합니다. \n\n모두 소개하는 건 아니고 비교적 도움이 되는, 대표적인 것들을 추려 소개합니다.  \n또한 기초적인 사전 지식의 설명은 생략될 수 있습니다.\n\n<br/>\n\n## ES2016\n\n### Array.prototype.includes\n\n배열 내장 함수 includes가 추가되었습니다.\n\n```javascript\n['a', 'b', 'c'].includes('a') // true\n```\n\n코드를 보면 쉽게 역할을 알 수 있습니다.\n배열에 아이템이 존재하는지 Boolean 값을 반환합니다.\n\n이 함수로 이제 `['a','b','c'].indexOf('a') > -1` 대신 좀 더 간결한 코드가 가능합니다.\n\n### Exponentiation operator\n\n제곱 연산자.\n기존에 제곱은 Math의 pow 함수를 이용했을 것입니다. \n이제는 간단하게 `**` 연산자로 가능하게 되었습니다.\n\n```javascript\nlet num = 2;\n\nMath.pow(num, 10); // 1024\n2 ** 10; // 1024\n\nnum **= 10;\nnum; // 1024\n```\n\n<br/>\n\n## ES2017\n\n### String padding\n\n문자열에 여백을 주기 위해 등장한 기능입니다. \n여백 뿐만 아니라 그 여백에 보충 문자를 추가할 수 있습니다.\n\n여백을 앞에 뒤에 추가할 수 있게 됩니다.\n\n```javascript\npadStart(targetLength [, padString])\npadEnd(targetLength [, padString])\n```\n\n간단한 예를 통해 살펴보겠습니다. start와 end의 차이는 앞뒤의 차이밖에 없으니 start만 살펴봅니다.\n\n`1월` 을 `01월` 과 같이 길이를 맞춰야 할 경우가 있다 이럴때 사용 할 수 있습니다.\n\n```javascript\n`1월`.padStart(1);        // \"1월\"\n`1월`.padStart(3);        // \" 1월\"\n`1월`.padStart(3, \"0\");   // \"01월\"\n`1월`.padStart(7, \"0AB\"); // \"0AB0A1월\"\n```\n\n1번째 라인처럼 문자열보다 작은 수를 지정하더라도 문자열이 잘리거나 하진 않습니다\n\n2번째 라인은 문자열의 길이보다 하나 긴 3을 넣어 하나의 여백이 추가된 모습입니다.\n\n3번째 라인이 원하는 의도인 코드입니다.\n\n4번째 라인처럼 보충 문자를 배열로 작성하면 배열을 순회 반복하며 여백을 채우며 0, A, B를 채우고 다음으로 0, A까지 채워진 모습을 볼 수 있습니다.\n\n### Object.values()\n\nObject에 추가된 values 메소드는 객체의 key:value 에서 value 값들을 배열으로 반환합니다.\n\n```javascript\nconst obj1 = {name: \"Jhon\", age: 24};\nObject.values(obj1); // [\"Jhon\", 24]\n```\n\n### Object.entries()\n\n객체 안의 모든 속성을 각각 key, value가 담긴 배열로 하나의 배열에 담습니다.\n[[key, value], [key, value], [key, value] ...]\n\n```javascript\nconst obj1 = {name: \"Jhon\", age: 24};\n\nObject.keys(obj1);    // [\"name\", \"age\"]\nObject.values(obj1);  // [\"Jhon\", 24]\n\nObject.entries(obj1); // [[\"name\", \"Jhone\"], [\"age\", 24]]\n```\n\n### Object.getOwnPropertyDescriptors()\n\nObject에 기존에 있던 getOwnPropertyDescriptor에 이어 복수형 s가 붙은 getOwnPropertyDescriptors 메소드가 추가되었습니다.\n\n해당 메소드를 이해하기 위해서는 선행 지식으로 getOwnPropertyDescriptor가 무엇인지 알아야하며 속성 설명자의 네가지 속성을 알아야합니다. ([링크](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor) 참조)\n\n또한 Object.defineProperties() 같은 메소드를 알고 있어야 유용하게 활용할 방법이 생깁니다. 여기서는 자세한 설명없이 해당 메소드에 대해서만 설명합니다.\n\n```javascript\nObject.getOwnPropertyDescriptor(obj, prop)\n```\n\n기존의 getOwnPropertyDescriptor는 인자로 객체와 속성명을 전달해 해당 속성의 속성 설명자를 반환하는 메소드입니다.\n\n이제 여기서 설명하는 getOwnPropertyDescriptors는 속성명을 전달하지 않고 객체만 전달함으로 객체내의 모든 속성에 대한 속성 설명자를 반환합니다. \n\n```javascript\nObject.getOwnPropertyDescriptor(obj)\n```\n\n두개의 예제입니다.\n\n```javascript\nconsole.log(Object.getOwnPropertyDescriptor(obj1, \"name\"));\n// Object {value: \"Jhon\", writable: true, enumerable: true, configurable: true}\n\nconsole.log(Object.getOwnPropertyDescriptors(obj1));\n// Object {\n//   name: {value: \"Jhon\", writable: true, enumerable: true, configurable: true}, \n//   age: {value: 24, writable: true, enumerable: true, configurable: true}\n// }\n```\n\n### Trailing commas\n\n함수의 마지막 매개변수와 인자에도 콤마를 넣을 수 있습니다.\n\n아래와 같이 말이죠. 해당 기능이 왜 추가되었는지는 다양한 의견이 있습니다. 흥미가 있는 분들은 한번 검색해보세요.\n\n```javascript\nconst foo = (a, b, c,) => {}\n```\n\n### async/await\n\n사실상 ES2017의 핵심이라고 볼 수 있습니다. \n\n새로운 비동기 처리 함수로 기존의 Promise 보다 가독성이 좋은 코드를 작성할 수 있게 되었습니다. 선행적으로 비동기 처리에 대한 지식과 Promise의 이해가 필요합니다.\n\n해당 내용은 여기서 간단히 다루기에는 중요하고 내용이 길어 따로 포스팅을 할 예정입니다.\n\n아래 링크는 async/await를 설명한 캡틴판교님의 포스트입니다.\n\n[CAPTAIN PANGYO - 자바스크립트 async와 await](https://joshua1988.github.io/web-development/javascript/js-async-await/)\n\n<br/>\n\n## ES2018\n\n### Rest/Spread Properties\n\n기존의 배열에서 사용하던 rest/spread를 객체에서도 사용가능하게 되었습니다.\n\n```javascript\n// Rest\nconst { one, two, ...others } = { one: 1, two: 2, three: 3, four: 4, five: 5 }\nconsole.log(one, two, others); // 1 2 {three: 3, four: 4, five: 5}\n\n// Spread\nconst obj1 = {one, two, ... others};\nconsole.log(obj); // {one: 1, two: 2, three: 3, four: 4, five: 5}\n\nconst obj2 = { one: 100, five: 500 };\nconst obj3 = { five: 5000 };\nconst obj = { ...obj1, ...obj2, ...obj3};\nconsole.log(obj); // {one: 100, two: 2, three: 3, four: 4, five: 5000}\n```\n\n마지막 라인의 obj의 출력을 보면 같은 속성 이름에 대해서는 앞의 것을 뒤의 것이 덮어쓴다는 것을 알 수 있다.\n\n### Promise.prototype.finally()\n\nthen, catch, finally에서 Promise는 기존에 then과 catch만 가능했으나 이제 finally도 추가되었습니다.\n\n```javascript\nPromise.resolve('reslove')\n.then((res) => console.log('success'))\n.catch((err) => console.log('fail'))\n.finally(() => console.log('finally'))\n```\n\n### Asynchronous iteration\n\n비동기 이터러블 객체를 순회하는 것이 가능해졌습니다.\n\n이해를 위해서는 Promise, async/await의 이해가 선행됩니다.\n\n```javascript\nfor await (const req of requests) {\nconsole.log(req)\n}\n```\n\n<br/>\n\n## ES2019\n\n### String.trimStart() & trimEnd()\n\n문자열의 앞이나 뒤의 공백을 제거한다.\n\n앞을 제거하는 trimStart와 뒤를 제거하는 trimEnd가 있다.\n\n아래 예제를 보면 쉽게 이해할 수 있다.\n\n```javascript\nconst s = \"     hello world\";\nconst e = \"!     \";\n\nconsole.log(s + e + ';');\n// \"     hello world!     ;\"\n\nconsole.log(s.trimStart() + e.trimEnd() + ';');\n// \"hello world!;\"\n```\n\n### Optional Catch Binding\n\ncatch 매개변수 없이도 catch 블록을 사용할 수 있습니다.\n\n```javascript\ntry {\n// some code\n}\ncatch (err) {\n// error handling code\n}\n```\n\n위와 같이 `catch(err){}` 또는 `catch(){}` 와 같이 사용하던 것을 아래와 같이 사용할 수 있습니다.\n\n```javascript\ntry {\n// some code\n}\ncatch {\n// error handling code\n}\n```\n\n### Object.fromEntries()\n\n위에서 설명한 `Object.entries()` 의 정반대입니다.\n\n객체를 entries로 배열로 만들었다면 fromEntries로 다시 객체로 만들 수 있다는 이야기입니다. entires를 이해했다면 간단하게 아래 예제를 통해 알 수 있습니다.\n\n```javascript\nconst obj1 = {name: \"Jhon\", age: 24};\n\nconst entries = Object.entries(obj1); \nconsole.log(entries); // [[\"name\", \"Jhone\"], [\"age\", 24]]\n\nconst fromEntries = Object.fromEntries(entries);\nconsole.log(fromEntries); // {name: \"Jhon\", age: 24}\n```\n\n### Array.flat() & flatMap()\n\nflat 메소드는 배열안의 배열을 쉽게 합칠 수 있게 됩니다.\n예제를 통해 쉽게 이해할 수 있습니다.\n\n```javascript\nconst arr = [1, , 2, [3, 4, [5, 6]]];\n\nconsole.log(arr.flat());  // [1, 2, 3, 4, [5, 6]]\nconsole.log(arr.flat(1)); // [1, 2, 3, 4, [5, 6]]\n\nconsole.log(arr.flat(2)); // [1, 2, 3, 4, 5, 6]\n```\n\nflat의 인자로는 배열의 깊이를 넘겨줄 수 있으며, 전달된 인자가 없을 경우 default는 1이다. 또한 빈 배열은 무시된다.\n\nflatMap 메소드는 `map()`과 `flat()`이 합쳐진 것으로 볼 수 있다. 우선 map을 통해 새로운 배열을 만들고 flat을 통해 배열이 합쳐진다. (flatMap의 깊이는 1입니다)\n\n```javascript\nconst arr = [1,2,3];\n\nconst map = arr.map(v => [v]);\nconst flatMap = arr.flatMap(v=> [v]);\n\nconsole.log(map);         // [[1], [2], [3]]\nconsole.log(map.flat());  // [1, 2, 3]\n\nconsole.log(flatMap);     // [1, 2, 3]\n```\n\n<br/>\n\n## ES2020\n\n### Dynamic Import\n\n파일 import를 동적으로 할 수 있게 되었습니다.\n\n아래 예제는 if문에 따라 import한 파일의 사용 유무가 달라지는데 조건에 맞지 않더라도 일단은 최상단의 import를 통해 파일을 불러옵니다.\n그러나 이제는 두번째 코드 예제와 같이 Dynamic Import로 인해 불필요한 동작을 줄일 수 있게 되었습니다.\n\n```javascript\nimport config from './config.js';\n\nif(response) {\nage = config.age;\n}\n\nif(response) {\nimport('./config.js')\n.then(config => {\n  age = config.age;\n  console.log(config);\n}\n}\n```\n\n참고로 Dynamic import 예제인 두번째 코드에서 console.log의 출력 결과는 `{age: 24, skills: [\"react\", \"webpack\"], default: \"Jhon\"}` 입니다.\n그렇다면 config 파일의 내용은 아래와 같습니다.\n\n```javascript\nexport const age = 24;\n\nexport const skills = [\"react\", \"webpack\"];\n\nexport default \"Jhon\";\n```\n\ndefault로 export를 한 것은 default라는 속성 이름을 가지는 것을 알아두세요.\n\n### BigInt\n\nBigInt는 `2^53` 보다 큰 정수를 취급하기 위해 등장했습니다.\n\n숫자 뒤에 n이 붙는 특징을 가지고 있습니다.\n예로 `10n` 은 숫자 `10`을 뜻한다는 의미입니다.\n\n자세한 예와 설명은 아래 예제로 설명하겠습니다.\n\n```javascript\nconst int1 = Number.MAX_SAFE_INTEGER + 1; \n// 9007199254740992\n\nconst int2 = Number.MAX_SAFE_INTEGER + 2; \n// 9007199254740992  <= ~993이 아니다.\n\nconst bigInt2 = BigInt(Number.MAX_SAFE_INTEGER) + 2n; \n// 9007199254740993n <= ~993이 되었다.\n\nconsole.log(typeof int1, typeof int2, typeof bigInt2); \n// number number bigint\n\nconsole.log(typeof 9007199254740993n); // bigint\nconsole.log(9007199254740993n === bigInt2); // true\n// 일반적인 숫자 뒤에 n을 붙이는 것으로 bitint 타입을 가진다는 것을 알 수 있습니다.\n\nconsole.log(BigInt(10), BigInt(10n));\n// 10n 10n <= BitInt의 인자로는 n의 여부가 중요하지 않다.\n\nconsole.log(10 === BigInt(10)); // false\nconsole.log(10 == BigInt(10)); // true\n\n// console.log(9007199254740993n + 1);\n// 위 코드는 에러가 발생한다. bigint를 연산할때는 number 타입과 섞어쓰는 것이 안된다.\n```\n\n### Promise.allSettled\n\n`Promise.all()`은 모든 작업이 성공(reslove)해야 실행되는 특징과 달리 `Promise.allSettled()`은 도중에 실패(reject)되더라도 모든 실행을 할 수 있습니다.\n\n아래 예제를 통해 코드와 실행 결과를 살펴봅시다.\n\n```javascript\nconst p1 = new Promise((resolve, reject) => resolve(\"p1, resolved\"));\nconst p2 = new Promise((resolve, reject) => resolve(\"p2, resolved\"));\nconst p3 = new Promise((resolve, reject) => reject(\"p3, rejected\"));\n\nPromise.all([p1, p2, p3])\n.then(response => console.log(response))\n.catch(err => {\nconsole.log(err);\n});\n/*\nconsole.log(response)\n{status: \"fulfilled\", value: \"p1, resolved\"}\n{status: \"fulfilled\", value: \"p2, resolved\"}\n{status: \"rejected\", reason: \"p3, rejected\"}\n*/\n\nPromise.allSettled([p1, p2, p3])\n.then(response => console.log(response))\n.catch(err => {\nconsole.log(err);\n});\n/*\nconsole.log(err);\np3, rejected\n*/\n```\n\n### Nullish Coalescing Operator\n\n`a ?? b` 로 나타내는 연산자입니다. `null`이나 `undefined`일 때만 `b`를 반환합니다.\n\n0은 false를 의미하기도 합니다.\n따라서 `0 || 'A'` 는 `A` 가 될겁니다. \n하지만 0이 의미있는 값이면 0 또한 사용해야 할 것입니다.\n또한 삼항 연산자를 단축시켜 사용할 수 있는 장점도 있습니다.\n\n예제를 통해 살펴봅시다.\n\n```javascript\n0 || 'A'    // A\n0 ?? 'A'    // 0\n\n0 ? 0 : 'A' // A\n0 ?? 'A'    // 0\n```\n\n### Optional Chaining\n\n`foo.a.b` 에 접근한다고 했을 때, `a`가 없다면 오류가 발생하게 됩니다.\n\n따라서 오류를 방지하기 위해 `if(foo.a && foo.a.b)` 와 같이 사용하곤 합니다.\n\n하지만 Optional Chaining을 이용하면 오류가 발생하지 않고 undefined를 반환받습니다.\n\nOptional Chaining은 `foo.a?.b` 와 같이 표현합니다.\n\n```javascript\nconst foo = {\na: {\nb: true\n}\n};\n\nconsole.log(foo.a.b); // true\nconsole.log(foo.b?.b); // undefined\n\nconsole.log(foo.b.aa); // TypeError: Cannot read property 'aa' of undefined\n```","excerpt":"2020년을 맞아 이미 많이 알고 있는 ES2015(ES6) 다음부터인 ES2016부터 ES2020까지 새로 나온 자바스크립트 기능들을 살펴보려고 합니다.  모두 소개하는 건 아니고 비교적 도움이 되는, 대표적인 것들을 추려 소개합니다. 또한 기초적…","fields":{"slug":"/es2016-es2020/"},"frontmatter":{"date":"Jan 22, 2020","title":"ECMAScript ES2016~ES2020 정리","tags":["javascript"],"update":"Feb 06, 2020"}}},{"node":{"rawMarkdownBody":"\n뒤늦은 Hooks 포스팅입니다. Hooks 기본을 정리해보고, 사용해오면서 알게 된 점도 정리해봅니다.  \n간단히 useState에 대해 설명하고, useEffect에 대해서는 조금 더 자세하게 알아봅니다.\n\n---\n\nHooks는 React 16.8부터 등장한 새로운 기능입니다.  \nClass Component가 아니더라도 Functional Component에서 state 및 기타 기능을 사용할 수 있게 합니다.\n\n아래는 리액트 공식 문서의 Hooks 설명 일부입니다.\n\n> Hook는 알고 있는 React 컨셉을 대체하지 않습니다. 대신에, Hook는 props, state, context, refs, 그리고 lifecycle와 같은 React 개념에 좀 더 직관적인 API를 제공합니다. 또한 Hook는 이 개념들을 엮기 위해 새로운 강력한 방법을 제공합니다.\n\n일반적으로 Functional Component를 사용하게 되면 state를 사용할 수 없고 React LifeCycle을 사용할 수 없다는 한계에 부딪치게 되는데 Hooks의 등장으로 새로운 방법이 제공됩니다. (Effect Hooks 부분에서 자세히 알아봅니다)\n\n## useState()\n\n기존의 Class Component에서 사용하던 것을 보면 아래와 같습니다.\n\n```js\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n```\n\n위와 같이 state를 선언하고 `this.setState({ count: 1 })`와 같이 setState 함수를 통해 state 값을 변경할 것입니다.\n\n기존의 state를 다루는 방법은 useState Hooks를 이용하게 됩니다.  \n아래의 코드는 useState를 사용한 예제입니다.\n\n```js\nimport React, { useState } from 'react';\n\nconst Example = () => {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n};\n```\n\nuseState는 아래와 같이 사용합니다.\n\n```js\nconst [count, setCount] = useState(0);\n```\n\n`useState()`가 `count`, `setCount`로 [구조 분해 할당](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment '구조 분해 할당')되어있습니다.  \nuseState는 state 변수와 해당 변수를 변경할 수 있는 함수(즉, setState 함수)를 반환합니다.  \n따라서 아래와 같은 방법으로도 사용할 수 있습니다. 이렇게 사용할 일은 없겠지만 말입니다.\n\n```js\nconst countVariables = useState(0);\n\ncountVariables[1](20); // == setCount\nconsole.log(countVariables[0]); // 20, == count\n```\n\nClass Component 방식에서 사용하던 setState를 통해서는 기존의 state와 새로운 state를 합치는 방법으로 state 값이 변경되었으나, useState를 사용한 setState인 예제에서 setCount를 통해서는 state를 합치는 방식이 아닌 count state만을 변경하게 됩니다.\n\n### 요약\n\n#### 선언\n\n```js\nimport React, { useState } from 'react';\n\nconst Example = () => {\n  const [count, setCount] = useState(0);\n  //...\n```\n\n#### 갱신\n\n```js\n<button onClick={() => setCount(count + 1)}>\n// or\n<button onClick={() => setCount(prevCount => prevCount + 1)}>\n  // 기존의 setState 함수와 유사하게 prevState를 사용할 수 있습니다.\n```\n\n#### state 사용, 가져오기\n\n```js\n<p>You clicked {count} times</p>\n```\n\n## useEffect()\n\nuseState는 간단하고 사용하기 쉽습니다.  \nuseEffect는 간단한 사용은 쉬울지 모르나, 제대로 동작을 이해하려면 깊게 공부가 필요해보입니다. 따라서 여기서는 사용함에 있어 햇갈리지 않고 오류를 범하지 않으면서 기본적인 동작을 이해하는 수준에서 기술하겠습니다. 기존 Class Component의 Life Cycle을 이해하고 있다는 전제하에 진행합니다.\n\n아래 코드를 보겠습니다.\n\n```js\nimport React, { useEffect, useState } from 'react';\n\nexport const FuncComp = () => {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  useEffect(() => {\n    console.log('useEffect');\n  });\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setCount1(count1 + 1);\n        }}\n      >\n        FuncComp>count1 + (current: {count1})\n      </button>\n\n      <button\n        onClick={() => {\n          setCount2(count2 + 1);\n        }}\n      >\n        FuncComp>count2 + (current: {count2})\n      </button>\n    </div>\n  );\n};\n```\n\n해당 코드는 count1, count2의 state를 가지고 있습니다.  \n그리고 각각의 state를 변경(증가)하는 버튼이 위치합니다.\n\nuseEffect가 위치한 곳을 봐주세요.  \n여기서 useEffect의 안에 함수가 실행되는 시점.  \n즉, console.log가 작동하는 시점을 기존 Class Component의 LifeCycle의 관점에서 보면 아래와 같습니다.\n\n- componentDidMount\n- componentDidUpdate\n\n마운트와 업데이트 시점에서 “useEffect” 문구가 출력되게 됩니다.  \n위의 예에서는 첫 로드시, `count1` `count2`가 업데이트 될 때 출력됩니다.\n\n간단히 보자면 위 useEffect안의 함수는 “매 렌더링마다 실행된다”라고 생각하면 쉽습니다.\nprops, state가 변경될때마다 렌더링이 실행될테니말입니다.\n\n### 의존성 추가\n\n이제 아래 코드를 살펴보겠습니다.\n\n```js\nuseEffect(() => {\n  console.log('useEffect');\n}, [count1]);\n```\n\n`useEffect(fn)`형태에서 `useEffect(fn, [])`가 되어 인자로 배열이 추가되었습니다.\n\n여기서 배열은 **의존성**을 담은 배열로,  \n위와 같이 `count1`을 담는다면 이제 마운트시에 호출되고, 그 후로는 `count1`이 변경될때만 호출되어 “useEffect”문구가 출력될 것입니다.\n\n위의 예제에서 `count1`을 증가시키는 버튼을 누르면 “useEffect”문구가 출력될것이고, `count2`에서는 출력되지 않습니다.\n\n여기서 의존성 배열을 비운다면 어떻게 될까요\n\n```js\nuseEffect(() => {\n  console.log('useEffect');\n}, []);\n```\n\n위의 코드는 간단하게 말하면 componentDidMount의 역활을 대체할 수 있습니다.  \n의존성 배열 자체를 인자로 넘기지 않으면 모든 state(+props)가 변경될 때 호출되게 되지만 넘긴다면 해당 의존성이 변경될때 호출되게 되고 비어있다면 마운트시에만 호출되게 되는 것입니다.  \n따라서 componentDidMount를 구현하고 싶다면 해당 코드와 같이 작성하면 됩니다.\n\n### CleanUp\n\n아래 코드를 살펴봅시다. 의존성으로 `count1`을 가진 이펙트입니다.\n\n```js\nuseEffect(() => {\n  console.log('count1', count);\n\n  return () => {\n    console.log('count1 CleanUp', count);\n  };\n}, [count]);\n```\n\n위의 코드를 보면 return 라인이 추가되어 함수를 반환합니다.\n\n마운트 시, 그리고 `count1`에 변동이 있을 때 “count1” 문구가 출력될 것을 예상할 수 있습니다.\n“count1 CleanUp”은 언제 출력될까요?\n\n일단 마운트가 되면 “count1”이 출력됩니다.\n그 후 count1을 증가시키게되면 아래와 같은 과정을 거치게됩니다.  \n증가시키기 전인 count 값은 0입니다.  \n(이해를 위한 과정 설명으로 실제 작동은 이와 다를 수 있습니다)\n\n1. count = 0인 해당 이펙트(위의 코드) 클린업 과정 실행\n2. count = 1에 해당하는 렌더링\n3. count = 1에 해당하는 이펙트 실행\n   이를 통해 업데이트 이전에 클린업이 실행된다는 사실을 알고있으면 됩니다.\n\n또한 클린업은 언마운트시에도 작동하게 됩니다.\n따라서 만약 해당 컴포넌트가 언마운트되면 위 코드의 클린업도 실행되게 됩니다.\n\n아래 코드를 살펴보겠습니다.\n\n```js\nuseEffect(() => {\n  console.log('mount');\n\n  return () => {\n    console.log('unmount');\n  };\n}, []);\n\nuseEffect(() => {\n  console.log('update count1');\n\n  return () => {\n    console.log('update count1 or unmount');\n  };\n}, [count]);\n```\n\n코드의 첫번째 이펙트는 componentDidMount의 기능을 한다고 설명했던 코드입니다.  \n두번째 이펙트는 바로 위에서 살펴본 코드와 같습니다.\n\n아래의 동작을 하면 어떤 순서로 출력문이 나올지 보겠습니다.\n\n1. 페이지 로드 (컴포넌트 마운트)\n2. count1 증가 버튼 클릭\n3. 해당 컴포넌트 사라지게함 (언마운트)\n\n```shell\n< \"mount\"\n< \"update count1\"\n< \"update count1 or unmount\"\n< \"update count1\"\n< \"update count1 or unmount\"\n< \"unmount\"\n```\n\n1~2라인은 마운트에 해당하는 출력입니다.  \n3~4라인은 `count1`값을 업데이트하면서 클린업-\\>이펙트의 과정을 거친 출력입니다.  \n5~6라인은 컴포넌트가 언마운트되면서 이펙트들의 클린업이 실행된 출력입니다.\n\n6라인을 보아 해당 이펙트(빈 의존성 배열)의 클린업은 componentWillUnmount의 기능을 하는 것을 알 수 있습니다.\n\n클린업은 DOM에 추가한 이벤트 리스너를 컴포넌트가 언마운트될때 제거할 경우 등의 경우에서 사용되게 될겁니다.\n\n### 요약\n\n**Mount (componentDidMount)**\n\n```js\nuseEffect(() => console.log('mount'), []);\n```\n<br/>\n\n**Unmount (componentWillUnmount)**\n\n```js\nuseEffect(() => () => console.log('unmount'), []);\n```\n<br/>\n\n**Update Any**\n\n```js\nuseEffect(() => console.log('will update any'));\n```\n<br/>\n\n**Update Any or Unmount**\n\n```js\nuseEffect(() => () => console.log('will update any or unmount'));\n```\n<br/>\n\n**Update `Count`**\n\n```js\nuseEffect(() => console.log('will update count'), [count]);\n```\n<br/>\n\n**Update `Count` or Unmount**\n\n```js\nuseEffect(() => () => console.log('will update count or unmount'), [count]);\n```\n<br/>\n<br/>\n\n---\n<br/>\n\n**References**\n\n- [React Document | Hooks](https://reactjs.org/docs/hooks-intro.html 'React Document | Hooks')\n- [stackoverflow | react hooks useEffect() cleanup for only componentWillUnmount?](https://stackoverflow.com/a/55041347)\n","excerpt":"뒤늦은 Hooks 포스팅입니다. Hooks 기본을 정리해보고, 사용해오면서 알게 된 점도 정리해봅니다. 간단히 useState에 대해 설명하고, useEffect에 대해서는 조금 더 자세하게 알아봅니다. Hooks는 React 16.8부터 등장한 새…","fields":{"slug":"/react-hooks/"},"frontmatter":{"date":"Jan 08, 2020","title":"React Hooks: useState, useEffect 알아보기","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n**지금 이 글을 보고 있는 블로그는 Borderless 테마를 사용하고 있는 블로그입니다.**\n\n_Gatsby를 이용해 제작되었으며 Gatsby에 대한 간략한 설명은 이전 글([Gatsby로 블로그 만들기](/create-gatsby-blog))에서 확인 할 수 있습니다._\n\n**[Borderless 블로그 - 소개](/develop-blog-v3_2)**에서 borderless 테마의 기능과 특징을 확인하세요.\n\n이 블로그와 같은 블로그를 만들고 싶다면 이 글을 간략하게 참고하시고,  \n**[Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)**에서 자세한 방법을 참고하세요.\n\n---\n\n_\\* 아래 설명과 문서는 Github Pages에 배포되는 것을 기준으로 설명합니다._  \n_\\* 이 글에서는 매우 간략하게 방법을 기술하고 있습니다. 자세한 것은 문서에서 확인하세요_\n\n## Install\n\n해당 블로그로 시작하기 위한 방법은 두가지가 있습니다.\n\n1. 테마 Repository Fork 후 사용\n1. 테마 Repository Clone 후 사용\n\n### 1. **Fork**로 시작하기\n\n- 해당 Repository를 Fork 한 후,\n\n1. Repository의 이름을 \"**username**.github.io\"로 변경합니다.\n1. `Setting > Branches - Default branch`에서 기본 Branch를 변경합니다. **develop**를 선택하고 Update 버튼을 눌러 진행하세요.\n1. 이제 본인의 Repository를 Clone 합니다.\n1. `$ npm i` 명령어로 패키지 설치\n1. `$ npm start` 명령어로 개발 서버 시작  \n   \"localhost:8000\"에서 확인할 수 있습니다.\n\n### 2. **Clone**으로 시작하기\n\n```shell\n$ git clone -b develop https://github.com/junhobaik/junhobaik.github.io.git [SITE_DIRECTORY]\n$ npm install\n```\n\n위의 과정을 통해 develop 브랜치를 기본으로 해당 저장소를 클론하고 필요한 패키지를 설치합니다.\n\n```shell\n$ npm start\n```\n\n개발 서버를 실행하며 localhost:8000에서 확인할 수 있습니다.\n\n## Basic Settings\n\n`./config.js` 파일을 개인에 맞춰 수정합니다.  \n문자열은 ''로 비워두어 해당 기능을 비활성화 할 수 있습니다. (Site MetaData는 필수로 작성)\n\n아래는 예제입니다.\n\n```javascript\nmodule.exports = {\n  /** Site MetaData (Required all)*/\n  title: `Dev.White`,\n  description: `Junho Baik's Development Blog`,\n  author: `Junho Baik`,\n  siteUrl: 'https://junhobaik.github.io',\n\n  /** Header */\n  profileImageFileName: 'profile.png',\n\n  /** Home > Bio information*/\n  comment: 'Jr. Web Front-end Developer. / javascript, react ...',\n  name: 'Junho Baik',\n  company: '',\n  location: 'Korea',\n  email: 'junhobaik@gmail.com',\n  website: 'https://junhobaik.github.io',\n  linkedin: '',\n  facebook: '',\n  instagram: 'https://www.instagram.com/junhobaik',\n  github: 'https://github.com/junhobaik',\n\n  /** Post */\n  enablePostOfContents: true,\n  disqusShortname: 'junhobaik',\n\n  /** Optional */\n  googleAnalytics: 'UA-123123123-0',\n  googleAdsenseClient: 'ca-pub-5001380215831339',\n  googleAdsenseSlot: '5214956675',\n};\n```\n\n## Writing Posts\n\n`./posts`에 마크다운 파일을 위치시켜 게시물을 만들 수 있습니다.\n\n`./drafts`에 마크다운 파일을 위치시켜 임시 게시물을 만들 수 있습니다.  \n(개발 환경에서만 표시, 배포시 표시되지 않는 게시물)\n\n### Markdown YAML Front matter\n\n마크다운 상단에 아래와 같은 형식으로 게시물 정보를 입력합니다. 여기는 제목과 날짜가 필수로 들어가며 추가적으로 태그와 키워드를 넣을 수 있습니다.  \n그 후 하단에는 게시물의 내용을 입력합니다.\n자세한 작성법은 문서의 Markdown YAML Front matter란을 확인하세요.\n\n```\n---\ntitle: title here...\ndate: 2018-01-01\ntags:\n  - javascript\n  - ES6\nkeywords:\n  - keyword1\n  - keyword2\n---\n\n... Content here ...\n\n```\n\n## Deploy\n\n```\n$ npm run deploy\n```\n\n위의 명령어로 배포가 시작됩니다. master 브랜치로 commit이 자동으로 이루어지며,\n반영되기까지는 수십초 정도, 때로는 최대 수분의 시간이 소요됩니다.\n\n이제 본인의 주소로 들어가 확인할 수 있습니다.\n\n---\n\n더 자세한 Borderless 테마 사용법은 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 참고하세요.\n","excerpt":"지금 이 글을 보고 있는 블로그는 Borderless 테마를 사용하고 있는 블로그입니다. Gatsby를 이용해 제작되었으며 Gatsby에 대한 간략한 설명은 이전 글(Gatsby로 블로그 만들기)에서 확인 할 수 있습니다. Borderless 블로그…","fields":{"slug":"/develop-blog-v3_3/"},"frontmatter":{"date":"Dec 30, 2019","title":"Borderless 테마로 Gatsby 블로그 만들기","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n정적 사이트 제작 프레임워크 Gatsby를 이용해 만든 블로그,  \n“Borderless” 테마입니다.\n\n- 심플한 디자인\n- 마크다운 지원\n- 게시물 태그 기능\n- 게시물 검색 기능\n- 시리즈 게시물 기능\n- Google Analytics\n- Google Adsense\n- Disqus 댓글 기능\n- 검색 엔진 최적화(SEO)\n\n## 화면 설명\n\n### Home 화면\n\n게시물 목록을 볼 수 있는 홈 화면으로,  \n타이틀 이미지가 크게 표시되며 프로필 정보가 함께 표시됩니다.  \n게시물 목록에는 게시물의 제목, 날짜, 태그, 요약이 표시됩니다.  \n프로필 정보에는 소개 문구, 이름, 회사, 위치, 메일, 웹사이트, RSS, 소셜(페이스북, 링크드인, 인스타그램, 깃허브)를 표시할 수 있습니다.\n\n![](DraggedImage.png)\n\n스크롤 다운시 헤더와 프로필 정보가 숨겨져 게시물 목록에 집중할 수 있습니다.\n\n![](DraggedImage-1.png)\n\n### Post 화면\n\n게시물 화면입니다.  \n헤더는 스크롤 다운시 감춰지며 게시물의 내용에 집중할 수 있습니다.  \n화면의 크기가 충분히 넓을 경우 목차가 우측에 표시되며, 그렇지 않을 경우 게시물의 상단에 목차 버튼으로 목차를 볼 수 있습니다.  \n목차는 클릭하여 해당 위치로 이동할 수 있고, 스크롤 위치에 따라 보고있는 목차 부분이 강조되어 보고있는 위치를 알 수 있습니다.\n\n![](DraggedImage-2.png)\n\n![](screenshot.png)\n\n게시물에 하단에는 게시물을 소셜 공유 할 수 있는 버튼들이 위치합니다.  \n그 아래로는 광고와 댓글이 위치합니다.\n\n#### 시리즈 게시물\n\n만약 시리즈 게시물이라면 위와 같이 게시물 상단에 시리즈 목록이 표시됩니다.\n\n![](DraggedImage-4.png)\n\n### 태그 화면\n\n태그 화면에서는 모든 태그가 표시되며,  \n게시물 수가 많은 태그는 텍스트 크기가 크게 표시됩니다.  \n현재 보고있는 태그는 텍스트가 진하게 표시됩니다.  \n아래는 태그에 해당하는 게시물 목록이 표시됩니다.\n\n![](DraggedImage-5.png)\n\n### 검색 화면\n\n제목, 제목+내용으로 검색이 가능합니다.  \n검색 결과에 따른 게시물 목록이 아래 표시됩니다.\n\n![](DraggedImage-6.png)\n\n## 그 외 기능\n\n- 간단히 설정 파일의 내용 몇가지만 수정하면 자신의 블로그로 활용할 수 있습니다.\n- Google Analytics의 TrackingID를 설정에서 입력하여 쉽게 등록 및 관리할 수 있습니다.\n- 자신의 Google Adsense 정보를 설정에서 입력해서 쉽게 구글 애드센스를 활용할 수 있습니다.\n- 자신의 Disqus 사이트 생성 후 shortname을 설정에서 입력하면 쉽게 댓글 기능을 활성화 할 수 있습니다.\n- 검색 엔진 최적화로 기본 설정만 입력하면 따로 부가적인 작업 없이 구글 검색 결과에 문제 없이 노출될 수 있습니다.\n- 웹 표준 준수로 Safari 브라우저 등 읽기 모드(Reader Mode)를 지원합니다.\n- 마크다운내에서 이모지, 수학 표기법(ktex)를 지원합니다.\n- 임시 게시물(draft)을 작성할 수 있습니다. 개발 환경에서는 표시되며 배포시 표시되지 않습니다.\n\n## Borderless 블로그로 자신의 블로그 시작하기\n\n지금 보고있는 이 블로그를 자신의 블로그로 커스터마이징하여 사용할 수 있습니다.\n\n아래 링크를 통해 Get Started, Document를 확인 할 수 있습니다.\n\n[Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)\n","excerpt":"정적 사이트 제작 프레임워크 Gatsby를 이용해 만든 블로그, “Borderless” 테마입니다. 심플한 디자인 마크다운 지원 게시물 태그 기능 게시물 검색 기능 시리즈 게시물 기능 Google Analytics Google Adsense Disq…","fields":{"slug":"/develop-blog-v3_2/"},"frontmatter":{"date":"Dec 30, 2019","title":"Borderless 블로그 - 소개","tags":["blog"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](DraggedImage.png)\n\n[기존 블로그](https://priceless-darwin-0a5ad6.netlify.com/)에서 새로 블로그를 구현했다.\n\n테마 이름은 “Borderless”이다.  \n말그대로 블로그 디자인 요소에 선이 없어서 이렇게 지었다.\n\n이번에도 동일하게 Gatsby를 이용하여 제작했고 태그와 검색 기능이 있는 것은 이전 블로그와 비슷한 구조이다.\n\n그런데 이전 블로그는 GraphQL도 완전 백지 상태에서 껴맞추기식으로 구현해서 지저분한 곳이 있었고,  \n디자인쪽으로도 깔끔하고자했지만 뭔가 조잡한듯한 느낌을 지울 수 없었다.\n\n블로그를 운영하면서 느끼게 된 점을 바탕으로 다시 디자인하고 생각하여 만들게 되었다.\n\n홈화면을 화려하고 예쁘게 만들고 검색이나 태그 기능을 예쁘고 다양한 기능으로 무장하고... 하는 것도 좋겠지만,\n\n블로그 유입은 9할 이상이 검색을 통해서 이루어진다. 따라서 방문자는 게시물을 보는 것이 제일 중요하고 그 이후에 블로그를 둘러보는 행동을 하는 사람은 거의 없다고 보면 된다.\n\n그에 맞춰서 최대한 게시물에 집중 할 수 있는 디자인을 하고, 블로그를 시작한 의도에 맞춰 내가 필요하고 사용하기 편하게만 만들면 되는 것이다.\n\n그래서 딱 몇가지만 고려했다.\n\n- 내 정보를 보여줄 수 있었으면,\n- 뭔가를 살펴볼땐 그것에만 집중 할 수 있어야한다.\n- 불필요한 스타일, 애니메이션, 기능은 제거하자.\n\n그래서 구현한 결과는 이렇게 된다.\n\n**내 정보를 보여줄 수 있었으면,**  \n좌측에 개인 프로필과 메뉴가 위치한 블로그를 자주 볼 수 있다. 그러한 UI를 어느정도 원했다 프로필이 있었으면 했다. 하지만 좌측에 항상 뭐가 있다면 내용에 집중하는데 방해가 된다고 생각했고 반응형 디자인에도 좋지 않다고 생각해서 이러한 UI 보다는 다른 UI를 생각하게 되었다.  \n상단에 헤더가 위치하고, 블로그 로고 이미지와 블로그 제목이 좌측으로, 우측에는 메뉴(태그, 검색)가 위치한다.  \n게시물이나, 태그, 검색등의 작업을 할때는 로고와 텍스트가 작은 크기로 위치하다가 홈화면(게시물 목록 화면)으로 위치하면 로고 이미지의 크기가 커진다. 그리고 로고 이미지와 제목 아래 프로필 정보들이 나열된다. 이렇게 구현하면 마치 좌측에 프로필이 위치한 UI와 비슷하게 보인다. 하지만 홈화면에서 게시물 목록을 훑어보기 위해 스크롤하면 헤더와 프로필 정보가 감춰지면서 게시물 목록에만 집중 할 수 있게 된다.\n\n![](DraggedImage-1.png)\n\n**뭔가를 살펴볼땐 그것에만 집중 할 수 있어야한다.**  \n기본적으로 헤더를 항상 표시가 아닌 스크롤에 따라 숨기고 나타나도록 구현했다.  \n그래서 게시물을 읽을땐 온전히 게시물에만 집중 할 수 있고, 그 외로 표시되는 것은 TableOfContents 즉, 목차 뿐이다. 이것도 투명도를 낮춰 게시물을 읽는데 집중할 수 있도록 했다.\n\n![](DraggedImage-2.png)\n\n홈화면에서는 앞서 프로필을 설명하는 부분에서 설명한 것과 같이 스크롤 시에는 헤더와 프로필 정보가 모두 숨겨지며 보이는 것은 게시물 목록 뿐이다.\n\n**불필요한 스타일, 애니메이션, 기능은 제거하자.**  \n기존에는 선, 배경색으로 개체들을 꾸미고 그림자를 입히고, 거기에 마우스 오버시 살짝 앞으로 나오는 듯한 애니메이션을 넣는 등 예뻐보이기 위해 이것저것 했는데 이번에는 정말 심플 그 자체가 되고자 했다.  \n그래서 생각한게 선과 색을 넣지 말자는 것이었다.  \n스타일에 선, 색, 그림자가 없다. (마크다운 게시물 안에는 당연하게 있을 수 있다..)  \n따라서 입체감도 없다. 머터리얼 디자인이 유행하면서 입체감에 많은 신경을 썼었는데 이번에는 아예 반대로 입체감이 없이 해보기로 했다. 어짜피 내용에만 집중하도록 디자인하다보니 입체감이 중요하지 않았다. 불필요한 요소는 보이지 않을테니까.  \n그리고 애니메이션은 최소화했다. 헤더와 프로필 부분 말고는 큰 애니메이션이 없다.  \n이 블로그 테마 이름을 Borderless라고 했는데, 바로 선이 없다는 이유에서다.\n\n---\n\n이러한 것 이외에도 세세한 구석에 신경을 많이 썼다.  \nUX를 고려해서 어느 곳에서도 부드럽게 전환이 가능하도록 신경썼고,  \n블로그가 기본적으로 해야하는 기능, 그리고 추가적으로 있으면 좋은 기능들도 당연히 구현했다.  \n대표적으로 Google Analytics, Disqus 가 있다. 애널리틱스는 웹 운영에 필수고, 댓글 또한 블로그에 없어서는 안될 기능이다.  \n구현 중에 본인의 Disqus를 새로 설정하면서 기존 댓글이 지워진 아쉬움이 있긴하다.\n\n글을 쓰는 현재 아직 몇가지 해야할 것이 남았다.  \n몇가지 수정할 게 남았고, 그 다음으로 해야할 것이 다른 사람들이 이용할 수 있게 만들어두는 것이다. 기본적인 정보만 수정하면 자신의 블로그로 만들어 사용할 수 있게 처음부터 고려해서 만들어졌다. 이전 블로그도 이와 비슷하게 배포했는데 메일이나 댓글로 질문이 몇번와서 이번에는 문서를 조금 더 정성들여 적어봐야겠다.\n\n다음으로는 간단하게 블로그를 소개하고, 그 다음에는 이 블로그를 자신의 블로그로 만드는 방법을 자세하게 적어볼 수 있도록 하려 한다.\n","excerpt":"기존 블로그에서 새로 블로그를 구현했다. 테마 이름은 “Borderless”이다. 말그대로 블로그 디자인 요소에 선이 없어서 이렇게 지었다. 이번에도 동일하게 Gatsby를 이용하여 제작했고 태그와 검색 기능이 있는 것은 이전 블로그와 비슷한 구조이…","fields":{"slug":"/develop-blog-v3_1/"},"frontmatter":{"date":"Dec 30, 2019","title":"Borderless 블로그 - 개발기","tags":["blog","gatsby"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n이 글은 개발해서 운영하고 있는 서비스에 대한 잡담과 같은 후기이다.\n\n현재까지 개발해서 지속적으로 운영하고 있는 결과물은 5개 정도이다.\n\n- Blog\n- Netflix AutoSkip\n- Tablo\n- Tablo (version 2)\n- WhatSubs\n\n## [Blog](https://junhobaik.github.io/)\n\n최근 새로 새단장을 했다. 지금 보고 있는 이 블로그이다. 새로 만들게 된 이유는 심플함을 항상 추구했지만 뭔가 항상 맘에 들지 않았고 그래서 새로 처음부터 구현하면서 몇몇 코드만 가져다가 만들게 되었다. 그러는 김에 있었으면 하는 기능도 몇가지 추가할 겸 말이다.  \n이번에 블로그는 완전 깔끔하게 게시물에 집중할 수 있는 디자인으로 만들었다. 블로그 테마(?)의 이름은 \"Borderless\"로 지었다. 디자인은 말 그대로 선이 없다. 스타일에 border가 존재하지 않는다. 선(border)뿐만 아니라 배경색, 그림자를 넣지 않았다. 그러면서도 세련되게 만들려고 노력을 많이 했다. 지금은 개인적으로 상당히 만족스럽게 만들어진것 같다. 아직은 구현이 끝나지 않았다. 디테일한 몇군데 수정만 거치고 나면 완성될 것 같다. 전에 쓰던 블로그와 비슷하게 다른 분들도 사용이 가능하게 배포할 예정이다.\n\n게시물 부분에서는 업데이트를 자주 못했지만 개인적으로 저장하기 위해 시작했고 블로그를 개발하는 것도 스터디에 한부분이었던 블로그인데 조회수를 보면 조금 더 신경써야되나 싶다.\n\nGoogle Analytics를 통해 살펴보면 올해 총 페이지뷰가 대략 11만이 넘었다.  \n애널리틱스를 자세히 살펴보다보면 재밌는 부분이 많다. 다른 사이트에서 내 블로그를 링크를 통해 들어오면 그 링크된 사이트가 어디인지 알 수 있는데 거길 들어가서 살펴보면 내 글도 누군가에게 도움이 되고 있구나라는 생각이 든다.\n생활코딩의 강의 댓글에 내 블로그 글을 보면 도움이 될거라는 댓글을 보고 굉장히 뿌듯했던 기억이 난다.\n\n그리고 몇달전인가 도입한 에드센스를 살펴보면 조회된 애드센스 광고 단위수가 2만이 넘었다.  \n이것도 수익보다는 에드센스 도입을 한번 해보자라고 스터디 차원에서 한 것이었다.\n지금까지 총 수익은 7달러이다. 광고 차단 프로그램 탓도 있을 수 있겠다. 광고 차단 프로그램을 막을 수 있겠지만 수익을 생각하고 구현했던 것도 아니고 또한 광고 노출이 아닌 직접 클릭을 해야 수익이 나오는 것 같다.\n\n그리고 블로그를 남들도 쓸 수 있도록 구현했는데 (이것도 스터디 차원에서 해본..) fork해서 블로그로 잘 운영하고 있는 분도 계시는 걸 보니 또 뿌듯했다. 업데이트를 제대로 한번 해야겠다는 생각도 든다. 지금은 게시물만 종종 올리고 블로그 자체는 만족하고 그냥 쓰고 있으니 말이다.\n\n## [Netflix AutoSkip](https://chrome.google.com/webstore/detail/netflix-autoskip-intro-ne/pfcombngcgnehkbdoafkhdcfdmklboai)\n\n간단하고 간략한 코드로 구현된 크롬 확장프로그램이다.\n\n넷플릭스를 크롬 브라우저로 보는데 키보드와 마우스에서 멀리 떨어져서 볼 경우 인트로 스킵이나 다음 동영상을 넘기는 버튼을 누르러 다시 컴퓨터나 TV 앞으로 가는 것이 귀찮아 만들었는데 생각보다 많은 사람들이 쓰고 있다. 현재 3000명 정도가 전세계에서 쓰고 있고 이것도 애널리틱스에서 실시간 접속자로 전세계에서 접속하고 있는 위치 모습을 보면 재미있다.\n\n만드는 것들이 모두 내가 필요해서 만들기 시작한 것들이 대부분인데 이 앱은 쓰는 사람들이 좀 있고 버그가 있었을 적엔 메일로 피드백이 몇번 오기도 했다. 그런데 이 웹앱을 사겠다는 메일이 몇군데서, 그것도 다른 나라에서 왔었는데 이게 뭔가 싶다. 엄청 많은 사람이 쓰고 있는 것도 아니고 간단한 코드로 구현되었고 코드도 다 공개되어있는데...\n\nDOM 트리가 변경되는 것을 기준으로 기능이 동작하는데 이번에 넷플릭스 UI가 조금 변경되면서 최근에 새로 업데이트를 했다.\n\n얼마 전 수정하면서 기능이 유사한 다른 앱들을 살펴보니 아직 대응들을 안한 것인지 인트로 스킵과 다음 에피소드 재생 대기를 스킵하는 것이 모두 잘되는 것은 내 앱 뿐이었다.\n\n## [Tablo](https://chrome.google.com/webstore/detail/tablo-bookmark-and-manage/aoccnljcdmmbihgabpoljghfcmbflkhc)\n\ntrello와 비슷한 UI로 task가 아닌 link를 저장해 즐겨찾기와 같이 이용하는 크롬 확장프로그램으로 크롬의 새탭을 열면 열리는 웹앱이다. 크롬 시작화면 웹앱이라고도 할 수 있다.\n\n현재 열려있는 탭 목록을 표시하고 거기서 드래그해서 자신만의 즐겨찾기 목록을 만드는게 주요 컨셉이었고 확장 프로그램 아이콘을 통해 웹 서핑 중 즐겨찾기 목록에 추가하는 것도 가능하다.\n\n개발을 하고 따로 계속해서 발전시키지는 않았다. UI가 가로 스크롤이 필요한 UI이다보니 가로 스크롤에 대한 고민을 계속하긴 했었고 그에 대해 몇가지 변경이 이뤄지긴 했다.\n\n개인적으로 필요해서 만들었고 잘 쓰고 있긴 했지만 계속해서 발전시키지 않은 이유는 새로운 기능을 포함해 새롭게 다시 만들 생각을 하고 있었기 때문이었고 그로 인해 Tablo version2를 만들게 되었다.\n\n## [Tablo (version 2)](https://chrome.google.com/webstore/detail/tablo/aflhcldanmopecmjjinnenkcddghjnkn)\n\n이번에는 세로 형식의 trello 형식이 아닌 가로 형식으로 바꾸었고, 기존의 현재 열린 탭들 목록에서 자신의 즐겨찾기 목록으로 드래그하는 것, 확장 프로그램 아이콘을 통해 웹 서핑중 해당 사이트를 자신의 즐겨찾기 목록에 추가하는 것은 그대로 유지되었다.\n\n추가된 주요 기능은 간단하게 말하면 rss 구독 기능이다. rss 구독 주소를 등록할 수 있고 구독한 사이트들의 게시물이 화면에 보이게 된다.\n\n내가 브라우저를 켰을때 어디로 이동할 지 즐겨찾기와 같은 목록이 보였으면 좋겠고,  \n내가 관심있는 기술 블로그들의 최신 게시물을 쉽게 한곳에서 확인하고 싶었고,  \n웹 서핑이나 서치중에 나중에 보기위해 저장할 곳이 필요했다.\n\n위와 같은 이유를 모두 만족하는 내게 필요한 웹앱을 만들었다.\n원하는 기능은 거의 구현했으며 크롬 웹스토어에 출시했다 이제 디테일한 수정과 개선을 계속해나가면 된다.\n\n## [WhatSubs](https://junhobaik.github.io/whatsubs-dev-story/)\n\n최근에 만들었고 구글 플레이스토어, 앱스토어 심사를 통과했다.  \n[개발기](https://junhobaik.github.io/whatsubs-dev-story/)도 간단히 써놓은 것이 있다.\n\nWhat(무엇) + Subscription(구독)을 합친 이름으로 큰 고민 없이 만들었는데 생각보다 맘에 든다.\n\nWhatSubs는 구독 관리에 도움을 주는 앱으로, 자신이 구독하는 항목을 쉽게 목록에 추가하고 그 목록을 한눈에 쉽게 확인해 구독을 관리하는데 도움을 줄 수 있는 앱이다.\n\n구독하는 서비스가 많아지다보니 어디서 어떤 결제수단으로 구독을 해 두었는지 까먹기도하고 확인하기에도 불편해서 한눈에 확인하고자 만든 앱이다. 또, 어디서든 쉽게 확인하려면 핸드폰이 낫겠다 싶어 이참에 React Native앱을 만들어보고자 제작하기 시작했다.\n\nUI/UX에 많은 시간을 들였고 개인적으로는 만족스럽게 결과를 만들어냈지만 내 기준으로 만들다보니 최신 갤럭시 노트와 최신 아이폰과 같이 화면비가 긴 화면에 적합하게 만들어져 UI/UX로 아쉬운 점이 남았다. 해상도와 화면비를 고려해서 컨텐츠의 크기를 수정하기도 했지만 여전히 아쉬운 점이 많다.\n\n---\n\n## P.S.\n\n지속적으로 운영을 할거라면 개발 외에도 내 앱을 소개하는 페이지에도 신경을 좀 더 써야하나 싶다. 홍보까진 아니더라도 말이다.  \n이번에 출시한 WhatSubs는 소개 페이지를 그나마 포토샵을 오랜만에 사용해 만들었다. 아무래도 앱스토어와 플레이스토어에 올라가다보니 조금은 신경을 썼다. 그에 비해 다른 웹앱인 크롬 확장 프로그램들은 구글 프레젠트에서 대강 만들어 올리다보니 조금은 부실해보이는데 나중에라도 더 신경을 써서 만들어야겠다는 생각이 든다.\n","excerpt":"이 글은 개발해서 운영하고 있는 서비스에 대한 잡담과 같은 후기이다. 현재까지 개발해서 지속적으로 운영하고 있는 결과물은 5개 정도이다. Blog Netflix AutoSkip Tablo Tablo (version 2) WhatSubs Blog 최근…","fields":{"slug":"/dev-log-2019/"},"frontmatter":{"date":"Dec 29, 2019","title":"현재까지 개발한 결과물에 대한 이야기 2019","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nApp Store Connect에서 앱 정보를 입력하고 실제로 출시한다면  \nApp Store에서 입력한 항목들은 어디에 어떻게 위치하게 될 지 정리해보았습니다.\n\n아래는 App Store Connect에서 입력하고  \nApp Store에 직접적으로 표시될 내용들입니다.\n선택항목 및 표시되지 않는 항목은 제외한 목록입니다.\n\n- 이름\n- 부제\n- 등급\n- 앱 미리보기 및 스크린샷\n- 프로모션 텍스트\n- 설명\n- 아이콘\n- 카테고리\n- 지원 URL\n- 저작권\n- 개인정보 처리방침 URL\n\n## 검색 결과 화면\n\n앱 스토어 검색을 통해 해당 앱을 찾는다면 검색 결과 목록에서 표시되는 내용은 아래와 같습니다.  \n**아이콘**, **이름**, **부제** 그리고 **앱 미리보기 및 스크린샷**이 아래와 같이 나타납니다.\n\n![](DraggedImage.png)\n\n또한 부제의 경우 길이에 따라 줄임표로 내용이 생략될 수 있습니다.\n앱 미리보기 및 스크린샷의 경우 앱 미리보기가 우선이며 그 뒤로 스크린샷이 위치합니다.\n\n## 앱 상세 화면\n\n![](DraggedImage-1.png)\n상단에는 위와 같이 **아이콘**, **이름**, **부제**, **등급**, **앱 미리보기 및 스크린샷**이 위치합니다.\n\n![](DraggedImage-2.png)\n스크린샷 아래로는 우선 **프로모션 텍스트**가 위치하며 *더보기*를 누를 경우에 이어서 **설명**이 추가적으로 노출되게 됩니다.\n\n![](DraggedImage-3.png)\n하단에서는 리뷰 부분에 앱 지원을 누르게 되면 입력해둔 **지원 URL**의 주소로 이동합니다.  \n**카테고리**는 두개의 카테고리를 입력해두더라도 첫번째 카테고리만 표시되게 됩니다.  \n**등급**은 상단 화면의 연령에 이어서 다시 연령 등급이라는 항목으로 표시됩니다.  \n**저작권**은 입력해둔 저작권에 앞에 ©가 추가되어 표기됩니다.  \n개인정보 처리방침을 누르게 되면 입력한 **개인정보 처리방침 URL**로 이동합니다.\n\n(참고로 정보의 언어는 앱 스토어 커넥트에서 지정한 기본 언어가 나타나는 것이 아닙니다)\n\n## 추가 정보\n\n### 검색에 반영되는 항목\n\n- 이름\n- 부제\n- 태그\n  태그의 경우에는 심사에 영향을 미칠 수 있으니 주의해서 작성해야합니다.\n\n### 개인정보 처리방침 만들기\n\n개인정보 처리방침이 없으면 심사에 올릴 수 없습니다.\n[개인정보보호 종합포털](https://www.privacy.go.kr/ '개인정보보호 종합포털')의 개인정보처리방침 만들기 메뉴를 들어가서 절차에 따라 만들 수 있습니다. 절차에 따라 완성된 내용이더라도 추가적인 검토와 수정은 필수입니다.\n","excerpt":"App Store Connect에서 앱 정보를 입력하고 실제로 출시한다면 App Store에서 입력한 항목들은 어디에 어떻게 위치하게 될 지 정리해보았습니다. 아래는 App Store Connect에서 입력하고 App Store에 직접적으로 표시될 …","fields":{"slug":"/app-store-connect-form/"},"frontmatter":{"date":"Dec 06, 2019","title":"App Store Connect에 입력한 내용이 App Store에 어떻게 보일까?","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](a1.png)\n\n**[Google Play Store](https://play.google.com/store/apps/details?id=com.junhobaik.whatsubs)**  \n**[Apple App Store](https://apps.apple.com/kr/app/whatsubs/id1489637056)**\n\n---\n\nWhatSubs라는 iOS, Android 플랫폼의 React Native 앱을 최근에 만들게 되었습니다.\n지금은 두 플랫폼에서 모두 심사가 끝나고 출시가 되었습니다.\n아무래도 개인적인 필요에 의해 만들기 시작하였고 수요가 많은 앱이 될거라고 생각하진 않지만 이번에는 배포까지 전반적인 과정을 체험해보고자 이렇게 출시하게 되었습니다.\n\n앱을 간단히 소개하면 자신이 구독한 구독 서비스를 등록하고 리스트를 통해 확인할 수 있는 구독 관리에 도움을 주는 앱이라고 할 수 있습니다.\n\n다양한 구독 서비스를 사용하면서 구독 후 사용하지 않는데 깜박하고 해지를 안하거나, 결제 수단이 다양하다보니 각 결제 수단별로 구독한 항목을 확인하는데 어려움을 느껴 만들게 된 앱입니다.\n\n기존에는 웹과 크롬 확장 프로그램을 주로 개발해왔는데 이번에는 제대로 React Native앱을 만들어보고자 리액트 네이티브 문서를 보면서 기초부터 공부하며 만들게 되었습니다. 또 백엔드는 없는 독립형 앱을 만들고자 했습니다.\n\n### 리액트 네이티브\n\n리액트 네이티브를 사용하면서 어려웠던 점이나 느낀 점\n\n- 생각보다 React와 달리 제약이 많다  \n   Angular와 Vue보다 React를 선호하는 이유가 좀 더 자유롭다는 것이었습니다. 그런데 React Native는 다양한 플랫폼에서 동작하게 하려는 이유 등으로 이해는 가지만 생각보다 구현 할 방법에 제약이 있었습니다.\n- 노치, 펀치홀 대응  \n   노치와 펀치홀을 대응하는데 있어 쉽지가 않았습니다. 매끄러운 UI를 대응하기 위해서는 라이브러리 사용이 필요했고, 사용하더라도 완전히 android와 ios를 동시에 편하게 대응하기는 어려웠습니다.\n- 해상도 대응?  \n   다양한 기기, 다양한 화면비, 다양한 해상도가 있다보니 앱에서 표시되는 컨텐츠 내용의 양이 차이가 생겨 여기에 대응하는 것이 힘들었습니다. 처음에는 화면비로 대응을 했더니 화면비가 높으나 해상도가 낮은 기기로 좀 연식이 있는 기기와 같은 예외가 생겨 다시 해상도를 기준으로 컨텐츠의 크기를 조절해야했습니다. 이 부분에 대해서는 차후에도 디테일한 수정이 필요하다고 생각하고 있습니다.\n- Expo  \n   이번에는 Expo를 통해 개발하고, 번들링을 하게 되었는데 만약 Expo가 없으면 많이 불편하겠다는 생각을 했습니다. create-react-app 없이 개발할 수 있듯 React-Native도 그럴 수 있게 공부가 더 필요하겠다는 생각했습니다.\n- UI / UX  \n   RN에만 해당하는 것은 아니지만 모바일 앱으로 개발하면서 더욱 UI에 고민이 많았습니다. 게다가 한 화면에서 모든 정보를 보여주기를 원했기때문에 어떻게 할까 고민을 많이 했습니다. 지금의 화면에 만족하고는 있지만 본인이 화면비가 긴타입의 핸드폰을 사용하고 있고 본인을 기준으로 개발하다보니 저해상도의 예전 폰들에서는 내용이 덜 표시되는 문제는 뒤늦게 알게 되어 컨텐츠의 크기 등을 조절했지만 완전 만족스럽지는 못합니다.\n\n### 앱 출시\n\n앱 출시를 하면서 느낀 점\n\n- 저작권, 라이선스  \n   항상 개발을 하면서 저작권을 중요하게 생각했습니다. 다양한 회사와 서비스의 로고가 들어가다보니 저작권에는 문제가 없는지 알아보게 되었고, 알아보면서 다시 한번 저작권은 어렵다는 생각을 또 한번 했습니다. 그리고 이번에는 앱 출시에 있어서 앱 내부에 ‘오픈소스 라이선스’라는 것을 넣어서 앱 내에서 사용한 패키지, 라이브러리에 대한 라이선스 내용을 첨부했습니다.\n- 영어 공부를 해야겠다?  \n   개발하는데 있어 라이브러리 등등 도큐먼트에 가서 사용법을 익히는 정도는 괜찮았지만 출시에 있어 가이드 문서를 보는건 역시 힘들었습니다. 어서 영어 공부를 더 해야겠다는 생각이 들었습니다... 또한 다국어 처리를 하는데 있어서도 번역기로는 한계가 있었고 전에 만든 Tablo 웹앱은 다국어 처리를 했으나 일단은 이 WhatSubs앱은 한국을 대상으로 출시했고 차후에 다국어 처리가 가능하도록 개발을 진행했으니 나중에 몇가지만 더 구현하고 내용을 채우면 될 것 같습니다.\n- 개인정보  \n   앱스토어에서는 개인정보처리방침을 마련하지 않으면 앱을 올리지 못합니다. 일상 그냥 넘기던 그 긴 문서를 직접 만들어야한다니 막막했는데 개인정보처리방침을 쉽게 만들 수 있게 된 공공사이트가 있어 만들 수 있었습니다. 허나 지금 앱은 독립형앱이고 서버가 없어 따로 수집하는 개인정보가 없기 때문에 이렇게 쉬웠던 것이지 만약에 개인정보를 수집하는 앱이라면 더 알아봐야 할 것이 많고 작성하는데도 어려울뿐더러 개인정보처리방침을 따라 개인정보 처리를 하고 폐기를 하고 관리를 해야한다면 앱을 운영하는 것이 그리 쉽지만은 않겠다는 생각이 들었습니다.\n\n---\n\n- 아이폰의 왼쪽 사이드를 슬라이드하여 뒤로가기, 안드로이드폰의 뒤로가기 버튼(하드웨어, 소프트웨어)의 기능과 그에 따른 화면의 스택, 그리고 노치 영역을 고려한 View인 SafeAreaView를 사용하기 위해 사용한 모듈은 `react-native-gesture-handler`\n\n- 개인정보처리방침을 만들때 이용한 사이트는 [개인정보보호 종합포털](https://www.privacy.go.kr/ '개인정보보호 종합포털')이며 ‘개인정보처리방침 만들기’ 메뉴를 이용하면 된다.\n","excerpt":"Google Play Store Apple App Store WhatSubs라는 iOS, Android 플랫폼의 React Native 앱을 최근에 만들게 되었습니다.\n지금은 두 플랫폼에서 모두 심사가 끝나고 출시가 되었습니다.\n아무래도 개인적인 필…","fields":{"slug":"/whatsubs-dev-story/"},"frontmatter":{"date":"Dec 05, 2019","title":"WhatSubs 앱 개발기 (React-Native, Expo)","tags":["react-native"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nCSS 방법론은 스타일을 정의하는데 있어 엘리먼트의 class와 id를 어떻게 다루는지, 네이밍을 어떻게 하는지의 방법을 정의해 더 직관적인 스타일 코드를 작성하고 팀 단위의 개발을 원할하게 하는데 사용된다.  \n대표적으로는 BEM, OOCSS, SMASS가 있으며 여기서는 BEM에 대해 간단히 알아보겠다.\n\nBEM의 공식 가이드 홈페이지는 [https://en.bem.info](https://en.bem.info/ 'bem')로 영어와 러시아어가 지원된다.\n\n## BEM?\n\nBEM은 **Block**, **Element**, **Modifier** 세개 단어의 약자이다.  \n크게 세가지를 통해서 네이밍을 하게 된다.\n\nBEM은 기본적으로 id가 아닌 class만 사용하는 것을 지향하며, CSS tag도 쓰지 않는다.  \n세개(B,E,M)의 요소를 기준으로 클래스명을 작명하게 된다.\n\n```css\n.error #test { ... } ❌ id 사용\n.info h1 { ... } ❌ tag 사용\n\n.info__text { ... } 👍\n```\n\n## Block\n\nBlock을 기준으로 네이밍을 시작하게 되며 블록의 이름 뒤에 `__`로 연결하여 Element 이름을 작성하게 된다.\n\n블록은 **독립적으로 기능**하는 단위이다.\n\n```html\n<div class=\"big-text\" /> ❌\n\n<div class=\"error\" /> 👍\n```\n\n큰 텍스트(big-text)를 정의한 것은 텍스트라는 **목적** 또는 크다는 **모양**을 기술하였으므로 하나의 독립적 기능을 하는 단위라 볼 수 없다.  \n오류(error)라 정의한 것은 무엇을 하는가, **기능**. 즉 오류라는 기능을 수행한다는 독립적인 단위가 될 수 있다.\n\n블록에는 position, margin과 같이 외부적인 위치를 조정하는 스타일을 지정할 수 없다.\n\n**=\\> 독립성과 재사용성의 보장**  \n무엇을 하는지 정의하고 외부적인 위치를 조정하는 position, margin과 같은 스타일을 넣지 않으므로 블록이 움직이거나 다른 곳에서 이 블록을 또 사용하더라도 독립성을 유지할 수 있게 되는 것이다.\n\n블록은 중첩될 수 있으며, 여러 중첩을 거칠 수 있다.\n\n```html\n<!-- header 블록 -->\n<header class=\"header\">\n  <!-- 중첩된 logo 블록 -->\n  <div class=\"logo\" />\n  <!-- 중첩된 serch-from 블록 -->\n  <div class=\"search-form\" />\n</header>\n```\n\n## Element\n\nElement는 블록을 구성하는 단위로 블록과 분리될 수 없는 블록의 하위 요소이다.  \n따라서 블록 이름 없이 사용할 수 없으며,  \n블록 이름 뒤에 언더바 2개`__`로 연결하여 작성한다.\n\n엘리먼트는 위에서 예를 든 `big-text`를 통해서 살펴보면,  \nbig과 같은 모양을 나타내는 것은 옳지 않다.  \ntext와 같은 목적을 나타내는 것은 사용할 수 있다.\n\n```html\n<div class=\"search-form\">\n  <h1 class=\"search-from__big\"></h1> ❌ \n  <span class=\"search-from__text\"></span> 👍 \n  <input class=\"search-from__input\" /> 👍\n</div>\n```\n\n엘리먼트 또한 블록과 같이 중첩될 수 있으며, 여러 중첩을 거칠 수 있다.\n\n```html\n<form class=\"search-form\">\n  <div class=\"search-form__content\">\n    <input class=\"?\" /> 👈\n    <!--\n\t\t\t\"search-form__content__input\" ?\n\t\t\t\"search-form__input\" ?\n    -->\n  </div>\n</form>\n```\n\n위에서 input 태그를 보면 계층이 블록\\>엘리먼트\\>엘리먼트이다.\n그렇다고해서 Block `search_form`안의 Element `content`안의 `input`이라고 해서 `search-form__content__input`라고 네이밍을 하는 것은 옳지 않다.\n\n엘리먼트의 이름은 이어서 계층구조를 가지게 작성되어서는 안된다.  \n따라서 `search-form__input`으로 작성되어야 맞다.\n\n```css\n.block {\n}\n.block__elem1 {\n}\n.block__elem2 {\n}\n.block__elem3 {\n}\n```\n\n```html\n<div class=\"block\">\n  <div class=\"block__elem1\">\n    <div class=\"block__elem2\"></div>\n    <div class=\"block__elem3\"></div>\n  </div>\n</div>\n\n<!-- Change -->\n<div class=\"block\">\n  <div class=\"block__elem1\">\n    <div class=\"block__elem2\"></div>\n  </div>\n\n  <div class=\"block__elem3\"></div>\n</div>\n```\n\n이러한 구조를 따르면 위의 코드를 통해 알 수 있듯 블록의 구조가 변경되더라도 해당 엘리먼트들의 규칙을 유지할 수 있게 된다.\n\n여기까지 살펴보면 아래 코드를 보면 옳지 않다는 생각이 든다.\n\n```html\n<div class=\"search-form\">\n  <input class=\"input\" />\n  <button class=\"button\">Search</button>\n</div>\n```\n\n하지만 input, button을 엘리먼트가 아닌 하나하나의 블록으로 살펴 볼 수 있기 때문에 틀린 코드라고 할 수 없다. 따라서 꼭 블록 안에 엘리먼트가 있어야 하는 것은 아니라고 할 수 있다.\n\n## Modifier\n\nModifier는 블록이나 엘리먼트의 모양이나 상태, 또는 행동을 정의합니다.  \n블록, 엘리먼트 뒤에 하나의 언더바`_`로 이어 기술합니다.\n\n예를 들어 어떤 사이즈인지 `size_m`, 어떤 상태인지 `disabled` `focused`, 어떤 동작인지 `directions_left-top`를 적으면 된다.\n\n### Types of modifiers\n\n**Boolean**\n\n- `block-name_modifier-name`\n- `block-name__element-name_modifier-name`\n  위와 같은 패턴으로 작성하는 것으로,\n\n`focused`와 `disabled`와 같이 상태를 나타내는 것은 보통 boolean 값을 가질 것을 생각하는데 이럴때는 **true**라고 가정하고 작성하는 것을 원칙으로 한다.\n\n```html\n<form class=\"search-form search-form_focused\"></form>\n```\n\n`search-form_focused`의 `_focused` 부분이 true라고 가정, 포커스가 된 상태의 검색폼이라고 할 수 있다\n\n**Key-value**\n\n- `block-name_modifier-name_modifier-value`\n- `block-name__element-name_modifier-name_modifier-value`\n\n`테마: 아일랜드` 와 같이 키-벨류를 나타내는 듯한 이름을 말한다.\n\n```html\n<form class=\"search-form search-form_theme_islands\"></form>\n```\n\n`theme_islands`와 같이 키와 벨류를 하나의 언더바로 분리한 모양으로 작성하면 된다.\n\n## Mix\n\n```html\n<div class=\"header\">\n  <div class=\"search-form header__search-form\" />\n</div>\n```\n\n클래스를 나눠보면 아래와 같다.\n\n- `header` Block\n- `header__search-from` Element\n- `search-form` Block\n\n정리하면,\n\n`header` Block에 `search-from` Block의 스타일과 동작을 Mix해 header 블록의 search-from이라는 `header__search-from`을 만들었다.\n\n이는`header__search-from`를 이용해 `header`, `search-from` 각각의 Block의 독립성을 유지하면서 `search-form` 블록에 margin이나 position을 조정할 수 있게 된다.\n\n## File structure\n\nBEM 방법론은 파일 구조에도 쓰일 수 있다. 프로젝트 구조를 작성할 때 폴더, 파일명에 규칙을 적용해 아래와 같이 작성할 수도 있다.\n\n```\nsearch-form/ #Block\n\n    __input/ #Element\n        search-form__input.css\n        search-form__input.js\n\n    __button/ #Element\n        search-form__button.css\n        search-form__button.js\n\n    _theme/ #Modifier\n        search-form_theme_islands.css\n        search-form_theme_lite.css\n\n    search-form.css\n    search-form.js\n```\n\n파일 구조를 작성하기위한 규칙은 아래와 같다.\n\n- 하나의 Block은 하나의 디랙토리에 해당한다.\n- Block과 디렉토리의 이름은 동일해야한다.\n- Block의 구현은 별도의 파일로 나눈다. (`header.js`, `header.css`)\n- Block 디렉토리가 루트 디렉토리가 되며 아래에 해당 블록의 Element, Modifier 디렉토리가 있는다.\n- Element 디렉토리의 이름은 두개의 언더바 (`__`)로 시작한다 (`header/__logo/`, `menu/__item/`)\n- Modifier 디렉토리의 이름은 하나의 언더바 (`_`)로 시작한다.(`header/_fixed/`, `menu/_theme_islands/`)\n- Element와 Modifier의 구현은 별도의 파일로 나눈다. (`header__input.js`, `header_theme_islands.css`)\n\n---\n\n- References - [BEM Quick-start](https://en.bem.info/methodology/quick-start 'bem quick start')\n","excerpt":"CSS 방법론은 스타일을 정의하는데 있어 엘리먼트의 class와 id를 어떻게 다루는지, 네이밍을 어떻게 하는지의 방법을 정의해 더 직관적인 스타일 코드를 작성하고 팀 단위의 개발을 원할하게 하는데 사용된다. 대표적으로는 BEM, OOCSS, SMA…","fields":{"slug":"/css-bem/"},"frontmatter":{"date":"Nov 12, 2019","title":"CSS 방법론 - BEM","tags":["css"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n_해당 포스트는 macOS 환경을 기준으로 작성되었습니다_\n\n[**NVM**(Node Version Manager)](https://github.com/nvm-sh/nvm)\n\nNode 버전을 쉽게 관리 할 수 있다.\n예로 사용하던 패키지가 Node 버전이 업데이트를 함에 따라 호환이 되지 않을 경우가 생길 때 NVM없이 Node 버전을 되돌리기는 간단한 작업은 아니다. 이런 경우 NVM이 요긴하게 사용될 것이고 이 외에도 팀규모의 개발 등 많은 곳에서 Node 버전 관리가 필요할 수 있다.\n\n## 설치\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n```\n> [NVM | Installation](https://github.com/nvm-sh/nvm#installation-and-update)\n\n## 사용\n\n현재 사용 가능한 Node Version List를 보여준다.\n```bash\n> nvm ls-remote\n```\n\n특정 버전의 Node를 설치합니다.\n```bash\n> nvm install <version>\n```\n\n또는 LTS Version으로 설치\n```bash\n> nvm install --lts\n```\n\n사용할 Node 버전 설정\n```bash\n> nvm use <version>\n```\n> 처음 설치한 Node 버전은 자동으로 사용하게 설정이 되어있습니다.\n\n이렇게 간단하게 버전을 설치하고 사용을 설정하면 됩니다.\n설치된 리스트를 확인해보면 아래와 유사한 출력을 볼 수 있습니다.\n\n```bash\n> nvm list\n       \n       v10.16.0\n->     v10.16.2\ndefault -> lts/* (-> v10.16.2)\nnode -> stable (-> v10.16.2) (default)\nstable -> 10.16 (-> v10.16.2) (default)\niojs -> N/A (default)\nunstable -> N/A (default)\nlts/* -> lts/dubnium (-> v10.16.2)\nlts/argon -> v4.9.1 (-> N/A)\nlts/boron -> v6.17.1 (-> N/A)\nlts/carbon -> v8.16.0 (-> N/A)\nlts/dubnium -> v10.16.2\n```\n\n설치되어있는 버전은 `10.16.0`과 `10.16.2`가 있고,\n현재 사용중인 버전이 `10.16.2`인 것을 확인 할 수 있습니다.\n\n만약 여기서 새로운 최신 LTS 버전의 Node가 나왔고 사용하자고 한다면 두가지 경우가 있을 것입니다.\n1. 새 LTS 버전을 설치하고 새로운 환경(설치된 패키지가 없는 깨끗한 상태)에서 사용을 시작하겠다.\n2. 새 LTS 버전을 설치하지만 기존에 사용하던 패키지는 그대로 가져가서 새로운 버전에 기존의 환경을 유지하고 싶다.\n\n\n1번의 경우에는 간단하게 버전을 설치하고 설치한 버전을 사용하기로 설정하면 됩니다.\n2번의 경우는 새 버전을 설치하고 기존의 패키지를 가져오는 과정이 필요합니다.\n아래서 설명하겠습니다.\n\n## 사용하던 Node Version을 업데이트하기\n\n이 경우는 새로운 버전으로 업데이트하지만 기존의 패키지는 가져옵니다.\n사용하던 환경(패키지) 그대로 사용하면서 버전만 업데이트하고 싶은 경우입니다.\n\n그때 사용하는 명령은 아래와 같습니다.\n```bash\n> nvm install <version> --reinstall-packages-from=<version>\n```\n\n예를 들면 아래와 같습니다.\n```bash\n> nvm install 11.11.1 --reinstall-packages-from=10.16.2\n```\n\n위 명령어를 통해 새로운 `11.11.1` 버전을 설치하고 기존에 사용하던 버전 `10.16.2`의 패키지를 설치할 Node 버전(`11.11.1`)에 reinstall하는 과정을 거치게 됩니다.\n\n---- \n\nReferences\n- [github | nvm-sh/nvm](https://github.com/nvm-sh/nvm)\n","excerpt":"해당 포스트는 macOS 환경을 기준으로 작성되었습니다 NVM(Node Version Manager) Node 버전을 쉽게 관리 할 수 있다.\n예로 사용하던 패키지가 Node 버전이 업데이트를 함에 따라 호환이 되지 않을 경우가 생길 때 NVM없이 …","fields":{"slug":"/nvm-install/"},"frontmatter":{"date":"Aug 08, 2019","title":"NVM, Node 설치 및 관리하기","tags":["node","javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nMongoDB 문서를 참고해,\nCheatSheet 개념으로 정리해본 기초 Mongo Shell CRUD 명령어.\n\n이 포스트에서는 기초적인 것만 다루며 `writeConcern` Option, Evaluation Query 등은 다루지 않습니다.\n\n\n## Database\n\n### Database 목록\n```bash\n> show databases\n```\n\n### Database 선택\n```bash\n> use db_name\n```\n> 존재하지 않는 DB 선택 시, 이후 DB 삽입등이 이루어지면 자동으로 생성된다.\n\n### Database 제거\n```bash\n> db.dropDatabase()\n```\n> 현재 선택되어있는 Database를 제거한다.\n\n\n\n## Collection\n\n### Collection 생성\n[`db.createCollection(name, [options])`](https://docs.mongodb.com/manual/reference/method/db.createCollection/index.html)\n```bash\n> db.createCollection(collection_name)\n```\n> 일반적으로 insert시 지정한 collection이 없는 콜렉션이면 자동으로 생성되므로 따로 Collection을 생성할 필요는 없지만 options를 활용하기 위해서는 createCollection을 사용한다.\n\n### Collection 제거\n```bash\n> db.collection_name.drop()\n```\n\n### Collection 이름 변경\n[`db.collection.renameCollection(target, [dropTarget])`](https://docs.mongodb.com/manual/reference/method/db.collection.renameCollection/)\n```bash\ndb.rrecord.renameCollection(\"record\")\n```\n\n\n\n## Insert\n\n### 하나의 Document 삽입\n[`db.collection.insertOne(document, [options])`](https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/#db.collection.insertOne)\n```bash\n> db.collection_name.insertOne(\n  { name: \"Jhon\", age: 24 }\n)\n```\n\n### 여러 Document 삽입\n[`db.collection.insertMany(Array of documents, [options])`](https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#db.collection.insertMany)\n```bash\n> db.collection_name.insertMany(\n  [\n    { name: \"Jhon\", age: 24 },\n    { name: \"Darcy\", age: 26 },\n    { name: \"Ted\", age: 22 }\n  ]\n)\n```\n\n**ordered**: (boolean/default:true) Document를 기술한 순서대로 삽입\n```bash\n> db.collection_name.insertMany(\n  [\n    { name: \"Jhon\", age: 24 },\n    { name: \"Darcy\", age: 26 },\n    { name: \"Ted\", age: 22 }\n  ],\n  { ordered: true }\n)\n```\n\n\n\n\n## Query (find)\n\nuser Collection의 모든 Document 선택\n```bash\n> db.user.find()\n```\n\n**pretty()**: 결과를 읽기 좋은 형식으로 보여줌\n```bash\n> db.user.find().pretty()\n```\n\nCollection에서 name 필드의 값이 ‘Jhon’인 Dcoument 선택\n```bash\n> db.user.find({ name: \"Jhon\" })\n```\n\n### [비교 연산자](https://docs.mongodb.com/manual/reference/operator/query-comparison/#query-selectors-comparison) \n- $eq: 지정한 값과 같은\n- $gt: 지정한 값보다 큰\n- $gte: 지정한 값보다 크거나 같은\n- $in: 지정한 배열 안에 속하는\n- $lt: 지정한 값보다 작은\n- $lte: 지정한 값보다 작거나 같은\n- $ne: 지정한 값과 같지 않은\n- $nin: 지정한 배열 안에 속하지 않는\n\nCollection에서 level 필드의 값이 3이상인 Document 선택\n```bash\ndb.user.find(\n  {\n    level: { $gte: 3 }\n  }\n)\n```\n\nCollection에서 level 필드의 값이 2 또는 5 인 Document 선택\n```bash\n> db.user.find(\n  {\n    level: { $in: [2, 5] }\n  }\n)\n```\n\n\n### 논리 연산자\n- $or\n- $and\n- $not : 지정 조건이 false면 true, true이면 false\n- $nor : 모든 지정 조건이 false면 true\n\nCollection에서 status가 ‘A’이고 qty가 30 이상인 Document 선택\n```bash\n> db.inventory.find( \n  {\n    $and: [\n      { status: \"A\" },\n      { qty: { $lt: 30 } }\n    ]\n  }\n)\n\n> db.inventory.find( \n  { \n    status: \"A\", \n    qty: { $lt: 30 } \n  } \n)\n```\n> 위의 두 명령은 동일한 명령이라 할 수 있다.\n\nCollection에서 status가 ‘A’이거나 qty가 30 이상인 Document 선택\n```bash\ndb.inventory.find( { $or: [ { status: \"A\" }, { qty: { $lt: 30 } } ] } )\n```\n\n$and와 $or의 혼합 사용\n```bash\ndb.inventory.find( {\n     status: \"A\",\n     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]\n} )\n```\n\n### Match an Embedded/Nested Document\n\n`comments: { author: \"Jhon\", comment: \"Good!\" }`를 완전히 일치 시킨 선택 명령\n```bash\ndb.users.find(\n  { comments: { author: \"Jhon\", comment: \"Good!\" } }\n)\n```\n> comments: { comment: \"Good!\" , author: \"Jhon\", } 를 선택할 시 순서가 달라 정확히 일치하지 않기 때문에 결과가 나오지 않습니다.\n\n### Query on Nested Field\n\n`{ size: { w: 20, h: 40 } }`와 같은 형식의 Document들이 있을 때 size 필드 안의 h 가 15 이상인 도큐먼트 선택\n```bash\ndb.inventory.find( { \"size.h\": { $lt: 15 } } )\n```\n\n### Query an Array\n\n#### Match an Array\ntags가 `[\"red\", \"blank\"]`로 요소와 순서 모두가 정확히 일치하는 Document 선택\n```bash\ndb.inventory.find( { tags: [\"red\", \"blank\"] } )\n```\n\ntag안에 red가 있는 document 선택\n```bash\ndb.inventory.find( { tags: \"red\" } )\n```\n\n#### $all\ntags가 ‘red’, ‘blank’ 두가지를 가지고 있는 Dcouments\n```bash\ndb.inventory.find( { tags: { $all: [\"red\", \"blank\"] } } )\n```\n> 순서와 상관없고, 정확히 일치하는게 아닌 포함하고 있으면 된다.\n\n#### $elemMatch\n`dim_cm: [12, 16]`와 같은 형식이 있다.\n`dim_cm` 배열 안에 22초과, 30미만의 값을 포함하고 있는 Document를 선택\n```bash\ndb.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )\n```\n\n#### Query for an Element by the Array Index Position\n`dim_cm` 배열의 1번째 index 요소가 25 초과인 Document 선택\n```bash\ndb.inventory.find( { \"dim_cm.1\": { $gt: 25 } } )\n```\n\n#### Query an Array by Array Length\ntags 배열의 길이가 3인 Document 선택\n```bash\ndb.inventory.find( { \"tags\": { $size: 3 } } )\n```\n\n### Query for Null or Missing Fields\n`{ _id: 1, item: null }, { _id: 2 }` 두개의 Document가 있다.\n아래는 item이 null인 document를 선택한다.\n```bash\ndb.inventory.find( { item: null } )\n```\n> { _id: 2 }도 item:null 이기 떄문에 두개의 Document가 모두 선택된다._\n아래와 같이 하면 첫번째 document만 정상적으로 선택할 수 있다.\n```bash\ndb.inventory.find( { item : { $type: 10 } } )\n```\n> [BSON types](https://docs.mongodb.com/manual/reference/bson-types/)\nitem이 존재하지 않는 Document를 선택한다.\n```bash\ndb.inventory.find( { item : { $exists: false } } )\n```\n\n\n\n## Update\n\n### [db.collection.updateOne(filter, update, options)](https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/#db.collection.updateOne)\n`{ name: \"Jhon\", age: 29 }`에서 age를 25로 변경\n```bash\ndb.user.updateOne(\n  { name: \"Jhon\" },\n  { $set: { age: 25 } }\n)\n```\n\noptions의 upsert 속성을 사용하면 만약 Kay가 존재하지 않을 시 Document를 새로 만들며 업데이트 된다.\n```bash\n> db.user.updateOne(\n  {name:\"Kay\"},\n  { $set: { age: 25 } },\n  {upsert: true}\n)\n```\n\n배열 field에 값 추가하기 (`skills: []`)\n```bash\n> db.user.updateOne(\n  {name:\"Jhon\"},\n  {$push: {skills: 'react'}}\n)\n```\n\n배열 field에 값 추가하기 + 정렬\n```bash\n# 여러개 추가 시 $each 사용\n# 알파벳순으로 정렬시 $sort 사용\n\n> db.user.updateOne(\n  {name:\"Jhon\"},\n  {$push: \n    skills: {\n      $each: ['vue', 'angular'],\n      $sort: 1\n    }\n  }\n)\n```\n\n배열 field에 값 제거하기\n```bash\n> db.user.updateOne(\n  {name:\"Jhon\"},\n  {$pull: {skills: 'react'}}\n)\n```\n\n배열 field에서 여러값 제거하기\n```bash\n> db.user.updateOne(\n  {name:\"Jhon\"},\n  {$pull: {skills: $in: ['angular', 'vue']}}\n)\n```\n\n\n### [db.collection.updateMany(filter, update, options)](https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany)\nlevel이 3이상인 document의 admin을 true로 변경\n```bash\ndb.user.updateMany(\n  { level: {$gte: 3} },\n  { $set: {admin: true} }\n)\n```\n\n### [db.collection.replaceOne(filter, replacement, options)](https://docs.mongodb.com/manual/reference/method/db.collection.replaceOne/#db.collection.replaceOne)\nname:”Kay”인 Document를 `{name:\"Kai\", age: 21}`로 교체한다.\n```bash\n> db.user.replaceOne(\n  {name:\"Kay\"},\n  {name:\"Kai\", age: 21}\n)\n```\n> 교체, 업데이트 후에도 도큐먼트의 ID는 유지된다.\n\n### [db.collection.update(query, update, options)](https://docs.mongodb.com/manual/reference/method/db.collection.update/#db.collection.update)\ndocumnet를 replace 하기\n```bash\n# 이름이 Jhon인 도큐먼트를 name Jun, age 21으로 교체\n\n> db.user.update(\n  {name:\"Jhon\"}, {name: \"Jun\", age: 21}\n)\n```\n\n여러 Document Update, options의 multi 속성이 필요하다, 또는 insertMany를 사용하는 방법도 있다.\n```bash\n> db.user.update(\n  {level: {$lte:3}},\n  {$set: {admin: false}},\n  {multi: true}\n)\n```\n\n\n\n## Delete\n\ninventory Collection안의 모든 Document가 삭제된다.\n```bash\ndb.inventory.deleteMany({})\n```\n\nCollection안의 status가 A인 Dcoument가 모두 삭제된다.\n```bash\ndb.inventory.deleteMany({ status : \"A\" })\n```\n\nCollection안의 status가 D인 Dcoument가 하나 삭제된다.\n```bash\ndb.inventory.deleteOne( { status: \"D\" } )\n```\n\n\n---- \n\nReferences\n- [MongoDB | Documentation](https://docs.mongodb.com/manual/)\n","excerpt":"MongoDB 문서를 참고해,\nCheatSheet 개념으로 정리해본 기초 Mongo Shell CRUD 명령어. 이 포스트에서는 기초적인 것만 다루며  Option, Evaluation Query 등은 다루지 않습니다. Database Databas…","fields":{"slug":"/mongodb-basic-crud/"},"frontmatter":{"date":"Jul 30, 2019","title":"MongoDB 기초, CRUD 명령어","tags":["mongodb"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](screenshot.png)\n\n개발환경 구성에 앞서 제일 먼저 필요하다고 할 수 있는 터미널 환경 세팅.\n\n여기서는 **zsh** 쉘을 사용하며, **oh my zsh** 설치 후  \nzsh 플러그인 매니저인 **zplug**를 설치하여 플러그인을 관리합니다.  \n또한 터미널 앱으로는 **hyper**를 사용합니다.\n\nmacOS를 처음 설치해 깨끗한 상태에서 환경을 구성하는 과정으로 Brew 설치부터 시작하게 됩니다.\n\nHomeBrew가 설치되어있다면 Brew 설치 부분은 건너뛰면 됩니다.  \n또한 mac Catalina를 사용중이라면 zsh 설치 및 설정 부분은 건너뛰면 됩니다.\n\n> catalina 버전부터는 기본 쉘이 zsh로 설정되어 있어 설치 및 설정이 불필요\n\n## Brew 설치\n\nBrew 설치에 앞서 xcode command line tools의 설치가 필요합니다.\n\n_Xcode command line tools 설치_\n\n```bash\nxcode-select --install\n```\n\n_HomeBrew 설치_\n\n```bash\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n_zsh 설치_\n\n```bash\nbrew install zsh\n```\n\n_oh-my-zsh 설치_\n\n```bash\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n_기본 쉘 변경 (bash -\\> zsh)_\n\n```bash\nchsh -s `which zsh`\n```\n\n> non-standard shell 오류 발생 시\n> /etc/shells 파일에 `which zsh`를 통해서 확인한 경로를 최하단에 추가합니다.\n> 위 명령어를 다시 실행한 후 재부팅을 합니다.\n\n여기까지 했다면 터미널을 실행하면 zsh 쉘로 실행되는 것을 확인 할 수 있습니다.\n\n## zplug 설치 및 설정\n\n[https://github.com/zplug/zplug](https://github.com/zplug/zplug)\n\nzplug는 zsh 플러그인을 쉽게 설치 및 관리 할 수 있는 플러그인 매니저입니다.\n\n### zplug 설치\n\n```bash\n$ curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh`\n```\n\n또는 `$ brew install zplug` 로 설치가 가능합니다.\n\n### zplug 설정\n\n`.zshrc` 파일을 수정합니다.\nvi, open, code 등 맘에 드는 방법으로 수정하시면 됩니다.\n\n```bash\nvi ~/.zshrc\n```\n\n`.zshrc` 파일의 내용을 전부 지우고, 아래 내용으로 대체합니다.\n\n```bash\n# .zshrc (use zplug)\n\nsource ~/.zplug/init.zsh\n\n# Plugins\nzplug \"plugins/git\",   from:oh-my-zsh\nzplug \"lib/completion\",   from:oh-my-zsh\nzplug 'lib/key-bindings', from:oh-my-zsh\nzplug \"lib/directories\",  from:oh-my-zsh\n\nzplug \"zsh-users/zsh-syntax-highlighting\"\nzplug \"zsh-users/zsh-autosuggestions\"\n\nzplug 'dracula/zsh', as:theme\n\n# Install plugins if there are plugins that have not been installed\nif ! zplug check --verbose; then\n    printf \"Install? [y/N]: \"\n    if read -q; then\n        echo; zplug install\n    fi\nfi\n\n# Then, source plugins and add commands to $PATH\nzplug load\n```\n\n기본적인 oh-my-zsh의 플러그인과,\n`zsh-syntax-highlighting`, `zsh-autosuggestions` 플러그인이 포함된 내용입니다.\n또한 테마는 `dracula` 를 사용하고 있습니다.\n\n기본적인 사용 방법은 아래서 설명할 것이고,\n자세한 설정 방법은 [공식 문서](https://github.com/zplug/zplug)를 참고하시기 바라며,\n아래는 본인이 사용하는 Plugin 작성 내용입니다.\n\n```bash\n...\n\n# Plugins\nzplug \"lib/completion\",   from:oh-my-zsh\nzplug \"lib/key-bindings\", from:oh-my-zsh\nzplug \"lib/directories\",  from:oh-my-zsh\n\nzplug \"plugins/git\",      from:oh-my-zsh\nzplug \"plugins/autojump\", from:oh-my-zsh, frozen:1\n\nzplug \"zsh-users/zsh-completions\",              defer:0\nzplug \"zsh-users/zsh-autosuggestions\",          defer:1, on:\"zsh-users/zsh-completions\"\nzplug \"zsh-users/zsh-syntax-highlighting\",      defer:1, on:\"zsh-users/zsh-autosuggestions\"\nzplug \"zsh-users/zsh-history-substring-search\", defer:2, on:\"zsh-users/zsh-syntax-highlighting\"\n\nzplug \"denysdovhan/spaceship-prompt\", use:spaceship.zsh, from:github, as:theme\n\nzplug \"djui/alias-tips\"\n\n...\n```\n\n위에서 autojump 플러그인 사용을 위해서는 아래와 같이 설치가 필요합니다.\n\n```bash\n$ brew install autojump\n```\n\n또한 위에서 spaceship-prompt 테마를 사용하기 위해서는 powerline font 설치가 필요합니다.\n\n다양한 zsh 플러그인은 [awesome-zsh-plugin](https://github.com/unixorn/awesome-zsh-plugins) 문서에서 확인 할 수 있습니다.\n\n### zplug 사용법\n\n#### 플러그인 추가\n\n기본적으로는 `.zshrc`를 수정하여 사용하는 것을 권장합니다.\n\n`zplug \"djui/alias-tips\"`와 같이\n`zplug \"[username]/[repository name]\"`의 형식으로 쉽게 플러그인을 추가할 수 있습니다.\n\n```\nzplug \"[username]/[repository name]\", [tag]:[value]\n```\n\n또한 위와 같이 태그를 추가할 수 있습니다.\n\n위에서 테마를 아래와 같이 표시한 것을 보면 알 수 있습니다.\n\n```\nzplug 'dracula/zsh', as:theme\n```\n\n[공식 문서](https://github.com/zplug/zplug)에 설명과 다양한 예가 있으니 참고하시기 바랍니다.\n\n`.zshrc`를 수정하는 방식이 아닌 zplug의 명령어로만 제어하는 방법이 있습니다.\n터미널에서 아래 명령어(위에서 설명한 방식의 문구와 동일합니다)를 실행하면\n\n```bash\n$ zplug \"djui/alias-tips\"\n```\n\n플러그인이 자동으로 추가가 됩니다.\n\n이렇게 추가된 플러그인은 `.zshrc`가 아닌 `~/.zplug/packages.zsh` 에 기록되어 있습니다.\n따로 확인하는 것이 어려우니 `.zshrc` 에서만 작업하는 것을 추천합니다.\n\n#### zplug 명령어\n\n[공식 문서 | Commands for zplug](https://github.com/zplug/zplug#2-commands-for-zplug)\n\n기본적으로 추가한 플러그인이 설치되어 있지 않다면 터미널 시작시 설치할 것을 묻습니다.\n그런데 명령어를 이용해 추가한 경우에는 아래 명령어를 통해 설치를 할 수 있습니다.\n\n```bash\n$ zplug install\n```\n\n방금 설치한 플러그인을 터미널 재실행 없이 반영하려면 아래 명령어를 사용합니다.\n`--verbose` 옵션을 추가하면 자세한 내역이 출력됩니다.\n\n```bash\n$ zplug load\nor\n$ zplug load --verbose\n```\n\n플러그인 업데이트: `zplug update`\n플러그인 리스트 출력: `zplug list`\n\n그 외 명령어는 공식 문서를 참고하시기 바랍니다.\n\n## Hyper\n\n[공식 사이트](https://hyper.is/)\n\nHyper는 iTerm 보다 성능면에서는 떨어질 수 있으나 디자인면에서는 뛰어나며, Electron으로 Javascript, css, html을 기반으로 개발된 오픈소스 터미널 앱입니다.\n\n### 설치\n\n공식 사이트에서 [다운로드](https://hyper.is/#installation)하거나 brew를 이용해 설치합니다\n\n```bash\n$ brew cask install hyper\n```\n\n### 설정 및 플러그인\n\n`~/.hyper.js` 파일을 수정하여 설정 및 플러그인 추가를 할 수 있습니다.\n폰트, 스타일 및 기타 설정 그리고 플러그인을 관리합니다.\n\n아래는 본인이 사용중인 플러그인 목록입니다.\n\n```\nmodule.exports = {\n  config: {\n  opacity: 0.95,\n\n  fontFamily: 'Hack, Menlo, \"DejaVu Sans Mono\", \"DejaVu Sans Mono for Powerline\", Consolas, \"Lucida Console\", monospace',\n\n  // ...\n\n  plugins: [\n    `hypercwd`,\n    `hyper-search`,\n    // `hyper-statusline`,\n    `hyper-quit`,\n    `hyper-opacity`,\n    `hyper-tab-icons`,\n    `hyper-materialshell`\n  ],\n\n// ...\n```\n\n위 설정을 그대로 사용할 경우 미리 'Hack', 'Powerline' 폰트 설치가 필요합니다.\n\n다양한 플러그인은 [awesome-hyper](https://github.com/bnb/awesome-hyper) 문서에서 확인할 수 있습니다.\n\n여기까지 본인과 같은 설정을 했다면 최상단의 이미지와 같은 터미널을 보실 수 있습니다.\n","excerpt":"개발환경 구성에 앞서 제일 먼저 필요하다고 할 수 있는 터미널 환경 세팅. 여기서는 zsh 쉘을 사용하며, oh my zsh 설치 후 zsh 플러그인 매니저인 zplug를 설치하여 플러그인을 관리합니다. 또한 터미널 앱으로는 hyper를 사용합니다.…","fields":{"slug":"/mac-terminal-setting/"},"frontmatter":{"date":"Jul 24, 2019","title":"mac 터미널 환경 구성하기 (zsh, oh my zsh, zplug, hyper)","tags":["mac"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nMongoDB를 본격적으로 사용하기 앞서,\n설치와 실행 그리고 추가적인 툴의 설치와 사용까지 기본적으로 알아보겠습니다.\n\nmacOS / HomeBrew의 설치 환경에서 진행됩니다.\n\n## Install MongoDB\n\nTap the MongoDB Homebrew Tap\n```bash\n$ brew tap mongodb/brew\n```\n\nInstall MongoDB\n```bash\n$ brew install mongodb-community@4.0\n```\n\nRun MongoDB\n```bash\n$ mongod --config /usr/local/etc/mongod.conf\n\n$ brew services start mongodb-community@4.0\n```\n\n> `brew services start mongodb-community@4.0`의 과정을 거치지 않는다면 mongo shell을 이용하기 전 `mongod`명령을 통해 mongo 서버를 키는 과정이 필요하다.\n\nConnect and Use MongoDB\n```bash\n$ mongo\n```\n\n## 설치 없이 실습하기\n\n[https://mws.mongodb.com/](https://mws.mongodb.com/)\n\n위 주소로 접속하여 스터디 용도로 MongoDB 가상환경 내에서 사용해 볼 수 있다.\nreset 버튼을 누르거나 오랜 시간 작업이 없거나, 웹페이지를 새로고침하면 데이터가 날아가니 주의할 것.\n","excerpt":"MongoDB를 본격적으로 사용하기 앞서,\n설치와 실행 그리고 추가적인 툴의 설치와 사용까지 기본적으로 알아보겠습니다. macOS / HomeBrew의 설치 환경에서 진행됩니다. Install MongoDB Tap the MongoDB Homebre…","fields":{"slug":"/mongodb-install/"},"frontmatter":{"date":"Jul 20, 2019","title":"MongoDB 설치하기 (mac, homebrew)","tags":["mongodb"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n현재 mac Catalina developer beta의 환경으로 사용하고 있었는데,\n\n지금까지 설치한 앱들이 너무 많고 메뉴바 또한 넘처나기 직전이다.  \nbartender, dozer와 같은 메뉴바 정리 앱으로 정리를 했는데도 말이다.\n\n그래서 macOS를 Catalina public beta로 클린 설치하여 다시 한번 앱들을 설치하며 새로운 환경을 구성할 예정이다.\n\n그 전에 사용하던 앱들을 한번 정리해보고,  \n이를 바탕으로 클린 설치로 os를 설치하고 필요한 앱만 다시 설치하고 그렇지 않은 앱은 설치하지 않고 필요할 떄만 찾아 설치할 예정이다.  \n\n**필수 설치 Apps**는 고민 없이 바로 설치할 앱들이고,  \n**그 외 Apps**는 일단 설치하지 않고 사용하다 필요하면 설치할 앱들이다.\n\n:credit_card:는 유료앱을 나타내며  \n:small_blue_diamond:는 유료앱이며, SetApp에서 사용가능한 앱을 나타낸다.  \n(본인은 구독형 앱스토어라고 할 수 있는 SetApp이라는 서비스를 구독하고 있다. 구독하고 있으면 SetApp에 있는 앱들은 모두 무료로 받을 수 있다)\n\n## 필수 설치 Apps\n\n### CurserSense :credit_card:  \n\n  Apple Magic Mouse를 사용중이라면 필수 설치 앱  \n  워낙 느린 매직 마우스의 속도를 증가시킨다, 단순 증가가 아니라 가속도에 따른 조절 등\n  아주 디테일한 수정이 가능하다.\n\n### BetterTouchTool :small_blue_diamond:\n\n  터치바, 매직마우스, 트랙패드에 있어 다양한 제스처 및 동작을 특정 동작에 대입시킬 수 있는 앱이다. 워낙 많은 기능이 들어가있어 다 활용하기 어려울 정도이다.  \n  본인은 주로 매직마우스의 터치 제스처로 우클릭을 하거나, 키보드 + 제스처 조합으로 윈도우의 크기 및 배치를 조절하는 등의 기능을 사용하고 있다.\n\n### Alfred 4 \n\n  맥의 기본 Spotlight를 대체하는 앱  \n  웹, 파일, 폴더 검색 및 시스템 제어, 워크플로우 등 생산성에 많은 도움이 된다.  \n  워크플로우 등 풀버전 사용에는 라이센스 구입이 필요하다.\n\n### Amphetamine\n\n  맥이 잠들기 모드에 들어가지 않고 계속 꺠어있게 하는 앱이다.  \n  이러한 기능을 가진 다양한 앱들이 있지만 여러 앱을 사용해본 결과 디자인이나 기능 등 모든 면에서 사용성이 최고다.\n\n### Apple Apps\n  - Pages\n  - Keynotes\n  - Numbers\n  - Xcode\n\n### 한컴오피스 한글 뷰어\n\n### BusyCal :small_blue_diamond:\n\n  일정 관리 캘린더 앱, 기본 앱보다 사용하기 편리해서 사용하고 있다.\n\n### Bartender :small_blue_diamond:\n\n  메뉴바 정리 앱, 아이콘을 눌러 원하는 목록으로 펼치고 필 수 있으며 맥에 기본으로 있는 아이콘 또한 숨길 수 있다.\n\n### Canary Mail :small_blue_diamond:\n\n  메일 앱, 기본 앱보다 기능이 많고 편리하며 보기도 좋아 사용하고 있다.\n\n### Chrome\n\n### CleanMyMac :small_blue_diamond:\n\n  시스템 청소 앱이라 보면 되는데, 맥에서 굳이 필요할까 싶지만 숨겨진 용량이 큰 파일을 정리할때나 또는 런치패드 spotlight 캐시 정리 및 오류 해결 등에 사용할 일이 있어 사용하고 있다.\n\n### Dozer\n\n  메뉴바 정리 앱, 점 두개를 이용하여 왼쪽 점의 좌측에 위치한 앱들은 오른쪽 점 클릭을 통해 숨길 수 있다.  \n  본인은 Dozer와 Bartender 두 앱을 이용해 메뉴바 정리를 하고 있다.\n\n### Endurance :small_blue_diamond:\n\n  절전 모드 앱이라고 보면 된다. 절전 모드를 켜면 스크린 밝기나 백그라운드 앱 숨기기, 프로세스 속도 낮추기 등 기능이 작동하도록 설정해 배터리 절약에 도움이 된다. 배터리 30% 이하시 자동 절전 모드로 사용하고 있다.\n\n### firefox Developer Edition\n\n  개발자를 위한 파이어폭스 브라우저, 개발자 툴이 잘되어있다. 또 부가적으로 개발을 위한 다양한 기능을 제공한다.\n\n### keka\n\n  압축 앱\n\n### GPG Suite\n\n  gpg key 관리 프로그램\n\n### iStat Menus :small_blue_diamond:\n\n  메뉴바 관련 앱, 메뉴바에 배터리, 날씨, CPU, RAM 등 다양한 정보를 아이콘으로 띄울 수 있다.  \n  특히 본인의 경우 매직 마우스나, 매직 키보드, 에어팟을 연결하면 메뉴바에 각각의 배터리를 확인 할 수 있게 할 수 있어 유용하게 사용중이다.\n\n### MindNode\n\n  mindmap 작성 앱, xmind와 고민을 했는데 mindnode가 훨신 보기 좋아 선택하게 되었다.\n\n### NightOwl\n\n  mac의 darkmode, lightmode를 원하는 시간에 자동으로 변경시켜준다.  \n  mac Catalina에서는 auto가 생김에 따라 필요가 없어진 앱이라 할 수도 있지만 본인은 특정 앱은 항상 라이트모드를 유지시켜주는 기능때문에 사용하고 있다.\n\n### Paste\n  \n  클립보드 내역 저장 및 확인 앱, 복사한 내용이 모두 저장되어 있어 이전에 복사한 내용도 다시 사용할 수 있다.\n\n### Send Anywhere\n\n### Slack\n\n### Things :credit_card:\n\n  할일 관리 앱\n\n### TimeMachineEditor\n\n  원하는 시간에, 또는 원하는 간격으로 타임 머신 백업이 작동하게 한다.\n\n### Typora\n\n  마크다운 에디터, 라이브 프리뷰 기능때문에 자주 활용한다.\n\n### Ulysses :small_blue_diamond:\n\n  글쓰기 앱, 마크다운 포멧을 지원하며 다양한 포멧으로 내보내기가 가능하다.\n  글쓰기 앱 중에서 탑에 속하는 앱이다. (Bear와 고민했었는데 tag 방식의 정리방식 보다 폴더 방식을 선호해 이 앱을 선택하였다)\n\n### Visual Studio Code\n\n### Wake Up Time\n\n  알람 앱\n\n### Parallels Desktop :credit_card:\n\n\n## 그 외 Apps\n\n### Magnet :credit_card:\n\n  윈도우 정리 앱, 드래그 하여 창을 좌측의 반으로 위치하는 등 이러한 동작이 가능하게 해주는 앱이다.  \n  BetterTouchTool에서도 가능하게 할 수 있는 기능이라 BTT앱으로 통합해 이 앱은 사용하지 않을 예정\n\n### iTerm\n\n  터미널 앱, mac catalina에서는 기본적으로 쉘이 zsh를 사용한다. 따라서 처음에 터미널 설정이 간략화되었는데 그래서 이번에는 iTerm 대신 hyper를 사용하고, 출력이 많은 복잡한 작업에는 기본 터미널을 사용할 예정이다.\n\n### Boom 3D :small_blue_diamond:\n\n  음향 관련 앱이다. EQ 및 소리 증폭의 용도인데 본인은 소리 증폭의 용도로 사용하고 있었다.\n\n### Runcat\n\n  메뉴바에 뛰어다니는 고양이 아이콘이 생긴다. cpu사용양에 따라 달리는 속도가 달라진다.  \n  귀여워서 사용하고 있었지만 앱 최소화를 위해 기존 사용하던 iStat menus의 cpu 사용량을 사용할 예정\n\n### PopClip :credit_card:\n\n  텍스트 드래그시 다양한 기능을 사용할 수 있는 툴팁이 드래그 위치에 뜬다. 다양한 복사 방식, 번역, 다른 앱과 연동된 기능 등  \n  원치 않을 때 동작하는 경우가 가끔 있고 생각보다 불필요한 것 같아 일단 이번에는 설치 안해보는 것으로..\n\n### Sip :small_blue_diamond:\n\n  Color picker, 편하게 화면의 특정 부분 색상이 무엇인지 알아낼 수 있다.  \n  필수 앱으로 넣을까 고민이 되었는데, 아마도 필요에 의해 금방 설치하게 될 것 같다.\n\n### Timing :small_blue_diamond:\n\n  컴퓨터 사용량 기록 앱, 어떤 앱을 어떤 사이트를 얼마나 사용했는지 기록해준다.  \n  그를 바탕으로 생산성이 몇프로인지 계산해준다. 이번에 mac catalina에서 스크린 타임이 있어 불필요해진 앱이라는 소리를 듣고 있다. 그런데 스크린 타임은 우리가 기대하는 방식으로 동작하지 않아 timing 앱이 필요하긴 한 것 같은데 고민을 좀 해봐야겠다.\n","excerpt":"현재 mac Catalina developer beta의 환경으로 사용하고 있었는데, 지금까지 설치한 앱들이 너무 많고 메뉴바 또한 넘처나기 직전이다. bartender, dozer와 같은 메뉴바 정리 앱으로 정리를 했는데도 말이다. 그래서 macO…","fields":{"slug":"/my-mac-apps/"},"frontmatter":{"date":"Jul 15, 2019","title":"사용중인 mac App 목록 및 앱 추천","tags":["mac"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\na, b, c.. 라는 함수가 있다고 가정하자.\n```js\na(b,c(d,e()));\n```\n위와 같이 함수가 중첩되고 연속된다면 가독성도 좋지않고 작성하는데도 어려움이 있다.\n함수들을 연속적으로 사용하는 함수, 함수들을 함축하는 함수인 go/pipe에 대해 알아보자\n\n## go\n\ngo 함수는 인자를 받아 결과를 바로 산출해내는 함수이다.\n첫번째 인자는 시작이 되는 **값**을 받고, 나머지는 **함수**를 받아 첫번째 인자가 두번째 함수로 가 결과를 만들고 그 결과가 또 세번째 함수로가 그 결과가 만들어지는 과정이 마지막까지 계속된다.\n\n```js\ngo(\n  0,\n  a + 1,\n  a * 10,\n  console.log\n)\n```\n\n위와 같이 함수를 실행했을 때 기대값은 10이며 마지막 함수(console.log)가 실행되면서 10이 출력되는 것을 기대할 수 있다.\n\n```js\nconst go = (...func) =>\n  func.reduce((previousFunc, curretFunc) => {\n    return curretFunc(previousFunc);\n  });\n```\n\n간단히 나타내면 위와 같다.\n\n## pipe\n\npipe 함수는 **함수를 리턴하는 함수**로 인자로 함수들을 받아 그 함수들을 합성해 하나의 함수를 리턴한다. go와는 반환하는 것이 다르다.\n\n```js\nlet pipe = () => () => {}; // 함수를 리턴하는 함수\n\nconst p = pipe(\n  a => a + 1,\n  a => a * 10\n);\n\nconsole.log(p(0));\n```\n\n위와 같은 코드 구성이 될 것이며 `p`에는 합성된 함수가, 그리고 그 `p`를 실행한 `p(0)`의 출력은 10이 나올 것으로 기대할 수 있다.\n```js\npipe = (...funcs) => argument => funcs.reduce((acc, func) => func(acc), argument);\n\nconst p = pipe(\n  a => a + 1,\n  a => a * 10\n);\n\nconsole.log(p(0));\n```\n\npipe 함수를 작성하는 과정을 쪼개보면 아래와 같다\n```js\npipe = (...funcs) => {};\n// pipe 함수는 인자로 함수들을 받는다.\n\npipe = (...funcs) => () => {};\n// 함수를 리턴하게 될 것이다.\n\npipe = (...funcs) => argument => {};\n// 여기서 argument는 pipe 함수가 실행되어 함축된 함수, 그 함수의 매개 변수이다.\n\npipe = (...funcs) => argument => funcs.reduce(() => {}, argument);\n// 함수들을 함축해야 하므로 pipe의 인자로 들어온 함수들에 reduce를 사용한다.\n// reduce의 시작으로 함축된 함수의 매개변수인 argument를 전달해준다. (argument: 값)\n\npipe = (...funcs) => argument => funcs.reduce((acc, func) => func(acc), argument);\n// 이제 위와 같이 reduce의 첫번째 인자를 채워준다.\n// 처음 reduce가 실행될 때는 acc가 pipe 함수의 실행 결과인 함수의 인자 **값**이 들어간다.\n// 다음부터는 그 함수의 실행 결과 값이 acc가 되어 누산되는 과정이 된다.\n```\n\n작성한 pipe 코드에서 마지막 reduce의 동작은 go와 거의 같기 때문에 아래와 같이 작성해도 같은 코드라 할 수 있다.\n```js\npipe = (...funcs) => (argument) => go(argument, ...funcs);\n```\n\ngo의 경우에도 pipe 코드를 활용하여 작성 할 수 있다.\n결국 pipe를 실행해 함축된 함수를 실행하면 go를 한 동작과 거의 동일하기 때문이다.\n물론 위의 pipe에 go를 활용한 코드와 함께 사용은 불가하다.\n```js\ngo = (...fns) => {\n  const [argument, ...funcs] = fns;\n  return pipe(...funcs)(argument);\n  // 또는 return pipe.apply(null, funcs)(argument);\n}\n```\n\n\n---\n\nReferences\n- [inflearn | 함수형 프로그래밍과 JavaScript ES6+](https://www.inflearn.com/course/functional-es6)\n","excerpt":"a, b, c.. 라는 함수가 있다고 가정하자. 위와 같이 함수가 중첩되고 연속된다면 가독성도 좋지않고 작성하는데도 어려움이 있다.\n함수들을 연속적으로 사용하는 함수, 함수들을 함축하는 함수인 go/pipe에 대해 알아보자 go go 함수는 인자를 …","fields":{"slug":"/functional-go-pipe/"},"frontmatter":{"date":"Jul 12, 2019","title":"JavaScript 함수형 프로그래밍, go / pipe","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n이터러블 프로토콜은 ES6에서 도입된 것으로 간단히 말하면 \n**이터러블 프로토콜은 순회(반복) 가능한 객체를 나타내는 프로토콜**이라 할 수 있다.\n\n`for...of` 반복문, `...` 전개 연산자(Spread Operator), 구조 분해 등과 함께 동작 할 수 있도록 한 프로토콜이다. 이 말은 이터러블이여야만 이러한 동작이 가능하다는 것을 뜻하기도 한다.\n\n## iterable/iterator\n\n- 이터러블: 이터레이터를 반환하는 `Symbol.iterator`라는 키값의 메소드를 가진 객체\n- 이터레이터: `{ value, done }` 객체를 반환하는 `next()` 메소드를 가진 객체\n\n이제 예제를 통해 살펴보자.\n\n```js\nconst arr = [1, 2, 3];\n\nfor(const n of arr) {\n  console.log(n);\n}\n// 1 2 3\n\nconsole.log(...arr);\n// 1 2 3\n\nconst [first, ...remain] = arr;\nconsole.log(first, remain); // 1, [2, 3]\n```\n\n위는 일반적인 배열의 값들을 for...of 반복문으로 출력한 것이다.\n(예를 든 Array 외에도 이터러블이 가능한 반복가능한 객체로는 Map, Set, String, TypedArray, arguments 객체 등이 있다)\n앞서 말했듯 for...of 순회가 가능한 이유는 이터러블이기 때문인데 그것을 아래에서 확인해보자\n\n```js\nconsole.dir(arr);\n\n/*\n> Array(3)\n  > __proto__ : Array(0)\n     ...\n     > Symbol(Symbol.iterator): ƒ values()\n     ...\n*/\n```\n\n우선 Array의 내부(프로토타입 체인 내)에서 `Symbol(Symbol.iterator): ƒ values()`를 확인 할 수 있다.\nArray에는 `Symbol(Symbol.iterator)`라는 key를 가진 함수가 존재한다는 것을 알 수 있고 앞서 설명한 **이터레이터를 반환하는 `Symbol.iterator`라는 키값의 메소드를 가진 객체**에 부합하는 것을 볼 수 있다.\n\n만약 위의 코드를 아래와 같이 하면 어떻게 될까\n\n```js\nconst arr = [1, 2, 3];\n\narr[Symbol.iterator] = null;\n\nfor(const n of arr) { // Uncaught TypeError: arr is not iterable\n  console.log(n);\n}\nconsole.log(...arr);\n```\n\n`arr[Symbol.iterator] = null;`을 통해 이제 더이상 배열 arr은 이터러블이 아니게 되었다.\n그래서 for...of에서 arr은 이터러블이 아니라는 오류를 만나게 된다. 전개 연산자도 마찬가지다.\n\n여기까지 이터러블의 모습까지 확인해보았고 다음으로는 이터레이터를 확인해보자.\n\n`arr[Symbol.iterator]`는 함수이다. 그렇다면 `arr[Symbol.iterator]()`를 한다면 반환되는 것은 이터레이터가 될 것이다.\n\n```js\nconst arrIter = arr[Symbol.iterator]();\n\nconsole.log(arrIter); // Array Iterator {}\n```\n\n위 코드를 통해 반환된 것이 이터레이터 객체인 것을 확인했다.\n\n이터레이터는 **`{ value, done }` 객체를 반환하는 `next()` 메소드를 가진 객체**라고 했었는데 `next()` 메소드를 확인해보자.\n\n```js\nconsole.log(arrIter.next()); // {value: 1, done: false}\nconsole.log(arrIter.next()); // {value: 2, done: false}\nconsole.log(arrIter.next()); // {value: 3, done: false}\nconsole.log(arrIter.next()); // {value: undefined, done: true}\nconsole.log(arrIter.next()); // {value: undefined, done: true}\n```\n\n보는 것과 같이 `{ value, done }` 객체가 반환 된 것을 볼 수 있다.\nvalue값이 있을 때는 done이 false를 가지고, 이제 순회할 것이 없는 상황에는 done이 true를 가진다.\n\n또 다른 예제를 살펴보자.\n\n```js\nconst arrIter2 = arr[iterator]();\n\narrIter2.next();\n\nfor(const v of arrIter2){\n\tconsole.log(v);\n}\n// 2 3\n```\n\n반복문 전에 `next()`를 한번 해서 첫번째 값은 출력이 안된 모습을 확인 할 수 있다.\n\n## 사용자 정의 iterable protocol\n\n이터러블 프로토콜을 따라서 또한 순회 동작을 사용자 정의할 수 있다는 점이 이터러블을 활용하는데 있어 중요한 의의를 가진다.\n\n```js\nconst reverseIterable = a => {\n  return {\n    [Symbol.iterator]() {\n      let i = a.length;\n\n      return {\n        next() {\n          return i === 0 ? { value: undefined, done: true } : { value: i--, done: false };\n        },\n        [Symbol.iterator]() {\n          return this;\n        }\n      };\n    }\n  };\n};\n\nconst reverseArr = reverseIterable(arr);\nfor (const v of reverseArr) console.log(v); // 3 2 1\n\nconst reverseArrIter = reverseArr[Symbol.iterator]();\nconsole.log(reverseArrIter.next()); // {value: 3, done: false}\nfor (const v of reverseArrIter) console.log(v); // 2 1\n```\n\n위 코드는 일반적인 이터러블 순회를 반대 순서로 순회가 되도록 바꿔 본 커스텀 이터러블이다.\n\n부분적으로 자세히 살펴보자.\n\n이터러블은 **이터레이터를 반환 `Symbol.iterator`의 키값의 메소드를 가진 객체**라 했었으니\n아래와 같이 `return { [Symbol.iterator](){...} }` 와 같이 시작할 것이다.\n\n```\nconst reverseIterable = (a) => {\n  return {\n    [Symbol.iterator]() {\n      // ... \n    }\n  };\n};\n```\n\n또한 이터레이터는 **`{ value, done }` 객체를 반환하는 `next()` 메소드를 가진 객체**라 했었으니 아래와 같은 구조여야한다.\n\n```js\nconst reverseIterable = (a) => {\n  return {\n    [Symbol.iterator]() {\n      next() {\n            return { value: ..., done: ... }\n      }\n    }\n  }\n};\n\n```\n\n이렇게 여기까지 작성한 코드는 아래와 같다.\n\n```js\nconst reverseIterable = (a) => {\n  return {\n    [Symbol.iterator]() {\n      let i = a.length;\n\n      return {\n        next() {\n          return i === 0 ? { value: undefined, done: true } : { value: i--, done: false };\n        }\n      };\n    }\n  };\n};\n```\n\n이터러블/이터레이터 프로토콜의 조건을 모두 갖춘 것 같다.\n맨 위의 완성된 코드가 아닌 바로 위의 코드로 한번 아래 코드를 실행해보자\n\n```js\nconst reverseArr = reverseIterable(arr);\n\nfor(const v of reverseArr) console.log(v); // 3 2 1\n```\n\n정상적으로 원하는 동작이 된 것 같다.\n하지만 아래의 방법으로 실행해보면 에러가 발생한다\n\n```js\nconst reverseArrIter = reverseArr[Symbol.iterator]();\n\nconsole.log(reverseArrIter.next()); // {value: 3, done: false}\n\nfor(const v of reverseArrIter) console.log(v);\n// Uncaught TypeError: reverseArrIter is not iterable\n```\n\n그 이유는 `reverseArr`의 경우에는 사용자가 정의한  `[Symbol.iterator]()`를 가지고 있어 이터러블하지만 `reverseArr[Symbol.iterator]()`를 통해 만든 이터레이터`reverseArrIter`는 이터레이터의 조건인 **`{ value, done }` 객체를 반환하는 `next()` 메소드를 가진 객체**는 만족하지만 내부(프로토타입 체인)에 `[Symbol.iterator]()`를 가지고 있지 않아 이터러블 하지 않기 때문이다.\n\nconsole.dir을 이용해 위에서 사용한 `arrIter`를 살펴보면 내부에 `[Symbol.iterator]()`를 가지고 있고 `reverseArrIter`는 그렇지 않은 것을 확인 할 수 있다.\n\n따라서 코드에서 `next()`와 함께 `[Symbol.iterator]() { return this }`를 리턴해 이터러블하게 해준 것이라 할 수 있다.\n\n이러하게 이터러블 프로토콜을 사용자 정의해서 사용할 수 있다면 순회 동작에 사용자가 원하는 동작을 넣을 수도 있고 더 나아가 원래 이터러블하지 않는 것조차 순회가 가능하게 이터러블하게 만들어 순회할 수 있게 될 수 있다.\n\n### 제너레이터\n\n```js\nfunction* gen() {\n  yield 1;\n  if(false) yield 2;\n  yield 3;\n  return 4;\n}\n\nconst gIter = gen();\n\nconsole.log(gIter.next()); \n// {value: 1, done: false}\n\nconsole.log(gIter[Symbol.iterator]);\n// ƒ [Symbol.iterator]() { [native code] }\n\nfor(const v of gIter) console.log(v);\n```\n\n제너레이터의 실행 결과인 제너레이터 객체는 이터레이터 객체이다.\n위 코드에서 `gIter.next()`가 가능한 것을 보면 알 수 있다.\n또한 `[Symbol.iterator]()`를 가지는 이터러블이기도 하다.\n\n제너레이터 객체는 이터레이터이자 이터러블이기 때문에 역시 순회가 가능하다.\n또한 제너레이터에는 마지막에 리턴 값을 만들 수 있다. 하지만 `done` 또한 `ture`가 되기 때문에 **순회의 대상이 되진 않는다.**\n\n이러한 제너레이터를 이용하면 위에서 사용자 정의 이터러블을 해본 것을 더 간단하게 바꿀 수 있다.\n\n```js\nfunction* gen2(a) {\n  let i = a.length;\n\n  while (i--) {\n    yield a[i];\n  }\n}\n\nconst g2Iter = gen2([1, 2, 3]);\nconsole.log(g2Iter.next()); // {value: 3, done: false} \nconsole.log(g2Iter.next()); // {value: 2, done: false}\nconsole.log(g2Iter.next()); // {value: 1, done: false}\n```\n\n## 정리\n\n- 이터러블 프로토콜: 순회(반복) 가능한 객체를 나타내는 프로토콜, 이터러블이면 순회가 가능하다.\n- 이터러블: 이터레이터를 반환하는 `Symbol.iterator`라는 키값의 메소드를 가진 객체\n- 이터레이터: `{ value, done }` 객체를 반환하는 `next()` 메소드를 가진 객체\n\n- 이터러블 프로토콜을 사용자 정의 할 수 있음에 따라 원하는 객체를 지정한 동작에 따라 순회할 수 있게 되어 원하는 값을 추출해내고 다양한 객체에 이를 적용해 결과를 얻을 수 있게 되었다.\n\n- 기본적으로 반복이 가능한 것으로는 (iterable이 내장되어있다) String, Array, TypedArray, Map, Set가 있다.\n\n---\n\nReferences\n- [MDN | The iterable protocol](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Iteration_protocols#iterable \"MDN | The iterable protocol\")\n- [https://ahnheejong.gitbook.io/ts-for-jsdev/02-ecmascript/element-enumeration/iterable-protocol](https://ahnheejong.gitbook.io/ts-for-jsdev/02-ecmascript/element-enumeration/iterable-protocol)\n","excerpt":"이터러블 프로토콜은 ES6에서 도입된 것으로 간단히 말하면 \n이터러블 프로토콜은 순회(반복) 가능한 객체를 나타내는 프로토콜이라 할 수 있다.  반복문,  전개 연산자(Spread Operator), 구조 분해 등과 함께 동작 할 수 있도록 한 프로…","fields":{"slug":"/iterable-protocol/"},"frontmatter":{"date":"Jul 10, 2019","title":"이터러블 프로토콜, 이터러블/이터레이터","tags":["ES6","javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nAJAX(**A**synchronous**J**avaScript**A**nd**X**ML)는 비동기 자바스크립트를 뜻하는 것으로, 이제는 비동기적 자바스크립트 동작을 하는 기술들을 통들어서도 AJAX라고 부릅니다.\n\n최초로 Microsoft의 Internet Explorer가 탑재하기 시작했고, AJAX가 주족받고 웹 기술에서 빠지지 않는 주요 기술로 부상한 것은 Google의 Gmail과 Map으로 부터라고 할 수 있습니다.\n\n**이 포스트는 AJAX의 대표적인 API인  XMLHttpRequest와 Fetch의 기본적인 사용법과 속성들을 살펴봅니다.**\n\nAJAX하면 예전에는 XMLHttpRequest API를 이용하는 것이 일반적이었으며,\n그리고 불편함을 느낀 사람들이 jQuery를 통해 AJAX를 구현하기 시작했고 그 이후로 Fetch API가 ES2015 표준으로 등장하면서 이제는 일반적으로 Fetch API를 통해 구현하는 것이 일반적이 되었습니다. 이 포스트에서는 jQuery는 살펴보지 않겠습니다.\n\n## XMLHttpRequest\n [MDN - XMLHttpRequest](https://developer.mozilla.org/ko/docs/Web/API/XMLHttpRequest)\n\n우선 XMLHttpRequest로 AJAX를 구현하는 예를 보겠습니다.\n`/src/data.json`를 불러와보는 코드입니다.\n`/src/data.json`의 내용은 `{ \"name\": \"Jhon\", \"age\": 29 }` 입니다.\n\n\n```js\n(function() {\n  // XHR 인스턴스 생성\n  const httpRequest = new XMLHttpRequest();\n\n  // httpRequest의 내장 함수 onreadystatechange를 이용해\n  // 서버 상태의 변화에 따라 코드를 작성 할 수 있습니다.\n  httpRequest.onreadystatechange = event => {\n    console.log(\n      `state : ${httpRequest.readyState} / status : ${httpRequest.status} / ${responseReady()}`\n    );\n  };\n\n  // 서버로부터 응답을 받았는지와 정상적으로 처리된 응답인지를 검사하는 함수\n  const responseReady = () => {\n    try {\n      if (httpRequest.readyState === XMLHttpRequest.DONE) {\n        if (httpRequest.status === 200) {\n\t\t\t// 응답을 정상적으로 받음\n          return httpRequest.responseText;\n        } else {\n          return Error('request에 문제가 있습니다.');\n        }\n      } else {\n        return Error('request의 상태가 complete(4)가 아닙니다.');\n      }\n    }\n    catch( e ) {\n      return Error('Caught Exception: ' + e.description);\n    }\n  }\n\n  httpRequest.open(\"GET\", \"/src/data.json\");\n  httpRequest.send();\n})();\n```\n\n코드를 살펴보겠습니다.\n\n`const httpRequest = new XMLHttpRequest();` \n생성자를 이용해 XHR 객체 인스턴스를 생성합니다\n\n`httpRequest.onreadystatechange` \nonreadystatechange 내장 함수를 이용하여 서버의 상태에 따른 코드를 작성합니다. 내부의 코드 console.log를 살펴보면 아래와 같습니다.\n\n```js\nconsole.log(\n      `state : ${httpRequest.readyState} / status : ${httpRequest.status} / ${responseReady()}`\n    );\n```\n\n여기서 readyState는 서버의 응답 상태를 나타내며 아래 목록의 값을 가질 수 있습니다.\n- 0 (uninitialized) -(**request가 초기화되지 않음**)\n- 1 (loading) -(**서버와의 연결이 성사됨**)\n- 2 (loaded) -(**서버가 request를 받음**)\n- 3 (interactive) -(**request(요청)을 처리하는 중**)\n- 4 (complete) -(**request에 대한 처리가 끝났으며응답할 준비가 완료됨**)\n\nstatus code에 대한 설명은 생략합니다.\n\n그리고 responseReady() 함수의 반환값이 마지막으로 위치합니다.\n\n여기까지가 요청에 따른 응답을 처리하는 코드를 작성한 부분이고\n\n```js\n  httpRequest.open(\"GET\", \"/src/data.json\");\n  httpRequest.send();\n```\n\n이 open, send 부분이 요청을 하는 부분입니다. 이 코드로 인해 지금까지 설명한 코드들이 실행되게됩니다.\n\nopen을 하면 위에서 설명한 state가 1번까지 실행되며\nsend를 하면 4번까지 작동하며 응답을 받을 수 있게 됩니다.\n\nopen 메소드의 파라미터\n- 첫번째로 HTTP 요청 메소드(GET,  POST, HEAD)가 위치하게 됩니다.\n- 두번째 파라미터는 요청 URL로 주소 또는 경로가 될 수 있습니다.\n- 세번째 파라미터는 생략가능하며 요청이 비동기적으로 실행될지 여부를 결정합니다. \n\t- default: true\n\t- false로 설정된 경우 동기적으로 작동합니다. (send()함수에서 서버로부터 응답이 올 때까지 기다림)\n\n아래는 지금까지 코드의 콘솔 출력입니다.\n\n```bash\n< state : 1 / status : 0 / Error: request의 상태가 complete(4)가 아닙니다. \n\n< state : 2 / status : 200 / Error: request의 상태가 complete(4)가 아닙니다. \n\n< state : 3 / status : 200 / Error: request의 상태가 complete(4)가 아닙니다. \n\n< state : 4 / status : 200 / { \"name\": \"Jhon\", \"age\": 29 }\n```\n\nstate가 4로 즉 `XMLHttpRequest.DONE`이며 complete 상태일때 응답을 받을 수 있는 상태가 되었고 응답을 받은 것을 확인 할 수 있습니다.\n\n## Fetch\n기존의 XHR 객체를 이용한 AJAX는 복잡하기도 하며 가독성이 떨어졌었습니다. 그래서 등장한 것이 Fetch API로 ES6(ES2015)에서 표준이 되었습니다.\nFetch는 반환값으로 Promise를 가집니다. 이 또한 ES6에 등장한 것으로 여기서는 이에 대해 자세히 설명하지 않고 기본적인 사용법을 기술합니다.\n\n```js\nfetch( resource, init )\n  .then( callback )\n  .catch( callback )\n```\n\n기본적으로 fetch는 이러한 구조를 가집니다.\n\nfetch의 파라미터\n- resource : 요청 주소, URL, 경로\n- init (optional) : 설정 객체\n\n아래는 설정 객체의 예\n```js\nconst init = {\n  method: \"POST\",\n\tbody: JSON.stringify(data),\n\theaders: {\n    \"Content-Type\": \"application/json\"\n  },\n\tcredentials : \"same-origin\"\n}\n```\n설정 객체의 요소들은 아래 링크에서 확인할 수 있습니다.\n[fetch() #parameters | MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n\n이제 간단한 예제를 살펴보겠습니다.\n\n```js\n// data.json : {name: \"Jhon\", age: 29}\n\nfetch('/src/data.json')\n  .then(response => {\n    // 첫번째 then\n    if(response.status === 200){\n      return response.json()\n    } else {\n      console.log(response.statusText);\n    }\n  })\n  .then(jsonData => {\n    // 두번째 then\n    console.log(jsonData); // Object {name: \"Jhon\", age: 29}\n  })\n  .catch(err => {\n    console.log(err)\n  })\n```\n\nfetch에 요청할 경로를 적고 필요의 경우 설정 객체 또한 전달합니다.\n그 결과로 Response 인스턴스가 반환됩니다. 첫번째 then에서 response가 그것입니다. Response 객체의 속성들을 살펴보면 상태를 나타내는 status(정수), statusText(문자)가 있고 요청에 대한 헤더 정보를 담고 있는 header, 그리고 응답 내용을 담고 있는 body가 있습니다.\n\n위의 코드를 살펴보면 fetch 요청 후,\n첫번째 then에서 상태 코드가 200일 경우 response.json()을 리턴하며, 상태 코드가 다를 경우에는 상태 문자를 출력합니다.\n두번째 then으로 넘겨지게 되면 이제 첫번째 then에서 넘겨받은 값을 출력하게 됩니다.\n\n조금 더 자세히 살펴보면\n첫번째 then에서 response.json()을 바로 출력하지 않고 다음 then으로 리턴하여 넘겨준 것은 response.json()은 기대하는 실제 값이 아닌 Promise를 가지고 있기 때문입니다. 이 과정을 살펴보면 아래와 같습니다.\n\nResponse 객체의 body 값을 추출해내기 위해서는 타입에 따라 아래와 같은 메소드를 사용해야 합니다.\n- arrayBuffer()\n- blob()\n- json()\n- text()\n- formData()\n\n위 메소드들은 모두 Promise를 반환합니다. 그리고 이 Promise가 resolve되어 다음 then에서는 실제 값을 다룰 수 있게 됩니다.\n\n여기까지가 기본적인 내용이며 실제 사용 할 때는 필요에 따라 심화로 init object, Header, Request에 대해서 알아보고 사용하는 것이 좋습니다.\n---- \nReferences\n- [Ajax 시작하기 - 웹 개발자 안내서 | MDN](https://developer.mozilla.org/ko/docs/Web/Guide/AJAX/Getting_Started)\n- [MDN - XMLHttpRequest](https://developer.mozilla.org/ko/docs/Web/API/XMLHttpRequest) \n- [WindowOrWorkerGlobalScope.fetch() - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n- [정말 멋진 Fetch API! | Mozilla 웹 기술 블로그](http://hacks.mozilla.or.kr/2015/05/this-api-is-so-fetching/)\n","excerpt":"AJAX(AsynchronousJavaScriptAndXML)는 비동기 자바스크립트를 뜻하는 것으로, 이제는 비동기적 자바스크립트 동작을 하는 기술들을 통들어서도 AJAX라고 부릅니다. 최초로 Microsoft의 Internet Explorer가 탑…","fields":{"slug":"/ajax-xhr-fetch/"},"frontmatter":{"date":"May 14, 2019","title":"AJAX, XMLHttpRequest와 Fetch 살펴보기","tags":["javascript","ajax","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n**(macOS Mojave 환경에서의 포스팅입니다)**\n\npyenv는 nvm(Node Version Manager)과 비슷하게 필요에 따라 다양한 파이썬 버전으로 실행할 수 있는 환경을 제공하는 버전 매니저이다.\n\n프로젝트별 버전을 달리 사용하는 용도가 아니더라도 macOS에서 Python을 설치하고 디폴트 버전을 바꾸는 등 설정을 하는 과정보다 pyenv를 사용하는 것이 훨씬 간편하다.\n\n## pyenv 설치\n\n우선 pyenv를 설치하기 위해 패키지 관리자인 HomeBrew가 설치되어있어야 한다. HomeBrew가 설치되지 않았다면 터미널에서 아래 명령어를 통해 설치한다.\n\n```shell\n$ ruby -e \"$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)”\n```\n\nHomeBrew가 준비되었다면 아래 명령어로 pyenv를 설치한다.\n\n```shell\n$ brew install pyenv\n```\n\n## Python 설치\n\npyenv 설치 후 아래 명령어를 통해 pyenv를 통해 설치할 수 있는 리스트를 확인 할 수 있다.\n\n```shell\n$ pyenv install --list\n```\n\n확인된 리스트에서 원하는 버전을 선택해 설치한다. 예로 3.7.2 버전을 아래 명령어를 통해 설치한다.\n\n```shell\n$ pyenv install 3.7.2\n```\n\nmacOS 버전이 Mojave라면 인스톨 단계에서 에러가 발생할 수 있는데 에러가 발생했다면 아래 명령어를 실행 후 다시 인스톨하면 된다.\n\n```shell\n$ sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /\n```\n\n설치 후에는 아래 명령어를 통해 확인해 볼 수 있다. 아래 명령어는 pyenv를 통해 설치된 리스트를 확인 할 수 있다.\n\n```shell\n$ pyenv versions\n```\n\n이제 설치한 버전을 글로벌 환경에서 디폴트로 사용할 수 있도록 지정해준다.\n\n```shell\n$ pyenv global 3.7.2\n```\n\n지정 후에 적용하려면 아래 명령어가 필요하다.\n\n```shell\n$ eval \"$(pyenv init -)\"\n```\n\n차후에 이 명령어가 필요없도록 `.zshrc` 또는 `.bashrc` 에 해당 명령어를 추가하여 간단하게 터미널을 재시작하면 적용되도록 할 수 있다.\n\n```shell\n$ vi ~/.zshrc\n```\n\n위 명령어로 `.zshrc` 의 하단에 `eval \"$(pyenv init -)\"` 를 추가해주자.\n\n이제 터미널을 재실행하고 아래 명령어를 통해 원하는 버전이 적용된 것을 확인 할 수 있다.\n","excerpt":"(macOS Mojave 환경에서의 포스팅입니다) pyenv는 nvm(Node Version Manager)과 비슷하게 필요에 따라 다양한 파이썬 버전으로 실행할 수 있는 환경을 제공하는 버전 매니저이다. 프로젝트별 버전을 달리 사용하는 용도가 아니…","fields":{"slug":"/install-python-use-pyenv/"},"frontmatter":{"date":"Feb 20, 2019","title":"pyenv를 이용해 Python 설치하기 (macOS)","tags":["python"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Tablo - Bookmark and manage tabs\n\n다운로드 링크 : [Chrome WebStore - Tablo](https://chrome.google.com/webstore/detail/tablo-bookmark-and-manage/aoccnljcdmmbihgabpoljghfcmbflkhc)\n\n우선 Tablo 앱을 만들게 된 것은 나만의 링크들을 담아두는 즐겨찾기를 만들고자 시작했고,\n\n그 방식은 현재 열려있는 탭들을 나만의 리스트에 옮겨 관리할 수 있게 되는 방식을 원했다.\n\n그래서 만들어진 것이 Tablo이고 아래는 기능에 대한 간략한 설명이다.\n\n### 열려있는 탭을 기준으로 나만의 북마크 리스트 만들기\n\n우측에 현재 열려있는 탭의 리스트가 있다,  \n\n좌측에는 'trello' 혹은 'Github projects'와 비슷한 인터페이스의 칸반 보드가 위치한다.\n\n우측의 열려있는 탭 리스트에서 링크를 드래그하여 좌측의 원하는 칸안에 드랍하면 된다.\n\n### 웹 서핑 중 페이지 링크를 담기\n\nCart 기능이라고 불린다. 웹 서핑중 이 페이지를 Tablo에 저장하고 싶다면,\n\n우측 상단에 크롬 확장 프로그램 툴바에 위치한 Tablo 아이콘을 클릭하면 '카트에 담기'가 보이게 되고 해당 기능을 이용하면\n\nTablo에서 우측에 Cart 부분에 담기게 된다. 이제 링크를 Cart에서 드래그하여 원하는 곳에 분류하면 된다.\n\n## 개발\n\n전반적인 개발 스택은 아래와 같다\n\n- React\n- Redux\n- Webpack\n- SASS(SCSS)\n- Chrome Extension\n\n우선 React + Webpack으로 개발을 시작했다. 개발을 시작하자마자 바로 문제점을 만났는데 크롬 확장프로그램을 개발 중 계속해서 빌드하고 새로고침하는 방법을 쓰기는 너무나도 불편했다. 해결점을 찾다가 한 레포지토리([link](https://github.com/samuelsimoes/chrome-extension-webpack-boilerplate))를 발견해서 개발 중에도 계속해서 build 폴더가 변경되면서 핫로더 기능이 작동할 수 있게 되었다. 이 레포지토리를 클론하고 이 프로젝트에 맞게 Webpack을 수정하고 개발하기 시작했다.\n\n여러 컴포넌트가 있고 각 컴포넌트간에 드래그 앤 드랍이 왔다갔다 하면서 데이터를 관리하기가 어렵다는 것을 느끼게 되어 Redux를 쓰기 시작했다. Redux를 기본만 익혀두고 안쓴지 오래되었기 때문에 다시 익히는데 시간이 조금 오래 걸렸다. 지금 reducer 코드도 정리 안 된 것이 많지만 일단은 나중에 리팩토링하기로 했다.\n\n기본적으로 Redux를 써서 데이터를 관리하지만 데스크탑, 노트북이든 어디서든 똑같은 데이터가 공유되기를 원했다. 로그인 기능을 활용하기엔 정적 사이트인 크롬 확장프로그램은 어려웠고 그래서 Chrome Extension의 기능을 가져다쓴 Sync Storage를 활용해 어디서든 크롬 브라우저에 로그인만 되어있다면 데이터가 공유 될 수 있도록 했다.\n\n드래그 앤 드랍 부분이 이 프로젝트에서 상당히 많은 부분을 차지하는데 일단 라이브러리 없이 개발하고 싶었다. 그렇게 개발하였고 지금은 동작 부분에서는 문제가 없지만 코드 측면에서 많아진 드래그 앤 드랍 관련 함수들을 어떻게 정리할지가 고민이다. 또한 브라우저에서 마우스를 따라오는 드래그하는 개채가 기본적으로 opacity가 정해져있어 그것을 어떻게 해결할지도 고민이다. 윈도우 환경에서는 특히나 더 심해 드래그하는 개체가 잘 보이지 않는다.\n\n주절주절 말이 많았지만 지금까지 개발 후 다음으로 해야할 것들을 정리해보면\n\n- Redux 스터디 및 Redux 코드 리팩토링\n- DnD 관련 함수 정리\n- 드래그 개체의 opacity 조절 방법 찾기\n- 추가적인 기능 구현\n  - 칸반 보드의 색상 커스터마이징이 가능\n\n개선할 것이 많긴하지만 일단 어느정도 원하는 기능이 다 담길만큼 개발했다.\n\n백로그없이 기존에 생각하고 있는 것대로 구현하고 개발을 어느정도 마쳤더니 정리가 안된 느낌이 있지만 일단 지금은 이 프로젝트에 계속해서 시간을 투자할 수 없어 여기까지하고 차후에 리팩토링을 통해 해결해야겠다.\n","excerpt":"Tablo - Bookmark and manage tabs 다운로드 링크 : Chrome WebStore - Tablo 우선 Tablo 앱을 만들게 된 것은 나만의 링크들을 담아두는 즐겨찾기를 만들고자 시작했고, 그 방식은 현재 열려있는 탭들을 나만…","fields":{"slug":"/tablo-develop/"},"frontmatter":{"date":"Jan 08, 2019","title":"크롬 확장프로그램 'Tablo' 소개 및 개발기","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n2018년의 Javascript 통계를 나타낸 사이트를 발견하고 간단히 정리해보았다.\n\n약 2만명이 넘는 Javascript 개발자를 대상으로 설문조사를 한 결과이다.\n\n자세한 통계는 아래 자료 출처 사이트에서 참고할 수 있다.\n\n자료 출처 : [2018 State of JS](https://2018.stateofjs.com/)\n\n## Javascript Flavors\n\n1. **ES6**\n2. **TypeScript**\n3. Flow\n4. **Reason**\n5. Elm\n6. ClojureScript\n\n역시 계속해서 ES6와 TypeScript가 대세,  \n두개를 제외하고는 차이가 크게 하위권에 위치한다.\n\n하위권에서 Reason(페이스북이 개발)은 향후 전망이 좋을 것으로 예측했다.\n\n## Javascript Frameworks\n\n1. **React**\n2. **Vue.js**\n3. **Angular**\n4. Preact\n5. Ember\n6. Polymer\n\n계속해서 React, Angular, Vue의 삼자구도,  \nReact가 크게 상위권을 가져갔다.\n\n세개의 프레임 워크를 제외하곤 큰 차이로 하위권에 속한다.\n\n여기서 Angular는 현재 많은 사용을 보이고 있지만 만족도가 낮기에 전망이 좋다고만은 할 수 없다고 나타났다.\n\n## Data Layer\n\n1. **Redux**\n2. **GraphQL**\n3. **Apollo**\n4. MobX\n5. Relay Modern\n\n리덕스가 2위와 두배 차이로 크게 1위를 차지하고 있다.\n\n그 뒤로 GraphQL과 Apollo가 전망을 좋게 예상하고 있고,  \n특히나 GraphQL이 사용자 수에서 앞서면서 앞으로의 전망이 기대된다.\n\n## Backend Frameworks\n\n1. **Express**\n2. **Next.js**\n3. koa\n4. meteor\n5. sails\n6. FeathersJS\n\n압도적인 차이로 Express가 1위, \n\nNext.JS는 현재 사용자는 적지만 큰 만족도를 나타내며 향후 전망이 좋을 것으로 예측되었다.\n\n## Mobile & Desktop\n\n1. **Electron**\n2. **React Native**\n3. Native Apps\n4. Cordova\n5. Ionic\n6. NativeScript\n\nElectron과 React Native가 1,2위를 차지했고 앞으로 계속 상승세를 띌 것으로 보인다.\n\n또한 Cordova와 Ionic이 앞으로 사용하지 않겠다라는 응답이 많아 하향세가 눈에 띈다.\n\n## Other Tools\n\n### Other Language\n\n1. Python\n2. PHP\n3. Java\n4. C#\n5. .Net\n6. Ruby\n7. Go\n8. C/C++\n9. Swift\n10. Rust\n11. … 이하 생략\n\nJavasciprt 개발자가 사용하는 다른 언어의 순위이다.  \n순위마다 큰 격차가 벌어지는 경우 없이 순위가 내려갈수록 계단식으로 점차 줄어드는 그래프를 보였다.\n\n### Build Tools\n\n1. **Webpack**\n2. Gulp\n3. Grunt\n4. Browserify\n5. Rollup\n6. **Parcel**\n7. … 이하 생략\n\nWebpack이 압도적인 1위를 차지하고 있다.\n\n글쓴이가 올해들어 사용해본 Parcel이 눈에 띈다.\n\nParcel은 이 통계사이트에서 전망을 기대하는 부분에서 3위를 차지했다.  \n(1위 Reason, 2위 Svelte)\n\n## Utility Libraries\n\n1. lodash\n2. moment\n3. jQuery\n4. … 이하 생략\n\nlodash와 moment가 근소한 차이를 다투며 1,2위를 차지했고\n\n2위의 약 70퍼센트 수치로 jQuery가 그 뒤를 차지했다.\n\n## Text Editors\n\n1. VS Code\n2. Sublime Text\n3. Vim\n4. WebStorm\n5. Atom\n6. … 이하 생략\n\n압도적으로 1위를 VS Code가 차지했다.\n\n2~5위까지는 근소한 차이를 보이며 그 아래는 매우 큰 차이로 하위권들을 차지한다.\n\n## 정리하면...\n\n- ES6와 TypeScript가 대세였으며 앞으로 페이스북이 개발한 Reason이 주목받기 시작할 것이다.\n- React, Angular, Vue의 삼자구조는 무너지지 않았고 무너지지 않을 예정,  \n  하지만 Angular는 사용자의 만족도가 낮은 것을 보여 하향세를 나타낼 것으로 보임\n- 데이터 부분에서는 Redux가 크게 1위를 차지,  \n  GraphQL과 Apollo가 좋은 전망, 특히 GraphQL의 전망이 기대됨.\n- Backend에서는 Express가 독보적, 앞으로도 그럴 것.  \n  Next.JS는 많은 주목을 받으며 앞으로의 전망이 기대됨\n- Electron은 데스크탑 개발로서 독보적인 1위를 차지할 것으로 보이며,  \n  모바일 부분에서는 역시 React Native가 대세. Cordova, ionic은 하향세를 보이고 있다.\n- 빌드 부분에서는 Webpack이 독보적 1위, Parcel은 전망을 지켜볼만 하다.\n- 라이브러리 부분에서는 Lodash, Moment가 많이 쓰이고 jQuery가 그 뒤를 잇는다.\n- 에디터는 독보적으로 VS Code가 1위를 차지.\n\n(아래는 개인적으로 정리해본 결과)\n\n### 2018년 대세, 그리고 향후 좋은 전망을 가진 기술\n\n- ES6\n- TypeScript\n- React\n- Vue.js\n- Express\n- Electron\n- React Native\n- Webpack\n\n### 앞으로의 전망이 기대되는 기술\n\n- Reason\n- Next.JS\n- Parcel\n- GraphQL\n\n---\n\n### References\n\n- [2018 State of JS](https://2018.stateofjs.com/)\n- [Nomad Coders](https://youtu.be/lvgEdrDZUgY)\n","excerpt":"2018년의 Javascript 통계를 나타낸 사이트를 발견하고 간단히 정리해보았다. 약 2만명이 넘는 Javascript 개발자를 대상으로 설문조사를 한 결과이다. 자세한 통계는 아래 자료 출처 사이트에서 참고할 수 있다. 자료 출처 : 2018 …","fields":{"slug":"/javascript-2018/"},"frontmatter":{"date":"Dec 04, 2018","title":"2018년의 JavaScript 동향, 그리고 전망","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n아직은 개발을 공부하는 입장으로 공부하는 프로젝트 위주이기에,  \n배포된 개발한 결과물이 많진 않지만 지금까지 개발한 결과물에 대한 이야기를 이야기 해보려 한다.\n\n연말을 맞아 기록해두면 좋을 것 같아서 작성해본다.\n\n---\n\n현재 **구글 애널리틱스**에는 두가지가 등록되어있다.\n\n1. 블로그\n2. Netflix AutoSkip\n\n현재 계속해서 유지보수하고 있는 것은 이 두가지라 볼 수 있다.\n이 블로그와 크롬 확장프로그램인 'NetFlix AutoSkip'이다.\n\n그리고 **구글 대시보드**에는 크롬 확장프로그램이 세가지 등록되어있다.\n\n1. Netflix AutoSkip\n2. Mojave Chrome Bug Fix\n3. Random Wallpaper for New Tab\n\n현재 2, 3은 미등록 상태로 전환하여 배포를 중단한 상황이다.\n\n2번은 맥 모하비 베타 시절 크롬 브라우저에서 input 개체들이 제대로 표시되지 않던 것을 고쳐주기 위한 확장프로그램이고 현재는 버그가 해결되어 필요가 없어진 상황.\n\n3번은 처음 크롬 확장프로그램을 개발해보고자 해본 프로젝트로 크롬 new tab 프로그램이다. react를 사용했고 unsplash의 API를 이용해 랜덤한 배경화면을 슬라이드로 보여주는 프로그램이고 장르별 설정이 가능하도록 개발했다. 하지만 예전에 개발한 만큼 부족한 점이 많아 미등록으로 전환 배포를 하지 않고 있다. 향후 비슷한 프로그램을 새롭게 만들어볼 의향이 있다.\n\n---\n\n### 블로그\n\n이제는 지금도 유지보수를 하고 있는 두가지에 대한 이야기이다.\n\n블로그는 기본에 Jekyll로 운영하면서 9월 이후에 Gatsby로 개편을 진행했다.\n\n테마를 사용하지 않고 새로 빈 프로젝트부터 개발해서 시간도 많이 걸렸지만 애착도 많이 생겼다.\n\n테마 형식으로 배포해보고자 개발했는데 현재는 정식으로 배포하긴 이르다고 생각되어 임시로 사용은 가능하도록 도큐먼트를 작성해뒀다.\n\n공사중에 방문자가 확 줄었고 현재 한달 방문자는 2천명을 살짝 넘는 수준이고 조금씩 증가 그래프를 보이고 있다.\n\n아무래도 개인적인 기록용으로 시작했다보니 포스트들이 남들이 보기에는 편리하지 않을 수 있다는 생각이 들어 앞으로는 제대로 작성해야겠다는 생각을 하고 있다.\n\n### Netflix AutoSkip\n\n넷플릭스의 인트로와 엔딩을 자동으로 스킵해주는 프로그램이다, 간단히 말하면 DOM에 특정 버튼이 나타나면 클릭 이벤트를 실행해주는 프로그램이다.\n\n처음에는 내가 필요해서 만든 프로그램이었다.\n\n그러다가 한번 배포해보자는 생각에 배포를 시작했고 현재는 전세계에서 1300명 정도가 사용하고 있다.\n\n많은 숫자는 아니지만 사용자에게 피드백을 받는 상황도 생기다보니 재미있었다.\n\n영어로 쓰여진 메일로 온 피드백은 버그에 관련된 것이었고 대부분의 사용자는 이상 없이 사용하지만 특정 소수 사용자에게 발생하는 것 같았다.\n\n전세계에서 넷플릭스를 사용하다보니 본인이 사용하는 환경(한국 넷플릭스)에서는 테스트가 어려운 부분이 있었고 크롬 확장 프로그램 특정상 테스트가 그리 쉽진 않아 현재도 해결하지 못하고 있다.\n\n버그 상황은 아니 그 상황이 나타나면 해결하는 코드를 짜보기도 했지만 소용이 없는 모양이다.\n\n일단은 기다려볼 생각이다 또 다른 피드백이 와서 정보가 더 생기길 기대할 수 밖에 없는 것 같다.\n\n간단한 기능일지라도 계속해서 리팩토링을 하며 개선해나갔고 지금은 특별한 이상이나 넷플릭스의 업데이트가 있지 않는 이상은 개선하지 않아도 될 것 같다.\n\n---\n\n현재는 공부에 치중하고 있어서 새로운 프로젝트를 실행하고 있지 않지만  \n하고싶은건 너무나도 많다. 어쩌다보니 올해는 정적 페이지로 개발한 것들만 있는데 내년엔 풀스텍 개발로 프로젝트를 해보고 싶다.\n","excerpt":"아직은 개발을 공부하는 입장으로 공부하는 프로젝트 위주이기에, 배포된 개발한 결과물이 많진 않지만 지금까지 개발한 결과물에 대한 이야기를 이야기 해보려 한다. 연말을 맞아 기록해두면 좋을 것 같아서 작성해본다. 현재 구글 애널리틱스에는 두가지가 등록…","fields":{"slug":"/dev-reports-2018/"},"frontmatter":{"date":"Dec 03, 2018","title":"현재까지 개발한 결과물에 대한 이야기","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n처음 웹개발을 배울 때 웹표준을 배웠던 것 사실만 어렴풋이 기억난다.\n\n그 이후 개발을 해오면서는 거의 신경쓰지 않고 개발했던 것 같다.\n\n얼마 전, 이 블로그를 개발하면서 검색 엔진 노출을 위해 웹표준, SEO를 신경써 개발하다보니 다시 한번 살펴봐야겠다는 생각이 들었다.\n\n그래서 그 중에서 HTML head 부분을 채우는 meta 태그에 대해 가볍게 정리해보았다.\n\n아래는 포스트에서 살펴 볼 태그들의 목록를 나타낸 예제이다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"\">\n      <meta name=\"keywords\" content=\"\">\n      <meta name=\"description\" content=\"\">\n      <meta name=\"author\" content=\"\">\n      <meta name=\"generator\" content=\"\">\n      <meta name=\"robots\" content=\"\">\n      <meta http-equiv=\"refresh\" content=\"\">\n      <meta property=\"og:type\" content=\"\">\n      <meta property=\"og:title\" content=\"\">\n      <meta property=\"og:description\" content=\"\">\n      <meta property=\"og:image\" content=\"\">\n      <meta property=\"og:url\" content=\"\">\n  </head>\n</html>\n\n```\n\n### `<html lang=\"ko\">`\n\n메타 태그 이전에 html 태그의 lang 속성에 대해 한번 알아보자.\n\nlang 속성을 지정해야 하는 이유\n\n- 스크린 리더(화면 낭독 프로그램)이 지정된 언어를 인지하여 읽기 위함\n\nlang 속성 값 'en-US', 'en-GB'의 차이점\n\n- 언어 뒤에 국가 코드를 붙인 형식으로, 만약 브라우저가 미국식 영어와 영국식 영어를 다르게 처리할 수 있는 환경이라면 서로 다르게 처리된다. 하지만 처리할 수 없을 경우에는 둘 중 가능한 것으로 처리되게 된다.\n\nlang 속성 개별 선언\n\n- 만약 html lang이 en이고 그 중간에 한글로 된 내용이 있다고 한다면 내부에서 `<span lang=\"ko\">한글</span>`의 형식으로 선언하면 해당 내용은 한글로 처리할 수 있게 된다.\n\n## meta Tag\n\n- 참고\n  - [구글이 반영하는 메타 태그][3]\n\n### meta charset :star:\n\n```html\n<meta charset=\"UTF-8\">\n```\n\nHTML5의 인코딩 지정 방법이다.\n\n보통 UTF-8(유니코드 형식의 하나로, 전세계 거의 모든 문자를 표현 할 수 있다.)를 값으로 준다.\n\nHTML이 아닌 곳에서의 인코딩 지정을 살펴보자.\n\n- Javascript : `<script src=\"a.js\" charset=\"UTF-8>\"` 해당 코드와 같이 외부에서 불러오는 파일일 경우 charset의 차이로 내용이 깨져보일 수 있다.\n- CSS : `@charset \"UTF-8\"` 표준에 따르면 CSS 문서 최상단에 해당 코드를 기술하도록 되어있다.\n\nHTML 문서가 아닌 곳에서 인코딩을 지정할 필요는 보통 없다. 인코딩 에러가 발생할 경우 이 내용을 참고하도록 하자.\n\n### meta viewport :star:\n\n반응형 웹 구현을 위해 필요한 메타 태그이다.\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\n뷰포트라 함은 화면에 보이는 영역을 뜻한다. 즉 스크롤해서 봐야하는 영역을 제외한 보이는 그대로의 크기만큼의 영역이다.\n\n위 예제 코드는 가장 흔히 쓰이는 코드로 너비는 보고있는 기기의 넓이이며 그에 맞춰 초기 화면 배율을 1로 지정\b한다는 의미이다.\n\n### meta keywords :star:\n\n```html\n<meta name=\"keywords\" content=\"a b\">\n```\n\n해당 컨텐츠 내용의 대표적인 키워드를 지정한다.\n\n검색 엔진의 검색 결과에 반영 될 수 있다.  \n구글에서는 검색 순위에 많은 메타 태그를 반영하지 않고 있지만 (keywords도 해당) 그래도 다른 검색 엔진에서도 반영하며 SEO에서는 중요한 메타 태그라고 할 수 있다.\n\n\n### meta description :star:\n\n```html\n<meta name=\"description\" content=\"개발 사이트 - About\">\n```\n\n해당 페이지의 설명을 적어 넣는다, 검색 시 페이지의 제목 아래 페이지 내용의 요약이 적혀있는 것을 볼 수 있는데 그 부분에 반영되는 항목이다.\n\n### meta author :star:\n\n```html\n<meta name=\"author\" content=\"junho\">\n```\n\n웹 페이지의 소유자(또는 회사)를 적는다.\n\n### meta generator :x:\n\n```html\n<meta name=\"generator\" content=\"\">\n```\n\n이 웹페이지를 무엇으로 만들었는지 기술하는 태그이다.\n\n다른 사람이 코드를 알아볼 때 참고할 수 있도록 하는 면이 있는데 요즘은 번들러를 통해 코드가 변환되는 경우가 있기 때문에 기술할 필요성이 떨어지며, 또 다른 경우는 코드를 자동 생성하면서 해당 메타 태그가 기술되어지는 경우가 있는데 이 경우 또한 흔한 경우가 아니며 웹표준이나 SEO 측면 모두 불필요한 메타 태그라고 볼 수 있다.\n\n### meta robots\n\n```html\n<meta name=\"robots\" content=\"noindex\">\n```\n\nrobots는 기본적으로 검색 엔진 크롤러의 허용, 불허 등을 제어한다.\n\n**robots 메타태그 보다는 robots.txt 파일로 제어하는게 일반적**이다.\n\nrobots.txt의 역할과 차이점이 무엇인지 혼용해서 쓸 수 있을지는 아래 링크를 참고하자.\n\n- [robots.txt 파일과 meta robots 태그의 차이점][4]\n\n### `<meta http-equiv=\"refresh\">` :x:\n\n```html\n<meta http-equiv=\"refresh\" content=\"0; url=https://example.com/\">\n```\n\n해당 메타 태그를 사용하면 지정한 시간 이후 이정한 URL으로 자동으로 페이지를 이동시킬 수 있다.\n\ncontent에 초 단위로 시간을 지정하고 0일 경우에는 즉시 이동한다.\n\n**해당 동작은 권장되지 않는다**. 자동으로 URL 리다이렉션은 최근 웹에서는 지양하고 있으며 피싱 등의 위험으로 간주 될 수 있다.  \n또한 5초로 리다이렉트를 지정해놓았는데 그 전에 사용자가 뒤로가기를 하는 경우에 뒤로가기를 했는데도 5초 후 지정한 URL로 이동될 수 있으니 사용하지 않는 것이 좋다.\n\n### OpenGraph\n\n오픈그래프는 웹페이지가 소셜 미디어 또는 오픈그래프를 활용한 사이트로 공유될때 사용되어지는 정보이다.\n\n제일 흔한 예로 페이스북에 링크를 붙여놓기, 카카오톡 링크 공유할 때 해당 게시물의 제목, 설명, 이미지가 간략하게 나타나는 경우가 오픈그래프가 활용된 경우이다.\n\n```html\n<head>\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"페이지 제목\">\n    <meta property=\"og:description\" content=\"페이지 설명\">\n    <meta property=\"og:image\" content=\"http://www.mysite.com/myimage.jpg\">\n    <meta property=\"og:url\" content=\"http://www.mysite.com\">\n</head>\n```\n\n- [오픈 그래프][5]\n- [네이버 웹 표준 HTML 마크업 가이드 | 오픈 그래프][6]\n\n<br/>\n<br/>\n<br/>\n\n---\n\n<br/>\n\n- References\n\n  - https://ko.wikipedia.org/wiki/%EC%9B%B9_%ED%91%9C%EC%A4%80 \"웹표준 Wiki\"\n  - http://www.wah.or.kr/Accessibility/define.asp \"웹 접근성 연구소\"\n  - https://support.google.com/webmasters/answer/79812?hl=ko \"Google에서 이해할 수 있는 메타태그\"\n  - http://www.seo-korea.com/robots-txt-%ED%8C%8C%EC%9D%BC%EA%B3%BC-meta-robots-%ED%83%9C%EA%B7%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/ \"robots.txt 파일과 meta robots 태그의 차이점\"\n  - http://ogp.me/ \"오픈 그래프\"\n  - https://webmastertool.naver.com/guide/basic_markup.naver#chapter2.3 \"네이버 웹표준 가이드\"\n  - https://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94 \"SEO wiki\"\n  - http://mygumi.tistory.com/52\n  - http://www.seo-korea.com/robots-txt-%ED%8C%8C%EC%9D%BC%EA%B3%BC-meta-robots-%ED%83%9C%EA%B7%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/\n\n\n\n\n\n[1]: https://ko.wikipedia.org/wiki/%EC%9B%B9_%ED%91%9C%EC%A4%80 \"웹표준 Wiki\"\n[2]: http://www.wah.or.kr/Accessibility/define.asp \"웹 접근성 연구소\"\n[3]: https://support.google.com/webmasters/answer/79812?hl=ko \"Google에서 이해할 수 있는 메타태그\"\n[4]: http://www.seo-korea.com/robots-txt-%ED%8C%8C%EC%9D%BC%EA%B3%BC-meta-robots-%ED%83%9C%EA%B7%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90/ \"robots.txt 파일과 meta robots 태그의 차이점\"\n[5]: http://ogp.me/ \"오픈 그래프\"\n[6]: https://webmastertool.naver.com/guide/basic_markup.naver#chapter2.3 \"네이버 웹표준 가이드\"\n[7]: https://ko.wikipedia.org/wiki/%EA%B2%80%EC%83%89_%EC%97%94%EC%A7%84_%EC%B5%9C%EC%A0%81%ED%99%94 \"SEO wiki\"\n","excerpt":"처음 웹개발을 배울 때 웹표준을 배웠던 것 사실만 어렴풋이 기억난다. 그 이후 개발을 해오면서는 거의 신경쓰지 않고 개발했던 것 같다. 얼마 전, 이 블로그를 개발하면서 검색 엔진 노출을 위해 웹표준, SEO를 신경써 개발하다보니 다시 한번 살펴봐야…","fields":{"slug":"/meta-tag/"},"frontmatter":{"date":"Nov 15, 2018","title":"meta 태그를 알아보자 (웹표준과 SEO)","tags":["SEO","html"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 서론...\n\n일단 Gatsby는 Jekyll과 같은 **정적 페이지 생성 프레임워크**이다.\n\n(본인이 생각하는) 장점은 React + Webpack 으로 되어있다는 점.\n\nJekyll은 익숙치 않아 테마를 사용하고 개인화하는데 불편함이 있었는데 익숙한 React로 되어있어 제작하는데 어렵지 않게 할 수 있었다.  \n\n또한 Gatsby가 제공하는 유용한 plugin(Webpack)들이 많아 쉽게 만들 수 있는 점도 있다.\n\nJekyll과 비교해 단점이라면 번들링 과정을 한번 거쳐서 배포가 된다는 점 (어떤 면에선 장점)  \n그리고 Jekyll에 비해서는 사용자가 부족해 정보나 테마 등이 부족하다는 점이 있다.\n\n저번 Jekyll 블로그를 운영할 때는 테마를 받아 조금의 수정을 거쳐 사용했었는데 지금은 완전 처음부터 제작을 하였다.  \n지금 보고 있는 이 블로그이다. 아직 추가할 기능이 많지만 필요한 기능은 구현을 마쳤고 추가는 천천히 할 생각이다.\n\n아래는 Github Page에 Gatsby 블로그를 시작하는 두가지 방법을 기술한다.  \n원하는 방법으로 시작하면 된다.\n\n1. Gatsby Starter로 Jekyll의 테마를 이용하듯 다른사람이 제작한 블로그 형식으로 시작하는 방법\n2. 지금 보고있는 블로그를 자신의 것으로 개인화하여 사용하기\n\n## 1. Gatsby Starter를 이용해 시작하기\n\n우선 `gatsby-cli`를 글로벌 설치해준다.\n\n```shell\n$ npm install --global gatsby-cli\n```\n\n이제 `create-react-app`을 사용하듯 비슷한 사용법으로 사용이 가능하다.\n\n`$ gatsby new [SITE_DIRECTORY]` 의 명령으로 빈 프로젝트로 시작할 수 있다.\n\n하지만 여기서는 스타터를 이용하여 시작하는 방법을 소개하니 위 명령어가 아닌 아래 명령어를 이용하자\n\n```\n$ gatsby new [SITE_DIRECTORY] [URL_OF_STARTER_GITHUB_REPO]\n```\n\n위 명령에서 `[SITE_DIRECTORY]`에는 자신의 프로젝트 이름(폴더명)을 입력하고 `[URL_OF_STARTER_GITHUB_REPO]`에는 사용할 스타터의 Github 리포지토리 주소를 적으면 된다.\n\n어떤 스타터를 할 것인지는 아래에서 찾아서 확인해보자\n\n1. [Gatsby Starters (Official)][2]\n2. [Gatsby Starters][1]\n\n1번의 오피셜 스타터보다는 2번의 다른 사람이 제작한 것을 사용하는 것을 추천한다.\n\n로컬 개발 서버는 `$ gatsby develop` 를 통해 열 수 있다.\n\nGithub Page를 이용해 배포하는데는 여러가지 방법이 있고 스타터마다 권장하는 방식이 다를 수 있으니 해당 스타터 깃헙 페이지의 사용법을 확인하자.\n\n## 2. 현재 보고있는 블로그로 시작하기\n\n**블로그가 새로 업데이트 되었습니다. 아래 글은 이전 블로그 기준으로 작성된 글입니다**\n\n~~지금~~ 보고있는 이 블로그는 다른 사용자들이 사용할 수 있도록 개인화가 가능하도록 테마 형식으로 제작되어 쉽게 커스터마이징하여 사용할 수 있다.\n\n간단히 블로그에 대해 설명하면,\n\n지금은 홈, 태그, 검색의 세가지 메뉴로 구성되어있으며 포스트를 태그로 관리하는 형식이다. 차후 카테고리 방식도 업데이트 예정이다.\n\n아래와 같은 기술 스택으로 제작되었으며 웹표준, 검색 최적화(SEO)를 준수하고 있고 Google Analytics를 사용할 수 있다.\n\n- Gatsby\n- React\n- Webpack\n- SASS (SCSS)\n- typography.js, Google Fonts\n- Google Analytics\n\n또한 Github Page 배포를 위해서 `gh-pages` 모듈을 이용 master 브랜치에 배포되도록 설정하였다.  \n작업은 기본적으로 'develop' 브랜치에서 이루어지고 master 브랜치는 배포되는 파일만 위치하게 된다.  \n그래서 해당 프로젝트를 clone 할 때도 develop 브랜치를 클론하게 된다.\n\n---\n\n우선 아래 명령어로 clone을 하자.  \n[SITE_DIRECTORY]에는 자신의 프로젝트 이름을 적는다.\n\n```shell\n$ git clone -b develop https://github.com/junhobaik/junhobaik.github.io.git [SITE_DIRECTORY]\n$ npm install\n```\n\n여기까지 했다면 개인화 과정을 하기 전에 한번 `$ npm start`를 통해 제대로 실행되는지 'localhost:8000'에 들어가 확인해본다.\n\n다음으로 아래 두가지를 알아두고 시작하면 된다.\n\n1. 개인화 방법\n2. 포스트(마크다운) 작성법\n3. 배포 방법\n\n위 두가지와 자세한 가이드는 Documents에서 확인해 볼 수 있다.\n\n먼저 Get Started를 확인하고 documents를 참고하는 것을 추천한다.\n\n- [Get Started 바로가기][4]\n- [Documents 바로가기][3]\n\n\n[1]: https://www.gatsbyjs.org/starters/?v=2 \"gatsby starter\" \n[2]: https://www.gatsbyjs.org/docs/starters/#starters \"gatsby starter official\"\n[3]: https://github.com/junhobaik/junhobaik.github.io/wiki/Documents \"documents\"\n[4]: https://github.com/junhobaik/junhobaik.github.io#get-started \"get started\"\n","excerpt":"서론... 일단 Gatsby는 Jekyll과 같은 정적 페이지 생성 프레임워크이다. (본인이 생각하는) 장점은 React + Webpack 으로 되어있다는 점. Jekyll은 익숙치 않아 테마를 사용하고 개인화하는데 불편함이 있었는데 익숙한 Reac…","fields":{"slug":"/create-gatsby-blog/"},"frontmatter":{"date":"Nov 14, 2018","title":"Gatsby로 블로그 만들기","tags":["gatsby","blog"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\ngit에서 특정한 파일만 merge 하고 싶을 때가 있다.\n\n`B` 브랜치를 `A` 브랜치에 merge 하려하는데 특정 파일(`./a.js`)만 병합하고 싶을 상황일 때 쓸 수 있는 방법이다.\n\n## 방법 1\n\nmerge 키워드를 사용하지 않지만 아래 방법으로 특정 파일만 합치는 것이 가능하다.\n\n`A` 브랜치로 체크아웃한 상태에서 아래 명령을 입력한다.\n\n```shell\n$ git checkout -p B a.js\n```\n\n위 명령으로 작업을 완료 할 수 있고 아래는 이에 대한 설명이다.\n\n`checkout -p` 여기서 p 플래그는 `-p|--patch`으로 patch 옵션을 나타낸다.\n\n```shell\n$ git checkout -p B a.js\n```\n명령을 통해서 패치하겠다는 명령을 주면,  \n변경 내용 출력과 함께 하단에 지금 작업에 반영하겠냐는 질문이 뜨는데 y를 입력해주면 된다.  \n여러번 질문이 나올 수 있는데 a를 입력하면 모든 질문에 y를 입력하는 행동을 할 수 있다.\n\n아래는 그 예시이다.\n\n```shell\n$ git checkout -p B a.js\n\ndiff --git b/a.js a/a.js\nindex 5f133a1..31d30c1 100644\n--- b/a.js\n+++ a/a.js\n@@ -2,6 +2,7 @@ const _ = require('lodash');\n const Promise = require('bluebird');\n const path = require('path');\n+const config = require('./config');\n\n exports.createPages = ({ graphql, actions }) => {\n   const { createPage } = actions;\nApply this hunk to index and worktree [y,n,q,a,d,j,J,g,/,e,?]? y\n```\n\n참고로 여기서 `[y,n,q,a,d,j,J,g,/,e,?]`의 의미는 아래와 같다.\n\n```\ny - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk nor any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk nor any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n```\n\n## 방법 2\n\n두번째 방법은 merge 키워드를 사용하므로 위의 방법보다는 진정한 merge라고 할 수 있다.  \n다수의 파일을 합칠 때 유용하며,  \n모든 변경 사항을 가져오고, 특정 파일의 변경 사항을 제외시켜 특정 파일 외의 모든 변경사항을 합치고 싶을 때 사용한다.\n\n현재 작업중인 `A` 브랜치에서 `personalConfig.js` 파일과 `REAME.md` 파일만은 그대로 두고, 나머지 `B` 브랜치의 모든 변경 사항은 합치고 싶다면 `A` 브랜치로 체크아웃 후에 아래의 과정을 거치면 된다.\n\n```shell\n$ git merge --no-commit --no-ff B -X theirs\n\n$ git reset HEAD personalConfig.js README.md\n\n$ git clean -fd\n\n$ git commit\n```\n\n\n","excerpt":"git에서 특정한 파일만 merge 하고 싶을 때가 있다.  브랜치를  브랜치에 merge 하려하는데 특정 파일()만 병합하고 싶을 상황일 때 쓸 수 있는 방법이다. 방법 1 merge 키워드를 사용하지 않지만 아래 방법으로 특정 파일만 합치는 것이…","fields":{"slug":"/git-specific-files-merge/"},"frontmatter":{"date":"Nov 06, 2018","title":"git 특정한 파일 병합(merge) 하기","tags":["git"],"update":"Sep 23, 2020"}}},{"node":{"rawMarkdownBody":"\n\n\n어떠한 이유로 컴포넌트의 업데이트를 하고 싶지 않을 때 사용 할 수 있다.\n\n이전에는 `setState(null)`을 하더라도 컴포넌트가 업데이트 되었으나 React 16 부터는 업데이트가 되지 않는다.\n\n\n\n간단한 코드를 살펴보자\n\n\n\n```javascript\nconst MAX_CNT = 5;\n\nconst cntInrease = (state, props) => {\n  const { cnt } = state;\n  if (cnt < MAX_CNT) {\n    return {\n      cnt: cnt + 1\n    };\n  } else {\n    return null;\n  }\n};\n```\n\n위의 코드는 state를 변경해가며 카운트가 하나씩 증가하는 코드이고, `MAX_CNT`에 해당하는 값까지만 증가하도록 해놓았다.  \n`MAX_CNT` 이상은 `null`을 리턴한다.\n\n```javascript\nclass App extends Component {\n  state = {\n    cnt: 0\n  };\n\n  componentDidUpdate(){\n    console.log('componentDidUpdate');\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={() => this.setState(cntInrease)}>{this.state.cnt}</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n위의 코드를 살펴보면,  \n`componentDidUpdate` 라이프사이클 메소드를 이용하여 업데이트가 되는지를 확인하도록 콘솔로그를 작성했고,  \n버튼의 onClick 이벤트에 `setState`의 인자로 위에서 작성한 `cntIncreate` 함수를 넣었다.\n\n이제 작동을 확인해보면 `MAX_CNT` 값까지는 state가 변경되며 컴포넌트 또한 업데이트 되는 로그를 확인 할 수 있다.  \n`MAX_CNT`에 도달하면 이제 null이 리턴되면서 더 이상 업데이트가 되지 않는다.\n\n여기서 중요한 점은 setState(null)로 인해서 업데이트가 되지 않는 다는 점,  \n컴포넌트의 업데이트를 제어할 방법이 하나 추가되었다는 점이다.\n\n---\n\n## Reference\n\n- [React Blog](https://reactjs.org/blog/2017/09/26/react-v16.0.html#breaking-changes)\n- [Nomad Coders](academy.nomadcoders.co) - React 16 마스터하기\n","excerpt":"어떠한 이유로 컴포넌트의 업데이트를 하고 싶지 않을 때 사용 할 수 있다. 이전에는 을 하더라도 컴포넌트가 업데이트 되었으나 React 16 부터는 업데이트가 되지 않는다. 간단한 코드를 살펴보자 위의 코드는 state를 변경해가며 카운트가 하나씩 …","fields":{"slug":"/react-16-setstate-null/"},"frontmatter":{"date":"Nov 01, 2018","title":"React 16, Returning null from setState","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n리액트 16 에서는 LifeCycle에 많은 변화가 있었고 17에서는 더 많은 변화가 있을 것이라고 예고했다.\n\n이번에 새로 등장한 `componentDidCatch(error, info)` 라이프사이클 메소드를 이용해 에러를 관리하는 방법을 살펴보자.\n\n\n\n## 기본적인 사용법\n\n```javascript\nclass BoundaryError extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) return <h1>ERROR!</h1>;\n    else return this.props.children;\n  }\n}\n```\n\n```javascript\n<BoundaryError>\n    <Component1 />\n</BoundaryError>\n```\n\n위의 코드를 살펴보면 `componentDidCatch`에서 에러를 잡아 `setState`로 `hasError`값을 바꿔 에러 상태값을 관리하고  \n그 상태값에 따라 리턴을 달리해 에러시에는 에러 문구로 에러가 난 컴포넌트를 대신하게 된다.\n\n이렇게 하면 에러가 발생함에 따라 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.\n\n\n\n## HOC와 함께 사용하기\n\nHOC는 Higher-Order Components로 간단히 설명하면 컴포넌트를 감싸는 컴포넌트라고 할 수 있다.\n\nHOC에 대한 자세한 설명은 생략하고 Error Handling을 하는데 어떻게 사용하는지를 살펴보겠다.\n\n```javascript\nconst withErrorBoundary = WrappedComponent =>\n  class extends Component {\n    state = {\n      hasError: false\n    };\n    componentDidCatch(error) {\n      this.setState({ hasError: true });\n    }\n    render() {\n      if (this.state.hasError) return \"Sorry...\";\n      else return <WrappedComponent />;\n    }\n  };\n```\n\n위와 같이 클래스를 만드는 함수로 `withErrorBoundary`를 작성했다.\n\n```javascript\nconst Component1WithErrorBoundary = withErrorBoundary(Component1);\nconst Component2WithErrorBoundary = withErrorBoundary(Component2);\nconst Component3WithErrorBoundary = withErrorBoundary(Component3);\n```\n\n```javascript\nrender(){\n    return (\n    \t<>\n        \t<Component1WithErrorBoundary />\n    \t    <Component2WithErrorBoundary />\n\t        <Component3WithErrorBoundary />\n        </>\n    )\n}\n```\n\n이제 위와 같이 사용할 수 있는데 이렇게 되면 에러가 난 컴포넌트만 해당 컴포넌트가 아닌 'Sorry…' 문구가 출력되게 될 것이며, 에러로 인해 리액트 페이지 전체가 먹통이 되는 현상을 방지 할 수 있다.\n\n---\n\n## Reference\n\n- [React Documents](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html)\n- [Nomad Coders](academy.nomadcoders.co) - React 16 마스터하기\n","excerpt":"리액트 16 에서는 LifeCycle에 많은 변화가 있었고 17에서는 더 많은 변화가 있을 것이라고 예고했다. 이번에 새로 등장한  라이프사이클 메소드를 이용해 에러를 관리하는 방법을 살펴보자. 기본적인 사용법 위의 코드를 살펴보면 에서 에러를 잡아…","fields":{"slug":"/react-16-error-handling/"},"frontmatter":{"date":"Oct 31, 2018","title":"react 16, Error handling with HOC","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nPortals은 루트 리액트 컴포넌트가 아닌 외부의 DOM에 접근하여 변경할 수 있게 해준다.\n\n쉽게 말하면 react는 기본적으로 아래와 같이 `index.html`에 하나의 엘리먼트를 대상으로 마운트되어 그 곳에서만 변경이 가능하다. 그 외부의 엘리먼트를 대상으로 변경할 수 있게 해주는 것이 Portals이다.\n\n## Portals 기본 사용법\n\n```html\n<!-- index.html -->\n\n<div id=\"root\"/>\n```\n\n```javascript\n// index.js\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n```\n\n여기서 portals를 이용하면 `index.html`의 `div#root`이외에 접근하여 변경 할 수 있다.\n\n```html\n<!-- index.html -->\n<h1 id=\"title\"></h1>\n<div id=\"root\"/>\n```\n\nReact Scope안에 위치하지 않는 `h1#title` 엘리먼트를 만들어두고\n\n아래와 같이 리액트 코드를 작성한다.\n\n```javascript\n// App.js\n\nimport { createPortal } from 'react-dom'\n\nclass Portals extends Component {\n    render(){\n        return createPortal(\n            'Hello World!',\n            document.querySelector('h1.title')\n        );\n    }\n}\n\nclass App extends Component {\n    render(){\n        return (\n\t\t\t<>\n\t\t\t\t<Portals />\n            </>\n        )\n    }\n}\n```\n\n위를 보면 `react-dom`의 `createPortal` 메소드를 사용했다.\n\n```javascript react\nReactDOM.createPortal(child, container)\n```\n\n첫번째 인자는 렌더링 가능한 리액트 하위 요소가 되고,  \n두번째 인자는 타겟이 될 DOM 엘리먼트이다.\n\n그리고 해당 portals 컴포넌트를 App 컴포넌트 리턴에 포함시켜 주었다.\n\nProtals는 Modal 구현같은 곳에 유용하게 쓰일 수 있을 것 같다.\n\n---\n\n## Reference\n\n- [React Documents](https://reactjs.org/docs/portals.html)\n- [Nomad Coders](academy.nomadcoders.co) - React 16 마스터하기\n","excerpt":"Portals은 루트 리액트 컴포넌트가 아닌 외부의 DOM에 접근하여 변경할 수 있게 해준다. 쉽게 말하면 react는 기본적으로 아래와 같이 에 하나의 엘리먼트를 대상으로 마운트되어 그 곳에서만 변경이 가능하다. 그 외부의 엘리먼트를 대상으로 변경…","fields":{"slug":"/react-16-portals/"},"frontmatter":{"date":"Oct 31, 2018","title":"react 16, Portals","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\nReact 16 이전에서는 return 시 하나의 컴포넌트 또는 null만 가능했다.  \n그래서 wrapper를 쓰는 방식으로 div로 감싸던가 아니면 span을 이용하던지, 그것도 아니면 array를 쓰는 등 여러 불편한 방법을 사용했었다.\n\n하지만 16 부터는 fragment를 활용하여 여러 엘리먼트를 return 할 수 있다.\n\n```javascript\nclass ReturnStringType extends Component {\n    render(){\n        return 'Hello World'\n    }\n}\n\nclass Index extends Component {\n    render(){\n        return (\n\t\t\t<React.Fragment>\n            \t<Comp1 />\n\t\t\t\t<ReturnStringType />\n            </React.Fragment>\n        )\n    }\n}\n```\n\n위처럼 Fragment로 컴포넌트 엘리먼트와 String 타입 엘리먼트를 감싸보았다.\n\n이것을 브라우저 상에서 확인하면 Fragment는 확인이 되지 않고 두개의 엘리먼트만이 보이게 된다.\n\nShort Syntax로 `<> </>`와 같이 사용할 수도 있지만,  \nkey, attribute를 사용할 수 없고 호환성 이슈로 리액트 문서에서는 아직 권장하지는 않는다.\n\n---\n\n## Reference\n\n- [React Documents](https://reactjs.org/docs/fragments.html)\n- [Nomad Coders](academy.nomadcoders.co) - React 16 마스터하기\n","excerpt":"React 16 이전에서는 return 시 하나의 컴포넌트 또는 null만 가능했다. 그래서 wrapper를 쓰는 방식으로 div로 감싸던가 아니면 span을 이용하던지, 그것도 아니면 array를 쓰는 등 여러 불편한 방법을 사용했었다. 하지만 1…","fields":{"slug":"/react-16-fragments/"},"frontmatter":{"date":"Oct 31, 2018","title":"React 16, Fragments","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 설치\n\n우선 Homebrew 를 통해 gpg 패키지를 설치한다,\n\n```shell\n$ brew install gpg\n```\n\n추가로 gpg 키 관리 프로그램인 GPG-SUITE를 설치한다.\n\n```shell\n$ brew cask install gpg-suite\n```\n\n## key 생성\n\n키 생성 방법은 두가지가 있다.\n\n1. gpg-suite를 통한 설치\n2. 터미널내에서 설치\n\n1번의 경우 시스템 환경설정에서 확인 할 수 있는 GPG KeyChain을 통해 생성하는 방법이다.  \n본 글에서는 터미널에서 생성하는 방법을 소개하고 있기 때문에 1번의 방법은 [링크](https://medium.com/@star_zero/github%E3%81%AEgpg-key%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B-70e22874e533)를 확인해 보시기를 바란다.\n\n아래는 터미널에서 키를 생성하는 과정이다.\n\n우선 아래 명령어를 이용 키 생성 과정에 들어간다.\n\n```shell\n$ gpg --full-generate-key\n```\n\n아래 자세한 생성하는 과정이 나와있고, 간단히 요약하면 이러하다.\n\n- 암호화 방식 선택 (권장: 1)\n- 암호화 키 크기 선택 (권장: 4096)\n- 키 유효기간 설정 (권장: 0) // Enter 입력하여 패스\n- 이름, 이메일, 코멘트(공란 가능) 입력\n- 이후 보안 암호 문구 작성 창에서 암호 입력 (이후 첫 commit시 입력하는 암호로 쓰인다)\n\n```shell\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection? 1\n\n\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\n\n\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0)\n\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Junho Baik\nEmail address: junhobaik@gmail.com\nComment:\nYou selected this USER-ID:\n    \"Junho Baik <junhobaik@gmail.com>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n```\n\n위의 과정을 마치고 나면 키가 생성되었고,\n\n이제 아래 명령어(`gpg --list-secret-keys --keyid-format LONG`)를 이용하여 생성한 키를 확인한다.\n\n```shell\n$ gpg --list-secret-keys --keyid-format LONG\n\n-----------------------------------\nsec   rsa4096/ABCDE12345678900 2018-10-24 [SC]\n      AFWAEGWEGWAEDVADKAWGJIWRGLWJRGAIWALGRHRG\nuid                 [ultimate] Junho Baik <junhobaik@gmail.com>\nssb   rsa4096/AGRJIWGJWRGJIRWG 2018-10-24 [E]\n```\n\n위의 예제에서 `ABCDE12345678900`에 해당하는 부분을 복사하고 아래 명령어에 넣는다.\n\n```shell\n$ gpg --armor --export ABCDE12345678900\n```\n\n위 명령어를 입력한 후 출력되는 키를 복사한다,  \n`-----BEGIN PGP PUBLIC KEY BLOCK-----`부터 `-----END PGP PUBLIC KEY BLOCK——.`를 포함해서 모두 복사하여야 한다.\n\n## GitHub 에 GPG Key 등록\n\nGitHub - Settings - [SSH and GPG keys](https://github.com/settings/keys)\n\n위의 메뉴로 진입하여 GPG Keys 부분의 new GPG key 버튼을 클릭하고 복사한 키를 등록한다.\n\n## Git 에 GPG Key 등록\n\n아래 명령어를 통해 `~/.gitconfig`에 gpg 정보를 입력한다.\n\n여기서 `ABCDE12345678900`에 해당하는 것은 위에서 확인한 Key 부분이며, 본인의 것을 입력한다.\n\n```shell\n$ git config --global user.signingkey ABCDE12345678900\n$ git config --global gpg.program $(which gpg)\n```\n\n이제 등록이 되었고, 이후 commit 부터는 `-S` 플래그를 넣음으로 서명을 적용한 Commit 을 보낼 수 있다.\n\n```shell\n$ git commit -S\n```\n\n아래 명령어를 이용하면 `-S` 플래그를 번번히 넣지 않아도 항상 서명이 적용한 Commit 을 보내게 된다.\n\n```shell\n$ git config --global commit.gpgsign true\n```\n\n추가로 commit 시 오류가 발생한다면, 아래 내용을 `~/.zshrc` 또는 `~/.bashrc`에 추가해준다.\n\n```\nexport GPG_TTY=$(tty)\n```\n\n추가로 가끔씩 물어보는 GPG 패스워드를 묻지 않길 원하면 `~/.gnupg/gpg-agent.conf` 파일을 수정한다.\n\n```\ndefault-cache-ttl 31536000\nmaximum-cache-ttl 31536000\n```\n\nGPG2.1 이후에서는 `maximum-cache-ttl`이 `max-cache-ttl`로 바뀌었으니 버전에 따라 다르게 입력해주어야 한다.  \n보통 처음 gpg-agent.conf 파일을 열었을때 두 값이 있으므로 어떤 값으로 써야할 지 알 수 있다. 하지만 알 수 없을 경우 버전을 확인하여 올바른 값을 입력해야한다.  \n31536000는 1년에 해당하는 초(sec)값이다.\n\n---\n\n### References\n\n- [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/)\n- [KenjiAbe|GitHub の GPG Key を設定する](https://medium.com/@star_zero/github%E3%81%AEgpg-key%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B-70e22874e533)\n- [Keep GnuPG credentials cached for entire user session](https://superuser.com/questions/624343/keep-gnupg-credentials-cached-for-entire-user-session)\n","excerpt":"설치 우선 Homebrew 를 통해 gpg 패키지를 설치한다, 추가로 gpg 키 관리 프로그램인 GPG-SUITE를 설치한다. key 생성 키 생성 방법은 두가지가 있다. gpg-suite를 통한 설치 터미널내에서 설치 1번의 경우 시스템 환경설정에…","fields":{"slug":"/github-gpg-key/"},"frontmatter":{"date":"Oct 24, 2018","title":"GitHub에 GPG 서명 등록하기 (macOS)","tags":["github"],"update":"Jan 31, 2020"}}},{"node":{"rawMarkdownBody":"\n몇시간 전부터(현재 181023 04:41) github 가 이상하다,  \n5시간 전에는 로그인 부분이 이상이 있었다, 지금은 이부분은 해결되고 github page 를 업데이트해도 반영이 되지 않고 있다.  \n올해들어 세번정도 github 시스템 이상을 체험했던 것 같다...\n\n그럴 때 마다 들어가는 사이트가 있는데 github 에서 제공하는 github system status 페이지이다.  \n날자별 시스템 상태들이 어땠는지 확인 할 수 있고, 이상이 있을때는 어떻게 되어가는지 상황을 계속해서 업데이트해준다.\n\n--- \n\nGithub 의 시스템 상태는 아래 링크에서 확인 할 수 있다.\n\n[GitHub System Status](https://status.github.com/)\n","excerpt":"몇시간 전부터(현재 181023 04:41) github 가 이상하다, 5시간 전에는 로그인 부분이 이상이 있었다, 지금은 이부분은 해결되고 github page 를 업데이트해도 반영이 되지 않고 있다. 올해들어 세번정도 github 시스템 이상을 …","fields":{"slug":"/github-system-status/"},"frontmatter":{"date":"Oct 23, 2018","title":"GitHub 서버 오류, 시스템 이상할 때 상태를 확인하기","tags":["git","github"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 라디오 버튼의 스타일 바꾸기\n\n검색을 통해 쉽게 얻을 수 있는 라디오 버튼의 스타일 바꾸는 것은 대부분 :after, :before 를 사용하는데,  \n그렇게 되면 원하는대로 바꾸기가 쉽지 않고 원래의 개체가 노출되어 위치 조절을 해야하는 등 어려움이 있는데 아래 방법으로는 깔끔하고 원하는대로 가능하다.\ncss `appearence: none`을 시작으로 라디오 버튼을 수정하는 방법이다.\n\n### HTML\n\n```html\n<div class=\"radio-wrap\">\n  <input type=\"radio\" name=\"a\" id=\"a\"/>\n  <label for=\"a\">A</label>\n</div>\n\n<div class=\"radio-wrap\">\n  <input type=\"radio\" name=\"a\" id=\"a\"/>\n  <label for=\"a\">A</label>\n</div>\n```\n\n### CSS\n\n```css\ndiv.radio-wrap {\n  display: inline-flex;\n  align-items: center;\n}\n\ninput[type='radio'],\ninput[type='radio']:checked {\n  appearance: none;\n  width: 0.9rem;\n  height: 0.9rem;\n  border-radius: 100%;\n  margin-right: 0.1rem;\n}\n\ninput[type='radio'] {\n  background-color: $white-color;\n  border: 2px solid $font-color-3;\n}\ninput[type='radio']:checked {\n  background-color: $font-color-2;\n}\n```\n\n### 정리\n\n`input[type='radio']`, `input[type='radio']:checked`에  \n`appearance: none`을 함으로 모든 스타일이 제거된다.\n\n그렇게 되면 세로를 기준으로 가운데 정렬되어 텍스트와 나란히 있던 것이 무너지게 된다.  \n이를 해결하기 위해 div로 감싸고 해당 div에 스타일을 추가한다.  \n위 css 코드의 `div.radio-wrap{...}` Flex Diplay 스타일 적용으로 가운데 정렬을 할 수 있다.\n\n`input[type='radio']`, `input[type='radio']:checked`에  \n라디오 버튼의 크기 및 `border-radius` 등 주고싶은 공통 스타일을 주고 이제 각각의 `input[type='radio']`, `input[type='radio']:checked`에 원하는 색상, 테두리 등의 스타일을 적용해주면 된다.\n","excerpt":"라디오 버튼의 스타일 바꾸기 검색을 통해 쉽게 얻을 수 있는 라디오 버튼의 스타일 바꾸는 것은 대부분 :after, :before 를 사용하는데, 그렇게 되면 원하는대로 바꾸기가 쉽지 않고 원래의 개체가 노출되어 위치 조절을 해야하는 등 어려움이 있…","fields":{"slug":"/radio-style-change/"},"frontmatter":{"date":"Oct 19, 2018","title":"Radio Button의 색상 등 css를 바꾸기","tags":["css"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 블로그 개편, use Gatsby\n\n기존 Jekyll을 이용 다른 사람의 테마를 사용하여 블로그를 운영해오고 있었습니다만  \nJekyll로 제작된 블로그를 마음대로 수정하기에는 루비라던가 익숙하지 않은 것이 많아 고민이었는데 마침 Gatsby라는 정적 사이트 제작 프레임워크를 찾았고 개편을 마음 먹었습니다.\n\nGatsby는 **React**와 **Webpack**을 베이스로 제작되어서 그 점이 가장 마음에 들었고 편리하게 사이트를 구축하기 위한 Plugin도 많이 제공되고 있었습니다.  \n비록 테마나 구글링을 통해 얻을 수 있는 정보는 Jekyll보다 많이 부족하지만 애초에 테마가 아닌 처음부터 직접 구현하고 싶었기에 큰 문제는 아니었습니다.\n\n일단 시작은 Gatsby에서 제공하는 기본 starter인 [gatsby-starter-default](http://gatsbyjs.github.io/gatsby-starter-default/)\n를 clone하여 비어있는 화면 부터 시작했고 천천히 개발하기 시작하여 지금 이러한 블로그로 개발하였습니다.\n\n\n### Built With:\n\n개발에 사용된 기술은 크게 아래와 같습니다.\n\n- Gatsby.js\n- React\n- Webpack\n- GraphQL\n- SASS(SCSS)\n- typography\n\n### 후기\n\n`GraphQL`  \n지금까지 개발면서 일단 처음에 GraphQL을 접하면서 모르는 것이기도 했고 인터넷에 정보도 부족해 시작이 어려웠습니다. 끼워맞추듯 개발하며 이해하다보니 지금도 모르는 상태라고 할 수 있지만 조만간 제대로 한번 배워볼 예정입니다.\n\n`Theme?`  \n혼자 사용하는 것이 아닌 모두 사용할 수 있게 테마 형식으로 제작해 보려 합니다. 아직은 디테일한 기능들을 구현할게 남았고 그 이후에 코드 최적화를 하면서 개인화하여 쓸 수 있도록 수정할 예정입니다.\n\n`반응형 웹사이트`\n기존에도 항상 반응형으로 제작을 하긴 했지만 이번엔 여러모로 테스트를 하다 보니 쉽지 않다는 것을 다시금 느꼈습니다. 쉽게 orientation으로만 하려고 했더니 안드로이드에서는 가상 키보드가 나오면서 키보드가 차지한 부분이 감소되며 세로 비율이었던 orientation이 가로로 바뀌게 되어 모바일에 최적화된 화면에서 데스크탑 최적화된 화면이 출력되게 되는 문제를 겪기도 했습니다.\n\n`SEO, 웹표준`  \n기존의 Jekyll은 테마를 받아 사용하다보니 검색최적화나 Google Analytics가 다 적용된 상태였습니다만 이번에 처음부터 개발하다보니 웹표준과 SEO에 대해서도 신경쓰면서 하게 되었습니다.  \n\n- 웹사이트 점수 측정 100/100 [확인하기](https://website.grader.com/results/junhobaik.github.io)\n- NAVER 웹마스터 사이트 최적화 '최고에요' 등급\n\n웹표준에 관해서는 아직 부족한 게 많은 것 같으니 공부하고 수정해야 할 것 같고, SEO부분에 대해서는 구현을 마쳤고 이번에 많이 알게되었습니다.\n\n### Github\n\n[Github Repository](https://github.com/junhobaik/junhobaik.github.io)\n","excerpt":"블로그 개편, use Gatsby 기존 Jekyll을 이용 다른 사람의 테마를 사용하여 블로그를 운영해오고 있었습니다만 Jekyll로 제작된 블로그를 마음대로 수정하기에는 루비라던가 익숙하지 않은 것이 많아 고민이었는데 마침 Gatsby라는 정적 사…","fields":{"slug":"/new-blog-notice/"},"frontmatter":{"date":"Sep 21, 2018","title":"블로그 개편 (Jekyll -> Gatsby)","tags":["gatsby","blog"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## ₩ -> `\n코드를 작성하거나 마크다운 문서를 작성할때 한글키 입력 상태일때 키보드의 (~`)키를 누르면 ₩가 입력되는 것이 별거 아닌 것 같지만 상당히 불편한 요소로 작용합니다.\n\n생각보다 원화(₩) 문자를 쓸 일이 없으므로 아예 백쿼트(`) 문자가 입력되도록 바꿔보도록하겠습니다.\n\n방법은 아래 블로그를 참고하였습니다.\n\n[A2 Devlog](https://ani2life.com/wp/?p=1753)\n","excerpt":"₩ -> ` 코드를 작성하거나 마크다운 문서를 작성할때 한글키 입력 상태일때 키보드의 (~`)키를 누르면 ₩가 입력되는 것이 별거 아닌 것 같지만 상당히 불편한 요소로 작용합니다. 생각보다 원화(₩) 문자를 쓸 일이 없으므로 아예 백쿼트(`) 문자가…","fields":{"slug":"/mac-keybind-won-bq/"},"frontmatter":{"date":"Jul 02, 2018","title":"mac의 한글키에서 원화(₩)가 아닌 백쿼트(`)가 입력되도록 하기","tags":["mac"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nAngular 개발을 시작하기 전, 개발에 앞서 개발 환경 구성과 간단한 사용을 먼저 해보자.\n\n\n## TypeScript\n\nAugular를 본격적으로 하기 전 TypeScript를 설치하기로 하자.\n\n타입스크립트는 동적 타입 언어인 자바스크립트에 명시적으로 타입 선언이 가능하도록 정적 타입 언어의 장점을 가지게 된 언어이다.  \n\nAngular(!= AngularJS)는 TypeScript를 베이스로 만들어졌고,  \n왜 앵귤러에 타입스크립트인지는 아래 링크의 글을 읽어보면 좋을 것이다.\n\n[Angular: Why TypeScript](https://github.com/not-for-me/til/blob/master/angular2/translations/writing_angular2_in_typescript.md)\n\n### 설치\n\n아래 명령어를 사용하여 타입스크립트를 설치하자.\n\n```shell\n$ npm install -g typescript\n```\n\n글로벌 설치를 선호하지 않는다면 프로젝트내 설치하는 방법도 물론 괜찮다.\n\n글로버 설치를 했다면 이제 `tsc test.ts`와 같이 명령어로 타입스크립트를 컴파일 할 수 있다.\n\n만약 프로젝트 내 설치를 했다면 npm script에서 `\"tsc test.ts\"` 와 같이 스크립트를 추가하거나, \n콘솔 환경에서 `node_modules/.bin/tsc test.ts`와 같이 컴파일이 가능하다.\n\n아래 기술하는 내용들은 글로벌 설치를 전제로 설명하게 된다.\n\n### 설정\n\n```shell\n$ tsc --init\n```\n\n이제 프로젝트 내에서 위 명령어로 설정 파일(`tsconfig.json`)을 생성할 수 있다.\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n      ...\n```\n\n어떤 자바스크립트 버전으로 컴파일 할건지 등 설정 파일 안에는 다양한 설정이 가능한데 앵귤러 개발 환경 구성 포스팅이므로 자세한 설정 방법은 생략하겠다.\n\n### TSLint\n\n추가적으로 TSLint를 사용하여 Lint 기능을 사용하는 것도 좋은 방법이다.\n\nnpm으로 설치하거나, Visual Studio Code와 같이 타입스크립트와 호환이 좋은 에디터에서 TSLint를 사용하면 좀 더 판하게 개발 할 수 있다.\n\n### 간단한 사용\n\n자바스크립트를 쓰는 것과의 차이점을 위해서 매우 간단한 예제를 살펴보자.\n\n```javascript\nconst n = 1;\nconst s = '1';\n\nconsole.log(n == s);\n```\n숫자 1과 문자 1을 비교하는 (Strict 비교 아님) 코드가 있고\n\n만약 이것이 자바스크립트 파일(.js)라고 가정하면 결과는 **true**가 될 것이다.  \n그리고 이것이 타입스크립트 파일(.ts)라고 가정하면 아래와 같은 결과를 얻을 수 있다.  \n\n우선 TSLint가 `==`가 아닌 `===`를 사용하라고 알려줄 것이고,  \n그리고 무시하고 컴파일을 진행한다면 아래와 같은 에러가 발생한다.\n\n```shell\nerror TS2365: Operator '==' cannot be applied to types '1' and '\"1\"'.\n```\n\n숫자와 문자열을 비교할 수 없다는 의미이다.\n\n클래스 등 좀 더 다양한 예제는 아래 링크에서 확인하면 좋다.\n\n[TypeScript PlayGround](http://www.typescriptlang.org/play/)\n\n\n\n\n\n\n\n## Angular CLI\n\n### 설치 및 프로젝트 생성\n\nAngular CLI를 이용해 앵귤러 개발을 시작하는 방법이다.\n\n```shell\n$ npm install @angular/cli -g\n$ ng --version\n```\n\n`ng new` 명령어를 통해 기본적인 코드와 설정이 되어있는 앵귤러 프로젝트를 생성할 수 있다.\n\n```shell\n$ ng new auglar-start-cli\n$ cd angular-start-cli\n```\n\n### 개발 서버\n\n이제 이렇게 생성된 프로젝트에서 아래 명령어를 통해 로컬 개발 서버를 켤 수 있다.\n\n```shell\n$ ng serve\n** Angular Live Development Server is listening on localhost: 4200, open your browser on http://localhost:4200/ **\n```\n\n그리고 출력된 주소로 가서 정상적으로 출력이 되고 있는지 확인해보자.\n\n### 기타 명령어\n\n생성된 프로젝트에서 컴포넌트 및 서비스를 생성한다면 직접 하는 방법도 있지만,  \nAngular CLI의 기본 구조대로 뷰, 컴포넌트(or Service), 스타일, 테스트 파일을 생성해주는 명령어가 있다.\n\n```shell\n# 컴포넌트 생성\n$ ng generate component COMPONENT_NAME\n# 서비스 생성\n$ ng g service SERVICE_NAME\n# generate는 g로 줄여 사용할 수 있다.\n```\n\n예로 이렇게 생성된 컴포넌트는 아래와 같은 구조를 가진다\n```javascript\n- home\n  - home.component.html // View\n  - home.component.ts // Component\n  - home.component.spec.ts // Test\n  - home.component.css // Style\n```\n\n---\n\n## References\n- 서적 '앵귤러 첫걸음' 한빛소프트\n- [Angular official](https://angular.io/guide/quickstart)\n","excerpt":"Angular 개발을 시작하기 전, 개발에 앞서 개발 환경 구성과 간단한 사용을 먼저 해보자. TypeScript Augular를 본격적으로 하기 전 TypeScript를 설치하기로 하자. 타입스크립트는 동적 타입 언어인 자바스크립트에 명시적으로 타…","fields":{"slug":"/angular-setup/"},"frontmatter":{"date":"May 08, 2018","title":"Angular 시작하기 (개발 환경 구성)","tags":["angular"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\ncolors 모듈은 우리가 흔히 사용하는 `console.log`의 출력문에 색상을 입힐 수 있다.\n\n## 설치\n\n```shell\nnpm install --save colors\n```\n\n## 사용하기\n\n```javascript\nconst colors = require(\"colors\");\n```\n\n기본적인 사용.\n\n```javascript\nconsole.log(\"hello world\".red); // 빨간색 글씨\nconsole.log(\"hello world\".underline); // 밑줄\nconsole.log(\"hello world\".underline.blue); // 밑줄있는 파란색 글씨\nconsole.log(\"hello world\".inverse.yellow); // 배경이 노란색인 검정 글씨\nconsole.log(\"hello world\".rainbow); // 무지개색 글씨\nconsole.log(\"hello world\".trap); // 알아보기 힘든 모양의 글씨 (ƕɘĹĹʘ ШǾ®Ĺԁ)\n```\n\n아래와 같은 사용도 가능하다.\n\n```javascript\nconsole.log(colors.green(\"hello world\")); // 초록색 글씨\n```\n\n아래와 같은 방식으로 커스텀 테마를 지정해 사용할 수도 있다.\n\n```javascript\ncolors.setTheme({\n  error: 'red',\n  warn: 'yellow',\n});\n\nconsole.log('ERROR!'.error); // 빨간색 글씨\nconsole.log('Warning.'.warn); // 노랜색 글씨\n```\n\n```javascript\ncolors.setTheme({\n  test: ['blue', 'inverse']\n});\n\nconsole.log('testing'.test); // 파란색 배경의 검정 글씨\n```\n","excerpt":"colors 모듈은 우리가 흔히 사용하는 의 출력문에 색상을 입힐 수 있다. 설치 사용하기 기본적인 사용. 아래와 같은 사용도 가능하다. 아래와 같은 방식으로 커스텀 테마를 지정해 사용할 수도 있다.","fields":{"slug":"/colors-module/"},"frontmatter":{"date":"May 06, 2018","title":"콘솔에 색상을 입혀주는 'Colors' 모듈 사용해보기","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n처음 html, javascript를 공부 할 때는 script 태그는 head 태그에 위치하게끔 하는 코드나,  \n또는 body 태그의 어디에 위치하건 그 위치에 대해 별 의미를 두지 않는 코드들이 많았다.\n\n하지만 지금은 항상 스크립트는 body태그의 최하단에 넣는 것이 습관화되었고 그 이유도 알고 있다.  \n그런데 이제와서 이 글을 쓰는 이유는 **script 태그의 async / defer**를 공부하게 되면서 새로 정리해보고자 쓰게 되었다.\n\n## 브라우저의 동작과 script 위치의 2가지 이유\n\nHTML에서 script 태그가 body 태그 안의 최하단에 위치해야 하는 이유는 브라우저의 동작 방식과 연관이 있다.\n\n1. HTML을 읽기 시작한다.\n2. HTML을 파싱한다 (parsing: 컴퓨터가 읽을 수 있는 코드로 바꾸는 작업)\n3. DOM 트리 생성.\n4. Render 트리가 생성 (DOM tree + CSS의 CSSOM 트리 결합)\n5. Display(브라우저)에 표시된다.\n\n여기서 중요하게 봐야할 구간은 1~2의 과정이다.\n\nHTML을 읽어 내려가는 과정에서 script 요소를 만나면 파싱을 중단,  \n중단 된 상태에서 자바스크립트 코드(파일)을 로드 후 자바스크립트 코드를 파싱한다.  \n그리고 다시 HTML 파싱이 계속된다.\n\n결론적으로 HTML을 읽는 과정에서 자바스크립트 로드와 파싱을 위해서 중단되는 시점이 생기고,\n그에 따라 그 만큼 Display에 표시되는 것이 지연된다.\n\n또 다른 이유로 **HTML 파싱이 끝나고 DOM 트리가 생기기 전**에 자바스크립트가 실행되어 DOM 조작을 할 경우 에러가 발생할 수 있다는 점이다. 아래 예제를 보자.\n\n```javascript\nconst appEl = document.querySelector(.app);\n```\n\n우리는 위와 같이 DOM에 관한 조작을 무수히 할 것인데 DOM 트리가 렌더링 되기 전이라면 `appEl`은 `undefined`이다. 이러한 오류점이 발생한 이유를 모르거나, 디버깅을 못한다면 이를 해결하는데 꽤나 애먹을 것이다.\n\n이로 알 수 있는 script 태그가 body 태그 최하단에 위치해야하는 2가지 이유\n- HTML을 읽는 과정에서 중간에 스크립트를 만나면 스크립트 로드와 실행을 위해서 중단되는 시점이 생기고, 그에 따라 그 만큼 Display에 표시되는 것이 지연되게 된다.\n- HTML 파싱이 끝나고 DOM 트리가 생기기 전 자바스크립트가 실행되어 DOM 조작을 할 경우 에러가 발생할 수 있다.\n\n이렇게 body 태그 최하단에 위치해야하는 이유를 알아봤고,  \n다음으로는 body태그 최하단에 위치하지 않고도 이러한 이유를 방지하기 위해서 사용하는 **script 태그의 async / defer 속성**을 알아보자.\n\n## script 태그의 async / defer 속성\n\n기본적으로 script 태그는 위에서 작성한 브라우저의 동작 방식대로 불러진다.  \n하지만 async / defer 속성을 사용함으로 다르게 script 태그를 불러올 수 있게 된다.\n\n```html\n<script async src=\"index.js\"></script>\n<script defer src=\"index.js\"></script>\n```\n\nasync 또는 defer 속성을 사용하면 공통적으로 **HTML 파싱과 동시에 스크립트 로드**가 이루어진다.\n\n그 후에,  \n**async**의 경우에는 **HTML 파싱이 끝나지 않더라도 스크립트 로드가 완료되는 즉시 스크립트가 실행**된다.  \n**defer**의 경우에는 **HTML 파싱이 모두 끝난 뒤 스크립트가 실행**된다.\n\n추가적으로 async의 경우에는 비동기적으로 여러 스크립트를 로드, 실행하기 때문에 스크립트의 순서에 상관없이 실행될 수 있다. 따라서 실행 순서가 서로 영향이 있는 스크립트들을 사용할 때에는 주의해서 사용해야 한다. (동기적인 실행을 위해서는 `async=false`로 설정하여 순서대로 실행할 수 있다.) defer의 경우에는 실행은 순서대로 실행된다.\n\n결론적으로,  \n\nscript 태그가 body 태그의 최하단에 위치한다면 async와 defer가 필요없다고 할 수 있다.  \n하지만 그렇지 않을 경우 async와 defer를 활용해서 볼 수 있는 효과와 주의해야할 점을 정리해보면 아래와 같다.\n\n**async** 또는 **defer** 중 어느것을 사용하더라도 **HTML 파싱**과 **스크립트 로드**가 동시에 진행되므로 **HTML 파싱이 완료되는 시간을 줄일 수 있다**  \n\n**async**는 HTML 파싱과 동시에 스크립트 로드를 하지만 스크립트 실행은 HTML 파싱이 중지된 상태에서 되기 때문에 중간에 HTML 파싱이 멈추는 시점이 생길 수 있다. 다만 실행 순서를 감안해야 한다.\n\n**defer**는 HTML 파싱과 동시에 스크립트를 로드하고 HTML 파싱이 완료 된 후 스크립트가 실행된다. 위에서 설명한 script 태그가 body 태그의 최하단에 위치해야하는 이유에 모두 적합하다.\n\n---\n\n## References\n- [PoiemaWeb](http://poiemaweb.com/js-syntax-basics)\n- [MDN|<script>](https://developer.mozilla.org/ko/docs/Web/HTML/Element/script)\n","excerpt":"처음 html, javascript를 공부 할 때는 script 태그는 head 태그에 위치하게끔 하는 코드나, 또는 body 태그의 어디에 위치하건 그 위치에 대해 별 의미를 두지 않는 코드들이 많았다. 하지만 지금은 항상 스크립트는 body태그의…","fields":{"slug":"/js-script-position/"},"frontmatter":{"date":"May 02, 2018","title":"HTML에서 script태그는 어디에 위치해야 할까?","tags":["javascript","html"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n기존 Jekyll을 이용한 블로그는 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다.  \nJekyll의 minimal-mistakes테마를 이용한 블로그를 만들고 싶다면 아래 게시물은 아직 유효합니다.\n\n---\n\n[Jekyll 블로그 테마 적용하기 (minimal-mistakes)](https://junhobaik.github.io/jekyll-apply-theme/)  \n위 포스트를 먼저보시기를 추천드립니다.  \n위 포스트를 보고 어려움을 느끼거나 더 쉽게 적용하고 싶은 분들을 위한 방법을 적은 포스팅입니다.\n\n---\n\n~~이제 지금 보고 계시는 블로그가 맘에 들고 그대로 사용하시고 싶다,~~  \n~~이 블로그를 그대로 가져와 편집해 사용하고 싶다,~~  \n또는 기존의 테마 적용 포스트가 너무 어렵다.\n\n이러한 분들이 사용 할 수 있도록\n지금의 블로그에서 포스트들을 제거하고 개인 설정을 초기화 한 것을 준비해두었고\n그것을 받아서 개인 설정만 채워주면 사용 할 수 있는 방법을 소개합니다.  \n(지금 보고 있는 블로그와 차이가 있을 수 있습니다,\n2018.04 시점의 블로그를 기준으로 합니다.)\n\n일단 jekyll가 설치 되어있고 Github 계정이 필요하며,\n여기에 대한 것은 생략하고 테마 적용 부분에 대해서만 기술하습니다.  \n참고 : [Jekyll 블로그 시작하기 (MacOS, GitHub Page)](https://junhobaik.github.io/start-jekyll-blog/)\n\n\n## 적용하기\n\n[junhobaik/junhobaik.github.io](https://github.com/junhobaik/junhobaik.github.io)\n\n우선 위의 링크로 들어가 우측 상단의 Fork 버튼을 눌러 Fork 합니다.\n\n그렇다면 자신의 계정에 `junhobaik.github.io` 리포지토리가 생기게 되고,  \n리포지토리 페이지에서 `clone or download`에서 링크를 확인합니다 (ex. https://github.com/username/junhobaik.github.io.git)\n\n이제 terminal을 열고 clone 과 동시에 필요한 작업을 합니다.\n\n```shell\n# 아래 링크는 위에 clone or download에서 확인한 링크를 넣는다.\n$ git clone https://github.com/username/junhobaik.github.io.git blog\n$ cd blog\n$ git reset origin/dev --hard\n$ npm install\n# bundle 명령어 수행 시 sudo 권한으로 컴퓨터 비밀번호를 요구 할 수 있습니다.\n$ bundle\n$ git push -f\n```\n\n이제 다시 해당 리포지토리 페이지에 들어가서 Settings으로 들어갑니다.\n\nRepository name을 username.github.io로 변경합니다.  \n(여기서 username은 자신의 github username을 입력합니다.)\n\n리포지토리 이름이 변경된 것을 확인하시고,\n다시 설정 페이지에서 'GitHub Pages'란을 확인합니다.\n여기에 `Your site is published at https://username.github.io/` 라는 초록색 배경의 문구가 나왔다면 정상적으로 적용 된 것입니다. \n\n이제 해당 주소로 블로그를 볼 수 있습니다.  \n해당 주소에서 에러 페이지를 만난다면 약간의 시간이 필요할 수 있으니 조금만 기다려보세요.\n\n여기까지 하셨다면 [Jekyll 블로그 테마 적용하기 (minimal-mistakes)](https://junhobaik.github.io/jekyll-apply-theme/) 해당 포스트에서 **테마 설정하기**에서 **테마 스킨**부터 **댓글 설정**까지 개인 설정을 적용해주면 이제 포스트를 작성하고 블로그를 시작하면 됩니다.\n","excerpt":"기존 Jekyll을 이용한 블로그는 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다. Jekyll의 minimal-mistakes테마를 이용한 블로그를 만들고 싶다면 아래 게시물은 아직 유효합니다. Jekyll 블로그 테마 적용하기…","fields":{"slug":"/jekyll-apply-theme-simple/"},"frontmatter":{"date":"Apr 28, 2018","title":"Jekyll 블로그 테마 '쉽게' 적용하기 (minimal-mistakes)","tags":["blog","jekyll"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nJavascript Hoisting에 대해 다시 살펴보던 도중, 예전에 공부할땐 var를 대상으로 공부했으니 깨닫지 못했는데 이번에 let, const를 가지고 해보니...  \n호이스팅이 되지 않았다. (정확히 말하면 호이스팅이 되지 않는 것은 아니다.)\n\n그래서 이제 어떻게 된건지 알아보자. (Hoisting의 개념과 Block-Scope 개념을 기본적으로 알고 있어야 이해가 가능하다.)\n\n## 기존의 Hoisting\n\n```javascript\nconsole.log(a);\nvar a = 10;\n```\n\n호이스팅 후 =>\n\n```javascript\nvar a;\nconsole.log(a); // undefinded\na = 10;\n```\n\n호이스팅이 적용된 코드는 위와 같고 따라서 undefinded가 출력된다.\n\n## let, const의 Hoisting\n\n```javascript\nconsole.log(a);\nlet a = 10;\n```\n\n이렇게 let으로 바꾼다면 결과는\n\n```shell\nUncaught ReferenceError: a is not defined\n```\n\n위와 같은 a가 정의되지 않았다는 레퍼런스 에러가 발생한다,  \n결국 a 변수 선언이 위로 호이스팅되지 않았다는 이야기가 된다.\n\n하지만 그렇지 않다.\n아래 예제를 보면 호이스팅이 안되는게 아니라는 것을 알 수 있다.\n\n```javascript\nlet a = 10;\n\n{\n  console.log(a);\n}\n```\n\n위 예제는 당연하게도 `10`이 출력된다.\n이제 아래 예제를 보자\n\n```javascript\nlet a = 10;\n{\n  console.log(a);\n  let a = 20;\n}\n```\n\n호이스팅이 되지 않는다면 위 코드 그대로 실행되어 10이 출력되는 것이 정상일 것이다.  \n그러나 여기서는 아래와 같이 에러가 출력된다.\n\n```shell\nUncaught ReferenceError: a is not defined\n```\n\n결국 let, const와 같이 ES6 선언도 호이스팅의 대상이기 때문에 위에서는 두번째 let의 블록 스코프안에서 호이스팅이 이뤄서 console.log에서 에러가 발생하게 된 것이다.\n\n그렇다면 이러한 에러가 발생하는 이유는 무엇일까,\n\n우선 var 키워드의 경우를 살펴보자,  \n```javascript\nvar a = 10;\n```\nvar로 선언된 변수는  \n[선언 - 초기화 - 할당] 의 단계 중  \n[선언 - 초기화]가 한번에 이루어지고 다음에 [할당]이 되게 된다.\n\n1. [선언 - 초기화]\n2. [할당]\n\n그에 반해 let/const 키워드는 다르게 실행된다.  \n선언, 초기화, 할당이 따로 이루어지고 **TDZ(Temporal Dead Zone)**라는 것이 개입한다.\n\n과정은 아래와 같다.\n\n1. [선언]\n2. [TDZ]\n3. [초기화]\n4. [할당]\n\n초기화(변수가 메모리에 할당되며 undefined로 초기화되는 과정)가 되기 전에 변수에 접근하려 한다면 **TDZ**에 의해서 에러가 발생하게 된다.\n\n```javascript\nvar a;\nconsole.log(a);\na = 10;\n```\n```javascript\nlet a;\nconsole.log(a);\na = 10;\n```\n\n위처럼 호이스팅 된 코드를 보면 변수에 접근하는 데 있어  \n기존 var 키워드는 선언과 초기화가 함께 되었으므로 접근하여도 정상적으로 undefined가 출력된다.  \n하지만 let/const 키워드는 선언만 호이스팅 되고 그것은 초기화 이전이므로 접근하려 한다면 TDZ에 의해서 에러가 발생하는 것이라고 볼 수 있다.\n\n여기까지 let/const의 관점에서의 Hoisting에 대해 포스팅해보았다.  \nlet/const를 사용하면서 조금 더 엄격한 자바스크립트를 작성할 수 있게 되었고 그로 인해 예기치 않은 오류를 작성하는 상황을 줄일 수 있게 된 것 같다.\n\n---\n\n## References\n\n- [let, const와 블록 레벨 스코프](http://poiemaweb.com/es6-block-scope)\n- [let과 const는 호이스팅 될까?](https://medium.com/korbit-engineering/let%EA%B3%BC-const%EB%8A%94-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%90%A0%EA%B9%8C-72fcf2fac365)\n","excerpt":"Javascript Hoisting에 대해 다시 살펴보던 도중, 예전에 공부할땐 var를 대상으로 공부했으니 깨닫지 못했는데 이번에 let, const를 가지고 해보니... 호이스팅이 되지 않았다. (정확히 말하면 호이스팅이 되지 않는 것은 아니다.…","fields":{"slug":"/js-let-cont-hoisting/"},"frontmatter":{"date":"Apr 26, 2018","title":"ES6, Hoisting으로 다시 보는 let, const","tags":["ES6","javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n[**Netflix AutoSkip**][1]\n\n넷플릭스 인트로, 줄거리 자동 스킵  \n다음 에피소드 재생 대기 시간 없이 바로 재생\n\n---\n\n넷플릭스를 런칭때부터 쭈욱 쓰던 입장으로 항상 불편했던 것이 있는데,  \n인트로 영상이 자동으로 스킵되지 않는다는 것이다. 스킵 버튼이 있긴하지만 수동으로 눌러줘야 한다.  \n그리고 정주행을 하면서 한 에피소드가 끝나고 다음 에피소드 재생까지는 대기 시간 5초 또는 15초가 있는데 정주행에선 그 것 조차 기다리기 싫을때가 있다.\n\n얼마 전 부터는 영상의 맨 처음이 줄거리나 인트로인 경우엔 그 다음 부터 재생이 되는 경우도 있지만  \n대부분이 에피소드가 시작하고 얼마 후에 인트로가 나오는 형식이기에 인트로가 긴 경우에는 멀리서 시청할 경우 컴퓨터 앞까지 가서 스킵 버튼을 누르곤 했다.\n\n그 불편함을 없애기 위해 간단한 프로그램을 하나 만들었다.\n\n---\n\n기능은 간단하다.\n\n- 인트로, 줄거리 스킵 버튼을 자동으로 눌러지게 한다.\n- 다음 에피소드 재생 버튼을 자동으로 눌러지게 한다.\n\n설정을 통해 각 스킵 설정들을 온오프할 수 있다.\n\n---\n\n다운로드는 아래 링크를 통해 가능하다.\n\n[Netflix AutoSkip 크롬 웹스토어 바로가기][1]\n\n\n[1]: https://chrome.google.com/webstore/detail/pfcombngcgnehkbdoafkhdcfdmklboai\n","excerpt":"Netflix AutoSkip 넷플릭스 인트로, 줄거리 자동 스킵 다음 에피소드 재생 대기 시간 없이 바로 재생 넷플릭스를 런칭때부터 쭈욱 쓰던 입장으로 항상 불편했던 것이 있는데, 인트로 영상이 자동으로 스킵되지 않는다는 것이다. 스킵 버튼이 있긴…","fields":{"slug":"/netflix-autoskip/"},"frontmatter":{"date":"Apr 06, 2018","title":"넷플릭스 정주행을 위한 인트로 자동 스킵 크롬 확장 프로그램 (Netflix AutoSkip)","tags":["netflix"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n주로 CRA(create-react-app)을 이용한 리액트 개발을 주로 해왔고 그로 인해 웹팩(Webpack) 번들러를 통해 간단한 설정 변경 등을 해왔는데 이번에 새로운 번들러인 파셀(Parcel)을 알게되었다.\n\n공식 홈페이지의 헤드라인부터 **불꽃 튀게 빠르고 설정이 필요 없는 웹 애플리케이션 번들러**이다.  \n사용해보고나니 비교적 무거운 웹팩보다는 빠르다는게 느껴졌고 복잡했던 설정법보다는 쉽게 설정이 가능한 번들러였다. minify, hot module replacement와 같이 기본적으로 필요한 기능은 거의 포함되어있고 가벼우니 개인 소규모 프로젝트에는 좋을 것 같다는 생각이 들었다.\n\n\n\n## Parcel 시작하기\n\n[공식 홈페이지](https://parceljs.org/)\n\n일단 파셀을 사용하기 위해 글로벌 설치해보자\n```shell\n$ npm install -g parcel-bundler\n```\n\n다음으로 우선 git과 npm을 init하자\n```shell\n$ git init\n$ npm init\n```\n\n`index.html`, `index.js` 파일을 준비하고\n```html\n<!-- index.html -->\n<body>\n  <div id=\"root\"></div>\n  <script src=\"./index.js\"></script>\n</body>\n```\n위와 같이 js파일을 연결해준다.  \ndiv#root는 후에 React를 사용하기 위한 것이다.\n\n그리고 파셀 명령어로 개발 서버를 켜주면 파셀을 사용할 준비가 된 것이다.\n\n```shell\n$ parcel index.html\n\nServer running at http://localhost:1234\nBuilt in 9ms.\n```\n\nNPM Script에도 추가해두면 편리하게 사용이 가능하다.\n```json\n// package.json\n  \"scripts\": {\n    \"start\": \"parcel index.html\"\n  }\n```\n\n\n\n## React 사용하기\n\nReact 사용은 Parcel이라고 다르지 않으므로 간단히 다루겠다.\n\n```\n$ npm install --save react react-dom\n```\n\n이제 리액트 컴포넌트와 css파일을 만들고 index.js를 수정해보자\n\n`./src/App.js`\n```javascript\nimport React from 'react';\nimport './style.css';\n\nclass App extends React.Component {\n  render(){\n    return(\n      <div id=\"App\">\n        Hello World\n      </div>\n    )\n  }\n}\n\nexport default App;\n```\n\n`./src/style.css`\n```css\nbody {\n  color: red;\n}\n```\n\n`./index.js`\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './src/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n여기까지 리액트를 사용하기 위한 되었다.  \n허나 아직은 에러와 함께 작동하지 않을 것인데, 여기서 Babel이 필요하다.\n\n\n\n## Babel 사용하기\n\nBabel env, react preset을 설치한다.\n\n```shell\n$ npm install --save-dev babel-preset-env babel-preset-react\n```\n\n`./.babelrc` 파일을 생성, 설정을 등록한다.\n```json\n{\n  \"presets\": [\"env\", \"react\"]\n}\n```\n\n여기까지 했다면 작성했던 코드가 정상적으로 출력되는 것을 볼 수 있다.\n\n\n\n## SASS(SCSS) 사용하기\n\n정상적인 설치 방법은 우선 node-sass 모듈을 설치하는 과정을 거쳐야 하나 parcel을 사용하면 더 간편하게 사용할 수 있다.\n\n현재 css 파일을 scss 확장자로 바꾸고\ncss 파일을 import 했던 부분을 scss로 바꿔주면\n\nParcel이 자동으로 node-sass를 설치하며 적용된다.\n\n\n\n## Build\n\n[공식 문서 - production](https://parceljs.org/production.html)\n\n바로 npm script를 추가해 빌드를 해보자\n```json\n\"build\": \"parcel build index.html -d build --public-url ./\"\n```\n\n`-d build`는 `./build`폴더에 빌드한다는 뜻이며,  \n\n여기서 하나 알아두면 좋은 것은 `--public-url ./` 부분이다.  \n`--public-url ./` 옵션을 주게 되면 빌드 후 아래와 같은 결과가 나온다.\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"1a2b3c4d.css\">\nor\n<script src=\"e5f6g7h8.js\"></script>\n```\n\nGithub Page와 같은 정적 페이지 서비스를 사용할 경우에는 아래와 같이 할 수 있다.\n```shell\n$ parcel build index.html -d build --public-url https://username.github.io\n```\n\n그러면 결과가 아래와 같이 된다.\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://username.github.io/1a2b3c4d.css\">\nor\n<script src=\"https://username.github.io/e5f6g7h8.js\"></script>\n```\n\n이렇게 빌드를 하고나면 minify된 빌드 결과물을 얻을 수 있다.\n\n\n---\n\n여기까지 정말 간단하게만 Parcel로 작은 리액트 프로젝트를 사용하기 위한 준비를 해보았다. \n\nCRA(Create-react-app)과 프로젝트를 시작하는 단계에서 비교해보면 babel 설정과 같은 부분은 Parcel이 설정해줘야하는 것이 하나 더 있다는 점이 있지만 SASS 사용 등 복잡한 Webpack config를 뒤지고 수정하는 면에서는 Parcel이 더 간편하게 사용할 수 있는 것 같다.  \n\n---\n\n- References\n  - [Parcel documents](https://parceljs.org/getting_started.html)\n","excerpt":"주로 CRA(create-react-app)을 이용한 리액트 개발을 주로 해왔고 그로 인해 웹팩(Webpack) 번들러를 통해 간단한 설정 변경 등을 해왔는데 이번에 새로운 번들러인 파셀(Parcel)을 알게되었다. 공식 홈페이지의 헤드라인부터 불꽃…","fields":{"slug":"/parcel-start/"},"frontmatter":{"date":"Mar 23, 2018","title":"웹팩 대신 파셀(Parcel) 사용해보기 with React, Babel, SASS","tags":["parcel","react","sass","babel"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Vue.JS 설치\n\n\n\n### CDN으로 설치하기\n\n```html\n<script src=\"https://unpkg.com/vue\"></script>\n```\n\n간단히 index.html 내에 위 코드를 추가하는 것만으로 vue를 간단하게 사용할 수 있다.  \n다만 CDN을 기반으로 Vue를 개발하려면 .vue 확장자를 이용하는 개발은 할 수 없어 싱글 파일 컴포넌트 개발이 불가능하고 개발에 제약이 따른다.  \n제대로 된 vue 개발을 위해서는 아래의 방법을 시도하자.\n\n### NPM으로 설치하기\n\n```shell\n# 최신 stable 버전\n$ npm install vue\n```\n\n프로젝트 내에 vue를 설치하여 사용할 수 있다. Webpack 등 각종 번들러와도 잘 작동한다.  \n허나 더 편리하게 초기 세팅을 하고 싶다면 아래의 Vue CLI를 사용하는 방법이 최선일 것이다.\n\n\n## 개발 도구 설치\n\n\n### Vue CLI\n\n```shell\n# vue-cli 설치\n$ npm install --global vue-cli\n\n# vue init <template-name> <project-name>\n# \"webpack\" 템플릿을 이용해서 새 프로젝트 생성\n$ vue init webpack my-project\n\n$ cd my-project\n# 의존성 설치\n$ npm install\n# 개발 서버 실행\n$ npm run dev\n```\n\n이렇게 하면 react의 create-react-app과 같이 webpack 환경의 프로젝트 구조가 자동 생성되며 이제 이것을 기본으로 개발을 시작하면 된다.\n\n\n### Vue DevTools\n\nReact와 유사하게 크롬 개발 도구에서 사용할 수 있는 개발툴을 지원한다.\n\n[크롬 확장 프로그램 설치](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)\n\n---\n\n## References\n- https://kr.vuejs.org\n","excerpt":"Vue.JS 설치 CDN으로 설치하기 간단히 index.html 내에 위 코드를 추가하는 것만으로 vue를 간단하게 사용할 수 있다. 다만 CDN을 기반으로 Vue를 개발하려면 .vue 확장자를 이용하는 개발은 할 수 없어 싱글 파일 컴포넌트 개발이…","fields":{"slug":"/vuejs-install/"},"frontmatter":{"date":"Feb 21, 2018","title":"Vue.JS 및 Vue 개발 도구 설치하기","tags":["vue","javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Symbolic Link?\n개발을 하던 중 한 파일이 여러 곳에서 필요한 경우가 있다.  \n물론 모듈을 써서 사용하겠지만 개발 공부할 때는 종종 있는 일이다.\n\n그래서 복사 붙여놓기 보다는 나은 방법이 심볼릭 링크인 것 같아 방법을 소개한다.  \n개발 외에서도 활용하고 있는 심볼릭 링크도 소개해보겠다.\n\n```shell\n- ONE\n  - index.html\n  - style.css\n- TWO\n- THREE\n```\n<br/>\n위와 같은 폴더 구조에서 ONE 폴더에 위치한 style.css 파일이 TWO 폴더안에 필요하다고 해보자.\n```shell\n# 작업 위치를 TWO 폴더로 이동\n$ cd TWO/\n# 심볼릭 링크\n$ ln -s ../ONE/style.css style.css\n```\n<br/>\n다른 경우로 THREE 폴더에서 ONE폴더가 필요하다고 해보자.  \n그리고 THREE 폴더의 링크된 ONE폴더의 이름은 _ONE 이라 해보자.\n```shell\n# 작업 위치를 THREE 폴더로 이동\n$ cd THREE/\n# 심볼릭 링크\n$ ln -s ../ONE _ONE\n```\n이렇게 간단하게 사용할 수 있다, 어떻게 보면 복사 붙여놓기보다 간단하게 사용할 수 있다.\n\n<br/>\n이렇게 심볼링 링크된 것을 GitHub 웹페이지에서 확인해보면 어떨까?  \nTWO 폴더의 링크된 style.css 파일을 GitHub 웹페이지에서 확인해보면 아래와 같다.\n\n```\nSymbolic link |  1 lines (1 sloc) | 25 Bytes\n--------------------------------------------\n1 | ../ONE/style.css\n```\n\n---\n\n## 클라우드에 활용하기\n\n현재 NAS에 아래에서 소개할 방법으로 심볼릭 링크를 활용하고 있다, 여기서는 구글 드라이브로 예를 들어보겠다.\n\n구글 드라이브와 같은 클라우드에 폴더를 동기화할때도 요긴하게 쓰일 수 있는데,  \n컴퓨터에 설치하여 사용하는 설치형 구글 드라이브를 예로 들어보겠다.\n\nA 폴더를 구글 드라이브에서 사용하기 위해서 구글 드라이브로 복사한다면,  \n컴퓨터 저장 공간에 A폴더 용량, 그리고 구글 드라이브의 A폴더 용량.  \n이렇게 중복되어 많은 용량을 차지하게 된다.\n\n그러나 A 폴더를 심볼릭 링크로 구글 드라이브에 링크를 해놓으면 해결된다.  \n컴퓨터 내에서 구글 드라이브에 위치한 A폴더 심볼링 링크는 사실상 바로가기라고 보면 된다.\n그리고 구글 드라이브는 바로가기라고 해서 바로가기를 동기화해가는 것이 아닌 A폴더 자체를 동기화 하게 된다.  \n이렇게 하면 용량도 절약하며 링크가 되어있으므로 A폴더를 수정해도 구글 드라이브에 반영되게 된다.\n","excerpt":"Symbolic Link? 개발을 하던 중 한 파일이 여러 곳에서 필요한 경우가 있다. 물론 모듈을 써서 사용하겠지만 개발 공부할 때는 종종 있는 일이다. 그래서 복사 붙여놓기 보다는 나은 방법이 심볼릭 링크인 것 같아 방법을 소개한다. 개발 외에서…","fields":{"slug":"/mac-symbolic-link/"},"frontmatter":{"date":"Feb 20, 2018","title":"MacOS, 심볼릭 링크 사용하기","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n코딩용 폰트는 여러가지가 있다.  \nJAVA 사용자가 많이들 선호하는 Consolas나 요즘 뜨고 있는 fira code라던가 말이다.  \n많은 폰트를 써봤지만 현재는 _Hack_ 폰트를 사용하고 있다. 본인 생각에 튀는 부분 없이 심플하고 가독성이 좋은 것 같아 사용하고 있다.\n\n## Hack\n\n- [글꼴 샘플](https://source-foundry.github.io/Hack/font-specimen.html)\n- [글꼴 써보기](https://sourcefoundry.org/hack/playground.html)\n- [글꼴 다운로드](https://sourcefoundry.org/hack/#download)\n\n이름에서도 알 수 있듯이 오로지 개발을 위해 만들어진 글꼴이다. \n\n개발자를 위한 글꼴의 조건에는 여러개가 있다, 아래는 대표적인 조건이다.\n\n**햇갈릴 수 있는 글자의 구분**\n: 예) i l I / 0 O / ; :\n\n**고정폭일 것**\n: 일반적인 글꼴은 가변폭이 많다. 대표적으로 윈도우의 '굴림'이나 '돋움'이 해당한다.  \n코딩할 땐 공백과 글자 수에 따른 일정한 넓이와 그에 따른 여러 라인을 비교할 수 있도록 고정폭 글꼴의 사용이 필요하다.\n\nHack은 이러한 조건들을 만족하는 글꼴이다.\n\n## 글꼴 설정하기\n\n### Mac\n\n'서체 관리자' 앱을 실행하여 다운받은 글꼴을 추가한다.  \n앱을 못찾겠으면 Spotlight 검색을 통해 쉽게 찾을 수 있다.\n\n### Visual Studio Code\n\n**'Code - 기본 설정 - 설정'**에 진입한다.\n\n최신 버전의 VSCode에서는 GUI 방식 설정창이 뜨게 된다.\n\n여기서 `Editor: Font Family` 항목을 찾아 입력칸의 첫번째에 Hack을 추가해주면 된다.\n\n`Hack, Menlo, Monaco, 'Courier New', monospace`와 같이 말이다.\n\n위와 같이 글꼴을 여러개 나열 할 경우,  \n만약 첫번째로 설정한 글꼴가 어떠한 이유로 적용되지 않는 경우 그 다음 글꼴이 적용된다.\n\n혹시나 GUI 방식의 설정창이 뜨지 않고 `settings.json` 파일이 뜨거나 설정창에서 우측 상단의 `{}` 버튼을 누를 경우 진입한 설정 파일에서는 아래와 같이 설정을 추가하거나 수정해주면 된다.\n\n```json\n{\n  \"editor.fontFamily\": \"Hack, Menlo, Monaco, 'Courier New', monospace\"\n}\n```\n","excerpt":"코딩용 폰트는 여러가지가 있다. JAVA 사용자가 많이들 선호하는 Consolas나 요즘 뜨고 있는 fira code라던가 말이다. 많은 폰트를 써봤지만 현재는 Hack 폰트를 사용하고 있다. 본인 생각에 튀는 부분 없이 심플하고 가독성이 좋은 것 …","fields":{"slug":"/dev-font-vsc/"},"frontmatter":{"date":"Feb 13, 2018","title":"개발자 글꼴 Hack, 그리고 VSCode 글꼴 설정하기","tags":["VSCode"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHTML 태그안에 데이터 속성(**data-**)을 두어 그 데이터를 JS나 CSS에서 불러 쓸 수 있다.\n\n\n\n## HTML\n\n```html\n<tag id=\"a\" data-test-keyword=\"ABC\"></tag>\n```\n\n`data-` 뒤에 데이터 속성의 이름을 입력한다.\n\n`-`, `.`, `:`, `_` 와 영문 소문자가 입력 가능하다. (대문자는 불가능)\n\n위의 예제에서는 **test-keyword**이다.\n\n\n\n## JavaScript\n\n```javascript\nconst el = document.querySelector('#a');\n\nconsole.log(el.dataset.testKeyword); // \"ABC\"\n```\n\nJavaScript에서의 접근법으로는 `dataset` 을 이용하여 불러올 수 있다.\n\n데이터 속성 이름에서`data-`를 뺀 뒤 camelCase로 변환되어있다.\n\n따라서 위에서 지정한 `data-test-keyword`가 `testKeyword`가 되었다.\n\n\n\n## CSS\n\n```css\n#a[data-test-keyword=\"ABC\"] {\n    display: none;\n}\n```\n\nCSS에서는 HTML의 데이터 속성 이름 그대로를 사용해 접근 할 수 있다.\n\n\n\n---\n\n### References\n[https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/dataset](https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/dataset)\n","excerpt":"HTML 태그안에 데이터 속성(data-)을 두어 그 데이터를 JS나 CSS에서 불러 쓸 수 있다. HTML  뒤에 데이터 속성의 이름을 입력한다. , , ,  와 영문 소문자가 입력 가능하다. (대문자는 불가능) 위의 예제에서는 test-keywo…","fields":{"slug":"/html-dataset/"},"frontmatter":{"date":"Feb 10, 2018","title":"HTML 데이터 속성 사용하기 (data-, dataset)","tags":["html","javascript","css"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nVisual Studio Code를 쓰기 시작하면서 데스크탑과 랩탑간 설정 동기화가 필요해 방법을 찾다가  \n확장 플러그인 **Settings Sync**를 사용하여 하는 방법을 발견했다.\n\n---\n\n## 1. 확장 플러그인 'Settings Sync' 설치\n\nhttps://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\n\n\n## 2. GitHub account token 발급받기\n\n'Settings Sync'는 Github의 gist 토큰을 사용하여 설정 업로드, 다운로드가 이뤄진다.\n\n토큰을 발급받기 위해 Github에서 하단의 메뉴로 진입한다.\n\n**Settings > Developer settings > Personal access tokens > Generate New Token**\n\n나타나는 메뉴에서 **gist**에 체크 후 토큰을 생성한다.  \n생성 후 화면에 보이는 토큰 문자열을 이용하여 설정 업로드, 다운로드가 이뤄진다.\n\n## 3. 설정 업로드 / 다운로드\n\n단축키는 아래와 같다.\n1. Upload Key : Shift + Alt + U\n2. Download Key : Shift + Alt + D\n\n단축키를 통해 나타나는 입력칸에 토큰을 입력하면 설정 업로드, 다운로드가 이뤄지게 된다.\n한번 입력과정을 거치면 다음부터는 단축키 한번으로 업로드 다운로드가 가능하다.\n","excerpt":"Visual Studio Code를 쓰기 시작하면서 데스크탑과 랩탑간 설정 동기화가 필요해 방법을 찾다가 확장 플러그인 Settings Sync를 사용하여 하는 방법을 발견했다. 1. 확장 플러그인 'Settings Sync' 설치 https://m…","fields":{"slug":"/vsc-settings-sync/"},"frontmatter":{"date":"Feb 08, 2018","title":"Visual Studio Code 설정 기기 간 동기화하기","tags":["VSCode"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nWebStorm을 쓰다가 Visual Studio Code를 사용하니 React를 쓰기에 불편함이 한두가지가 아니다.\n\n제일 처음 맞은 불편함이 JSX에서 emmet 자동완성이 작동 안되는 것인데,    \n해결 방법으로 여러 방법이 있었지만 제일 간단한 방법은 아래와 같다.\n\n기본 설정에서 아래 코드를 추가해준다.\n\n```json\n{\n    \"files.associations\": {\n        \"*.js\": \"javascriptreact\"\n    }\n}\n```\n\n---\nReferences\n: [Change language to JSX in Visual Studio Code\n](https://stackoverflow.com/questions/32832264/change-language-to-jsx-in-visual-studio-code)\n","excerpt":"WebStorm을 쓰다가 Visual Studio Code를 사용하니 React를 쓰기에 불편함이 한두가지가 아니다. 제일 처음 맞은 불편함이 JSX에서 emmet 자동완성이 작동 안되는 것인데, 해결 방법으로 여러 방법이 있었지만 제일 간단한 방법…","fields":{"slug":"/vsc-react-syntax/"},"frontmatter":{"date":"Feb 07, 2018","title":"VSCode(Visual Studio Code)에서 React JSX 자동완성 기능 활성화하기","tags":["VSCode"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nMacOS 재설치 후 기본적인 설정을 하면서 **간단히** 정리해본 MySQL 설치 과정\n\n\n## MySQL 설치\n```\n$ brew install mysql\n```\n\nbrew 명령어를 위한 HomeBrew 패키지 관리자 미설치시 아래 명령어를 통해 설치 필요  \n`$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"`\n\n\n## MySQL 설정\n\n아래 명령어로 mysql을 시작합니다.\n\n```\n$ mysql.server start\n```\n\n아래 명령어로 기본 설정을 시작합니다.\n```\n$ mysql_secure_installation\n```\n이제 여러 질문들이 출력됩니다.  \n출력에 대한 답은 본인이 한 방법으로만 간단하게 기술하겠습니다.\n\n우선 아래의 과정에 앞서 정리해보자면 아래와 같습니다.\n1. 비밀번호 복잡도 검사 과정 (n)\n2. 비밀번호 입력 & 확인\n3. 익명 사용자 삭제 (y)\n4. 원격 접속 허용 (n)\n5. test DB 삭제 (n)\n6. previlege 테이블을 다시 로드할 것인지 (y or n)\n\n아래는 위에 나타낸 과정의 자세한 내용입니다.\n\n```\nSecuring the MySQL server deployment.\n\nConnecting to MySQL using a blank password.\n\nVALIDATE PASSWORD PLUGIN can be used to test passwords\nand improve security. It checks the strength of password\nand allows the users to set only those passwords which are\nsecure enough. Would you like to setup VALIDATE PASSWORD plugin?\n\nPress y|Y for Yes, any other key for No:\n```\n위의 과정은 복잡한 비밀번호 설정을 위한 과정을 거치겠냐고 묻는 과정이며,  \n**No**로 스킵하였습니다.\n\n```\nPlease set the password for root here.\n\nNew password:\n\nRe-enter new password:\n```\n위의 과정은 루트 비밀번호를 입력하는 과정입니다.  \n비밀번호와 비밀번호 확인란을 입력하게 됩니다.\n\n```\nBy default, a MySQL installation has an anonymous user,\nallowing anyone to log into MySQL without having to have\na user account created for them. This is intended only for\ntesting, and to make the installation go a bit smoother.\nYou should remove them before moving into a production\nenvironment.\n\nRemove anonymous users? (Press y|Y for Yes, any other key for No) : y\n```\n익명 사용자를 삭제할 것인지 묻습니다.  \n**y**를 입력하였습니다.\n\n```\nNormally, root should only be allowed to connect from\n'localhost'. This ensures that someone cannot guess at\nthe root password from the network.\n\nDisallow root login remotely? (Press y|Y for Yes, any other key for No) : y\n```\n원격 접속을 허용할 것인지 묻습니다,  \n로컬에서만 개발 예정이기에 **y**를 입력했습니다.\n\n```\nBy default, MySQL comes with a database named 'test' that\nanyone can access. This is also intended only for testing,\nand should be removed before moving into a production\nenvironment.\n\nRemove test database and access to it? (Press y|Y for Yes, any other key for No) :\n```\ntest 데이터베이스 삭제를 묻고 있습니다.  \n**No**를 입력하였습니다.\n\n```\nReload privilege tables now? (Press y|Y for Yes, any other key for No) :\n```\nprevilege 테이블을 다시 로드할 것인지 묻습니다.\n\n**yes**를 입력, 과정을 마칩니다.\n\n```\nAll done!\n```\n위의 메세지와 함께 설정이 종료됩니다.\n\n추가적으로 mysql server가 재부팅과 상관없이 켜져있을 수 있도록 brew services를 이용하여 서버를 켜두겠습니다.\n\n```\n$ brew services start mysql\n```\n\n## MySQL 사용\n```\n$ mysql -u root -p\n```\n위 명령어 입력 후 루트 비밀번호를 입력하여 mysql을 사용할 수 있게 됩니다.\n","excerpt":"MacOS 재설치 후 기본적인 설정을 하면서 간단히 정리해본 MySQL 설치 과정 MySQL 설치 brew 명령어를 위한 HomeBrew 패키지 관리자 미설치시 아래 명령어를 통해 설치 필요  MySQL 설정 아래 명령어로 mysql을 시작합니다. …","fields":{"slug":"/mac-install-mysql/"},"frontmatter":{"date":"Jan 29, 2018","title":"간단하게 MySQL 설치하기 (Mac, HomeBrew)","tags":["mysql"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nMacOS 재설치 후 기본적인 설정을 하면서 **간단히** 정리해본 Node.js, npm, yarn 설치 과정\n\n## Node, NPM 설치\nNode를 설치하기에 가장 간단하고 좋은 방법이라 생각하는 HomeBrew를 통한 설치를 해보겠습니다.  \n좋은 방법이라는 이유는 업데이트, 제거가 다른 설치 방법에 비해 비교적 쉽기 때문입니다.\n\n아래 명령어를 통해 설치를 진행합니다.\n```\n$ brew install node\n```\n\nbrew 명령어를 위한 HomeBrew 패키지 관리자 미설치시 아래 명령어를 통해 설치 필요  \n(brew가 설치되어 명령어가 정상작동했다면 아래 명령어는 불필요합니다.)\n```\n$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n설치 확인 & 버전 확인\n```\n$ node -v\n$ npm -v\n```\n\n## yarn 설치\nyarn 설치시 위에서 Node는 설치하였으니 node를 빼고 설치하도록 합니다.\n```\n$ brew install yarn --without-node\n```\n\n설치 확인 & 버전 확인\n```\n$ yarn -v\n```\n## 업데이트 & 언인스톨 방법\n\n차후 업데이트 또는 언인스톨이 필요할 때 아래와 같은 방법으로 가능합니다.\n\n### 업데이트\n```\n  우선 HomeBrew를 최신버전으로 업데이트 합니다.\n$ brew update\n\n  원하는 업데이트를 수행합니다.\n$ brew upgrade node\n$ brew upgrade yarn\n```\n\n### 언인스톨\n```\n$ brew uninstall node\n$ brew uninstall yarn\n```\n","excerpt":"MacOS 재설치 후 기본적인 설정을 하면서 간단히 정리해본 Node.js, npm, yarn 설치 과정 Node, NPM 설치 Node를 설치하기에 가장 간단하고 좋은 방법이라 생각하는 HomeBrew를 통한 설치를 해보겠습니다. 좋은 방법이라는 …","fields":{"slug":"/install-node-yarn/"},"frontmatter":{"date":"Jan 29, 2018","title":"간단하게 Node.js, npm, yarn 설치하기","tags":["node","npm","yarn"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n새로운 포스트로 업데이트 되었습니다. 아래 링크를 통해 확인할 수 있습니다.  \n> [mac 터미널 환경 구성하기 (zsh, oh my zsh, zplug, hyper)](https://junhobaik.github.io/mac-terminal-setting/)\n\n----\n\nMacOS 재설치 후 기본적인 설정을 하면서 **간단히** 정리해본 Mac 터미널 세팅 과정\n\n\n## zsh 설치\n\n1. zsh 현재 버전 확인\n\n  ```\n$ zsh --version\n  ```\n\n2. zsh 최신 버전 설치\n\n  ```\n$ brew install zsh\n  ```\n\n  ```\n  # brew 명령어를 위한 HomeBrew 패키지 관리자 미설치시 아래 명령어를 통해 설치 필요\n  # 위 명령어가 이상없이 작동한다면 아래 명령어는 불필요합니다.\n  $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  ```\n\n3. Terminal 재실행 후 zsh 현재 버전 확인\n\n  ```\n$ zsh --version\n  ```\n\n## Oh My Zsh 설치\n\n```\n$ sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n## zsh Plugins\n\n플러그인은 `zsh-syntax-highlighting` `zsh-autosuggestion` `autojump` 이 세가지 플러그인을 추천합니다.  \n여기서는 설치하지 않지만, alias에 익숙하지 않으신 분이라면 [alias-tips](https://github.com/djui/alias-tips)도 추천합니다.\n\nbrew를 통해 설치해줍니다.\n\n```\n$ brew install zsh-syntax-highlighting zsh-autosuggestion autojump\n```\n\n.zshrc 파일을 수정합니다.\n\n```\n$ vi ~/.zshrc\n```\n\n```\nplugins=(git zsh-syntax-highlighting zsh-autosuggestion autojump)\n```\n\n## 터미널 App 추천\n\n대표적인 터미널 앱으로는 iTerm2가 가장 유명하고 많이 쓰입니다.  \n본인은 기존 iTerm2를 쓰다가 지금은 Hyper를 사용하고 있습니다.\n\n### iTerm\n\n[iTerm Official Site](https://www.iterm2.com/)\n\n[다운로드 페이지](https://www.iterm2.com/downloads.html)\n\n또는 brew를 이용해 설치할 수 있습니다. (cask 설치 필요)\n\n`brew cask install iterm2`\n\n### Hyper\n\n[Hyper Official Site](https://hyper.is)\n\n[다운로드 페이지](https://hyper.is/#installation)\n\n또는 brew를 이용해 설치할 수 있습니다. (cask 설치 필요)\n\n`brew cask install hyper`\n","excerpt":"새로운 포스트로 업데이트 되었습니다. 아래 링크를 통해 확인할 수 있습니다.   mac 터미널 환경 구성하기 (zsh, oh my zsh, zplug, hyper) MacOS 재설치 후 기본적인 설정을 하면서 간단히 정리해본 Mac 터미널 세팅 과정…","fields":{"slug":"/mac-terminal/"},"frontmatter":{"date":"Jan 29, 2018","title":"Mac Terminal 설정 (zsh, oh my zsh, plugin)","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nVisual Studio Code 에서 사용중인 확장을 정리해둔 글입니다.\n\nFront-End 개발 환경에 맞게 되어있습니다.\n\n:star: 는 강력 추천!\n\n## VSCode 기본 플러그인 및 테마\n\n- [Korean Language Pack for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ko)  \n  비주얼 스튜디오 코드의 언어(UI 언어 등)를 한국어로 만들어줍니다.\n\n- [Dracula Official](https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula)  \n  색 테마\n\n- [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme)  \n  아이콘 테마\n\n## A\n\n- [Active File In StatusBar](https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar)  \n  VSCode 최하단 상태바에 작업중인 파일의 경로가 나타납니다.\n\n- [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) :star:  \n  `<tag>` `</tag>` 하나의 태그를 수정하면 짝이되는 태그도 동시에 함께 수정됩니다.\n\n## B\n\n- [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) :star:  \n  `{((({})))}` 브라켓의 단계에 따라 색상을 다르게 해주고, 들여쓰기 단계를 쉽게 구분할 수 있게 하는 가이드 라인이 추가된다.  \n  버전2가 개발중이고 사용 가능하나, 아직은 이슈가 많아 해당 버전1을 사용하는 것이 좋다.\n\n- [Bookmarks](https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks) :star:  \n  코드 북마커 기능.\n\n## C\n\n- [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight) :star:  \n  `#fff` `rgb(0,0,0)`과 같은 컬러 코드의 텍스트 배경색을 해당 색상으로 보여준다.\n\n- [Color Info](https://marketplace.visualstudio.com/items?itemName=bierner.color-info)  \n  색상 코드에 마우스를 올리면 해당 색상의 다른 타입 값들을 보여준다. 예로 rgb 컬러의 hex 컬러 값은 어떤 것인지 아는 용도로 활용이 가능하다.\n\n## D\n\n- [debugger-for-chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) :star:  \n  크롬 개발자 도구에서 디버깅하던 것을 VSCode 에서 할 수 있게 된다. VSCode 에서 브레이킹 포인트를 걸고 또 크롬의 개발자 도구에서는 엘리먼트를 확인하는 등의 방법이 가능하기도 하고 여러 도움이 된다.\n\n- [DotENV](https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv)  \n  .env 파일의 syntax highlighting 기능을 한다.\n\n## E\n\n- [ES7 React/Redux/GraphQL/React-Native snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)  \n  React Snippets\n\n- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)  \n  설명이 필요없는 필수 Linter.\n\n## G\n\n- [gitignore](https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore)  \n  `.gitignore` 파일을 프로젝트 환경에 맞게 자동으로 생성해준다. 또한 작업중인 파일을 바로 `.gitignore`에 추가할 수 있다.\n\n- ~~[Git History](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory)~~  \n  ~~Git 로그를 시각적으로 보기 좋은 확장이다. 로그 보기뿐만 아니라 다양한 기능을 제공한다. 주로 로그를 보기 위해 사용하고 Git 에 관한 다양한 기능은 아래에서 소개할 GitLens 에서 주로 사용한다. 팁으로 본인의 경우 메뉴바에 GitLens 와 Git History 의 아이콘이 비슷한게 있어 햇갈려 Git History 의 설정에서 메뉴바 아이콘을 숨기고 명령 팔레트를 통해서만 사용한다.~~\n  현재는 따로 GitKraken App을 사용하고 있기에 해당 앱은 사용중이지 않다.  \n\n- [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens) :star:  \n  Git 을 사용함에 있어서 시각적이고 고급화된 기능을 제공한다. 워낙 다양한 기능을 제공하기에 위 링크에서 확인해보길 바란다.\n\n## I\n\n- [Visual Studio IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode)  \n  자동 완성 추천 기능으로 자동 완성 목록에서 추천하는 자동 완성에는 별표가 표시되어 나온다.\n\n- [IntelliSense for CSS class names in HTML](https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion)  \n  현재 작업중인 HTML 파일 또는 연결된 파일에서 class 를 참조하여 자동으로 css class 자동완성을 추천해준다.\n\n- [indent-rainbow](https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow)  \n  코드 들여쓰기 단계에 따라서 들여쓰기 공간 색을 다르게 하여 한결 코드 읽기를 좋게 해준다.\n\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)  \n  import/require 대상 패키지의 용량이 코드 옆에 표시된다.\n\n## N\n\n- [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script)  \n  `package.json`파일을 확인하여 설치된 패키지들의 유효성 검사를 해준다. 파일 내에 종속성이 선언되어있지만 설치되어있지 않다던가 선언되었는데 사용되어지지 않는 등의 확인을 해준다.\n\n- [npm intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense) :star:  \n  npm module 을 import 코드를 작성할 때 설치된 모듈을 기준으로 자동완성을 제공해준다.\n\n## P\n\n- [Path Intellisense](https://gist.github.com/junhobaik/439c68e2f969c86b06bf8a030172e300) :star:  \n  코드 작성시 Path 를 작성할 때 현재 경로를 인식하고 자동완성을 추천해준다. 예를들면 `./`까지 타이핑하면 현재 폴더내의 파일 및 폴더를 자동완성해준다.\n\n- [PostCSS Sorting](https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-postcss-sorting)  \n  CSS 속성 순서 정렬 기능. CSS/PostCSS/Less/SCSS 를 지원하며 우선되는 순서를 지정할 수도 있다.\n\n- [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) :star:\n  코드 포맷터\n\n## R\n\n- [Relative Path](https://marketplace.visualstudio.com/items?itemName=jakob101.RelativePath)  \n  프로젝트의 전체 파일 중 원하는 파일을 검색해 선택하면 작업중인 파일에서 상대 경로로 입력해준다.\n\n## S\n\n- ~~[Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)~~  \n  ~~VSCode 설정(확장 플러그인 포함) 동기화 도구~~  \n  VSCode v1.440 부터 공식적으로 설정 동기화 기능을 제공한다.  \n  현재(200330)는 정식 버전은 아직 업데이트가 되지 않았고 VSCode insider에서 사용할 수 있다.\n\n## T\n\n- [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)  \n  주석으로 TODO: FIXME: 구문을 작성시 하이라이트해준다.\n\n## W\n\n- [WakaTime](https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime)  \n  VSCode 에서 어느 프로젝트를 얼마나 작업했는지, 어느 언어로 작성했는지, 그에 대한 비율 시간을 측정해준다.  \n  따로 [App 설치](https://wakatime.com/)가 필요하며 VSCode 플러그인에 API key 를 입력해 연동한다. VSCode 말고도 다양한 곳에 연동이 가능하다.\n\n## 관심있는, 앞으로 설치할 예정인 확장 목록\n\n- [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)\n- [htmltagwrap](https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap)\n- [REST Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client)\n- [Visual Studio Live Share](https://visualstudio.microsoft.com/ko/services/live-share/)\n- [LintLens — ESLint rules made easier](https://marketplace.visualstudio.com/items?itemName=ghmcadams.lintlens)\n- [Quokka.js](https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode)\n\n<br/><br/>\n\n---\n\n**추가로 VSCode 사용에 도움이 될 만한 자료들**  \n\\- [VS Code Tips and Tricks](https://github.com/Microsoft/vscode-tips-and-tricks?wt.mc_id=DX_881390#extension-recommendations)\n","excerpt":"Visual Studio Code 에서 사용중인 확장을 정리해둔 글입니다. Front-End 개발 환경에 맞게 되어있습니다.  는 강력 추천! VSCode 기본 플러그인 및 테마 Korean Language Pack for Visual Studio …","fields":{"slug":"/vsc-plugin-list/"},"frontmatter":{"date":"Jan 19, 2018","title":"사용중인 VSCode(Visual Studio Code) 확장 플러그인 목록","tags":["VSCode"],"update":"Mar 30, 2020"}}},{"node":{"rawMarkdownBody":"\n기존 Jekyll을 이용한 블로그는 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다.  \n\n**[\"Gatsby를 이용한 블로그 만들기\"](https://junhobaik.github.io/create-gatsby-blog/) 바로가기**\n\nJekyll의 minimal-mistakes테마를 이용한 블로그를 만들고 싶다면 아래 게시물은 아직 유효합니다.\n\n---\n\njekyll 블로그를 시작하기 위한 준비를 저번 포스트에서 끝냈다.  \n이제 테마를 적용하고자 여러 테마를 찾던중 정말 괜찮은 테마를 발견했고 그것을 적용하는 과정을 포스팅하려고 한다.\n\n테마의 이름은 'Minimal Mistakes'로 github star와 fork를 보아 인기있는 테마인듯 싶다.  \n심플한 디자인과 가독성이 맘에 들었고 무엇보다 문서가 너무나 잘 정리되있다는 점에 있어서 선택하게 되었다.\n\n### Minimal Mistakes\n- [Official & Demo Page](https://mmistakes.github.io/minimal-mistakes)\n- [Github](https://github.com/mmistakes/minimal-mistakes)\n\n\n## 테마 적용하기\n우선 기존 포스트에서 jekyll 설치를 다뤘는데, 그로인해 기본 테마로 적용이 되어있는 상태이다.  \n여기서 테마를 적용하는 방법으로는 여러가지가 있다. \n\n가장 쉬운방법은 테마의 github에서 fork를 하고 리포지토리 이름을 `username.github.io`로 바꾸는 방법이다.\n\n만약 기존에 해둔 리포지토리를 파괴하지 않는 선에서 테마를 적용하고 싶다면 테마를 다운받아 기존 리포지토리 폴더에 덮어쓰기 하는 방법도 있다.\n\n여기서는 깔끔하게 비어있는 리포지토리에서 테마를 적용하는 방법을 기술하겠다.\n\n만약 지금 보고있는 블로그가 맘에 들고 아래 방법보다 더 쉽게 테마 적용하고 싶다면 지금 이 블로그의 GitHub 리포지토리를 Fork해 사용할 수 있도록 방법을 만들어놨으니 포스팅을 참고하면 된다.  \n[Jekyll 블로그 테마 ‘쉽게’ 적용하기 (minimal-mistakes)](https://junhobaik.github.io/jekyll-apply-theme-simple)\n{: .notice--warning}\n\n### 테마 다운받아 적용하기\n\n테마를 다운받으려면 보통 리포지토리를 clone하거나 zip파일로 다운받는 방법이 보통이다.  \n아니면 jekyll theme 페이지에서 다운받는 방법이 있다.  \n\nminimal mistakes 테마를 다운받으려 github 리포지토리를 zip으로 다운받아 시도하였다.  \n허나 사이드바 표시등 자잘한 문제가 보여 정식 릴리즈된 파일을 찾아 다운받았다.\n\n[https://github.com/mmistakes/minimal-mistakes/releases](https://github.com/mmistakes/minimal-mistakes/releases)\n\n다운받은 폴더의 내용을 프로젝트 폴더(username.github.io)에 옮긴다.  \n이 과정에서 아래를 참조해 불필요한 파일을 삭제하도록 한다.\n\n### 불필요한 파일 삭제\n불필요한 파일은 아래와 같다.  \n- .editorconfig\n- .gitattributes\n- .github\n- /docs\n- /test\n- CHANGELOG.md\n- minimal-mistakes-jekyll.gemspec\n- README.md\n- screenshot-layouts.png\n- screenshot.png\n\n### _posts, _draft 폴더 생성\n그리고 _posts와 _draft 폴더가 없다면 생성하도록 한다. (최상위 경로)\n- _drafts : 포스트 초안이 담기는 곳이다. 배포되지 않고 테스트 환경에서 보기가 가능하다.\n- _posts : 배포될 포스트들이 담기는 곳.\n\n### .gitignore 생성\n\n다음으로 최상위 경로에 .gitignore 파일이 없다면 생성하고 있다면 아래 내용을 보충하자.  \n[Jeklly gitignore list](https://gist.github.com/bradonomics/cf5984b6799da7fdfafd)\n\n### Gemfile 수정\nGemfile을 아래 내용으로 수정한다.\n\n```yml\nsource \"https://rubygems.org\"\n\ngem \"jekyll\", \"~> 3.5\"\ngem \"minimal-mistakes-jekyll\"\n```\n\n아래 명령어를 수행한다.\n```\n$ bundle\n```\n\n### 테스트, 배포\n이제 기본적으로 테마 적용이 완료되었다. 다음으로 개인에 맞춰 커스터마이징 하면 된다.  \n그 전에 한번 테스트와 배포를 해보자.\n\n```\njekyll serve\n```\n위 명령어로 `localhost:4000`에서 로컬로 띄워볼 수 있다.\n\n이 명령어 뒤에 붙는 옵션으로 유용한 것은\n- `--draft` 초안을 같이 표시한다.\n- `--livereload` 수정마다 새로고침된다.\n\n중요한 것은 `_config.yml` 파일을 수정하는 것은 반영되지 않아 다시 명령어를 수행해야 반영 된다.\n\n다음으로 git comit, push 를 통해 자신의 github page에 올린다.\n\n예)\n```\n$ git add .\n$ git commit -m 'Apply theme, minimal mistakes'\n$ git push\n```\n\n`username.github.io`에 접속해 제대로 반영 되었는지 확인한다.\n\n## 테마 설정하기\n이제 개인에 맞춰 커스터마이징 할 차례이다.  \n구체적인 것은 생략하고 기본적으로 수정이 필요한 내용들만 다루겠다.  \n\n`_config.yml`을 수정하자.\n\n설정을 수정할때는 `jekyll serve`가 실시간 반영되지 않으니 다시 명령어를 수행해야하는 점을 유의하자.\n\n### 테마 스킨\n```yml\nminimal_mistakes_skin : \"defalut\"\n```\n테마의 전체적인 색상 스킨을 정할 수 있다.   \n스킨은 아래 링크에서 확인 할 수 있다.  \n[Skin list](https://mmistakes.github.io/minimal-mistakes/docs/configuration/#skin)\n\n### Site Settings\n\n```yml\nlocale                   : \"ko\" # 타깃 국가 설정\ntitle                    : \"블로그 제목\" # 블로그 좌측상단의 제목\nname                     : \"블로그 이름\"\ndescription              : \"블로그 설명\"\nurl                      : \"https://username.github.io\" # 블로그 주소\nrepository               : \"username/username.github.io\" # 블로그 github 리포지토리\nsearch                   : true # 사이트 우측 상단 검색 활성화\nsearch_full_content      : # 제목이 아닌 내용까지도 검색할 것인지에 대한 설정 기본 false\n```\n\n### Site Author\n사이트 운영자에 대한 정보를 적는다.  \n사이드바에 표시되는 사항들이다.\n\n```yml\nauthor:\n  name             : \"이름\"\n  avatar           : \"/assets/images/bio-photo.jpg\" # 프로필 사진\n  bio              : \"이름 아래 나타날 자신의 설명\"\n  location         : \"Seoul,Korea\"\n  email            : \"a@b.c\"\n  uri              : # 웹사이트, 보통 지금 블로그 말고 링크해두고 싶은 사이트를 적는다.\n  # 이 아래 쇼셜 리스트에 해당되는 것에 아이디를 적는다\n  github : \"username\" # 주소 전체를 적는 것이 아닌 자신의 정보만 적는다.\n```\n\n### Defaults\n```yml\n# Defaults\ndefaults:\n  # _posts\n  - scope:\n      path: \"\"\n      type: posts\n    values:\n      layout: single\n      author_profile: true\n      read_time: false # 해당 포스트를 읽은 시간이 표시되는데 기본값은 true이다.\n      comments: # true\n      share: true # 포스트 공유 기능을 활성화 할 것인지 정한다. 기본값은 true이다.\n      related: true\n```\n### 댓글 설정\ndisqus를 적용해 보기 위해 우선 disqus에서 사이트를 하나 추가하고 `short-name`을 알아둔다\n\n아래 코드를 보고 `_config.yml`의 설정을 수정한다\n\n```yml\ncomments:\n  provider               : \"disqus\"\n  disqus:\n    shortname            : dev-hundred-blog # Short-name\n\ndefaults:\n  # _posts\n  - scope:\n      path: \"\"\n      type: posts\n    values:\n      layout: single\n      author_profile: true\n      read_time: false\n      comments: true # 댓글 활성화\n      share: true\n      related: true\n```\n\n\n## Navigation 설정\n헤더 부분에 표시될 네비게이션 메뉴 설정을 하겠다.  \n주로 많이 사용하는 메뉴들로 기본 설정을 해보겠다.  \n- Archive\n- Tag\n- Category\n\n기본적으로 `_data/navigation.yml`에서 네비게이션 설정을 할 수 있다.  \n예로 Archive라는 메뉴 하나가 네비게이션에 있다고 하면 아래와 같다.\n\n```yml\nmain:\n  - title: \"Archive\"\n    url: /year-archive/\n```\n\nurl은 `_pages`폴더안에 있는 페이지의 permalink와 연결된다.\n\n`_pages/year-archive.html`\n```yml\n---\nlayout: archive\npermalink: /year-archive/\ntitle: \"Posts by Year\"\nauthor_profile: true\n---\n# ... Code Here ...\n```\n\n이제 실제로 적용을 해보도록 하자.\n기본적인 양식은 [minimal mistakes의 github의 예제](https://github.com/mmistakes/minimal-mistakes/tree/master/docs) 양식을 가져왔다.\n\n`_data/navigation.yml`\n```yml\nmain:\n  - title: \"Archive\"\n    url: /year-archive/\n  - title: \"tag\"\n    url: /tags/\n  - title: \"Category\"\n    url: /categories/\n```\n\n`_pages/year-archive.html`\n\n```liquid\n---\nlayout: archive\npermalink: /year-archive/\ntitle: \"Posts by Year\"\nauthor_profile: true\n---\n{% assign postsByYear = site.posts | group_by_exp:\"post\", \"post.date | date: '%Y'\"  %}\n{% for year in postsByYear %}\n  <h2 id=\"{{ year.name | slugify }}\" class=\"archive__subtitle\">{{ year.name }}</h2>\n  {% for post in year.items %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n```\n\n\n`_pages/tag-archive.html`  \n\n태그 부분은 기본 양식에서 살짝 수정했다.\n\n```liquid\n---\nlayout: archive\npermalink: /tags/\ntitle: \"Posts by Tag\"\nauthor_profile: true\n---\n{% include group-by-array collection=site.posts field=\"tags\" %}\n<ul>\n  {% for tag in site.tags %}\n    <span>\n      <a href=\"#{{ tag | first }}\">\n        {{ tag | first }}\n      </a> &nbsp;&nbsp;&nbsp;\n    </span>\n  {% endfor %}\n</ul>\n<br/>\n<br/>\n{% for tag in group_names %}\n  {% assign posts = group_items[forloop.index0] %}\n  <h2 id=\"{{ tag | slugify }}\" class=\"archive__subtitle\">{{ tag }}</h2>\n  {% for post in posts %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n```\n\n`_pages/category-archive.html`\n\n```liquid\n---\nlayout: archive\npermalink: /categories/\ntitle: \"Posts by Category\"\nauthor_profile: true\n---\n{% include group-by-array collection=site.posts field=\"categories\" %}\n{% for category in group_names %}\n  {% assign posts = group_items[forloop.index0] %}\n  <h2 id=\"{{ category | slugify }}\" class=\"archive__subtitle\">{{ category }}</h2>\n  {% for post in posts %}\n    {% include archive-single.html %}\n  {% endfor %}\n{% endfor %}\n```\n\n---\n\n이제 어느정도 블로그를 운영할 수 있게 된 것 같다.  \n허나 아직 세부적으로 코드 수정을 통해 커스터마이징 할 것들이 보인다.  \n\n이번 포스팅은 여기까지 하고 차후에 SEO 관련 포스팅을 할 생각이다.\n\n---\n\n### References\n- [Minimal Mistakes Quick-Start Guide](https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/)\n","excerpt":"기존 Jekyll을 이용한 블로그는 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다.   \"Gatsby를 이용한 블로그 만들기\" 바로가기 Jekyll의 minimal-mistakes테마를 이용한 블로그를 만들고 싶다면 아래 게시물은…","fields":{"slug":"/jekyll-apply-theme/"},"frontmatter":{"date":"Jan 14, 2018","title":"Jekyll 블로그 테마 적용하기 (minimal-mistakes)","tags":["blog","jekyll"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n참고: 지금 계신 블로그는 기존 Jekyll을 이용한 블로그에서 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다.  \n\n---\n\n원래는 Hexo 블로그 프레임워크를 사용하여 블로그를 시작하려했었다.  \nHexo를 사용하려던 이유는 Node.js 기반의 코드로 아는 분야이므로 코드 수정에 있어 이점이 있을거라고 생각한 이유가 컸다. 하지만 여러 테마를 둘러보고 커스터마이징 함에 있어 중국어라는 난관에 부딪쳤다. 제작사가 대만쪽이며 테마 제작자들도 대부분이 중국어권이라 문서를 보는데 큰 어려움이 있었다.\n\n차선책으로 jekyll 블로그 프레임워크를 사용해보기로 했다.  \n기본적으로 GitHub에서 지원하기 때문에 신뢰성이 높았고 Hexo보다는 대중적이라 생각되어 선택하였다.\n\n아래는 jekyll 블로그를 시작하기위해 고군분투(?)한 내용이다.\n\n## Ruby 설정\n\nRuby 설정 전에 `$ sudo gem install jekyll bundler` 명령어로 jekyll 설치가 정상적으로 진행되었다면 Ruby 설정은 넘어가도 된다\n{: .notice--info}\n\n우선 사용해보지 않은 Ruby를 사용하기 위해 설정에 들어갔다.\n\nMacOS에서는 기본적으로 Ruby를 지원하지만, 그냥 사용하여 Jeklly를 설치하려했더니 권한 문제등 에러가 많아 Ruby 버전 매니저인 RVM을 통해 새로운 Ruby 설치 및 설정을 해보았다.\n\n해야할 과정들을 요약하면 아래와 같다  \n1. RVM 설치   \n`$ \\curl -sSL https://get.rvm.io | bash -s stable` \n2. Ruby 설치  \n`$ rvm install 2.5.0` \n3. 설치된 버전 기본 사용 설정  \n`$ rvm --default use 2.5.0`\n\n하지만 이 과정 중 생각보다 오류가 많이 발생했다.  \n이 아래는 오류를 겪는 과정과 해결 과정이다.\n\n### RVM, Ruby 설치\n\n```\n$ \\curl -sSL https://get.rvm.io | bash -s stable\n```\n\n위 명령어를 통해 RVM을 설치하였다.  \n다음으로는 rvm을 통해 버전 2.5.0의 Ruby 설치를 시도하였다.\n\n```\n$ rvm install 2.5.0\n```\n\n허나 `command not found: rvm` 오류 발생, rvm이 설치가 잘못된 것일까\n구글링을 통해 해결 방법을 알아내었고 아래와 같다.\n\n```\n$ source ~/.rvm/scripts/rvm\n$ type rvm | head -n 1\n\"rvm ~ function ~\" 이와 비슷한 출력시 완료\n```\n\n이제 다시 다시 루비 설치를 시도하였다.\n\n```\n$ rvm install 2.5.0\n```\n\n그러나 아래와 같은 오류 발생, 일단 위의 오류는 해결한 것이고 다른 오류가 발생한 것이다.\n\n```\nError running 'requirements_osx_brew_libs_install autoconf automake libtool pkg-config coreutils libksba openssl@1.1',\nplease read /Users/junhobaik/.rvm/log/1515943113_ruby-2.5.0/package_install_autoconf_automake_libtool_pkg-config_coreutils_libksba_openssl@1.1.log\nRequirements installation failed with status: 1.\n```\n해결을 위해 아래 명령어 입력\n\n```\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n위 명령어의 설치 작업으로 다소 시간이 소요되었고 다시 루비 설치를 시도하였다.\n\n```\n$ rvm install 2.5.0\n```\n\n드디어 설치 성공, 그리고 아래 명령어를 통해 설치된 버전을 기본 사용 설정을 해둔다.\n\n```\n$ rvm --default use 2.5.0\n```\n\n<br/>\n\n## Jekyll 설치\n\n`$ sudo gem install jekyll bundler`\n\n위의 명령어를 통해 `jekyll`와 `bundler`를 설치한다.\n\n이로써 설치 작업은 끝났다.\n\n\n## Github Page와 연동\n\n우선 Github Page를 사용하여 배포하기 위해 미리 `username.github.io` 리포지토리를 준비해두었고, 빈 리포지토리를 로컬에 git clone 해두었다.\n\n```\n$ jekyll new username.github.io\n```\n\n위 명령어를 통해 jekyll init이 되었고 이제 블로그를 시작할 수 있는 상태가 되었다.\n\n또한 아래 명령어를 통해 로컬에서 테스트가 가능하다.\n\n```\njekyll serve\n```\n\n다음 포스트에서는 테마 적용을 해보려 한다.\n","excerpt":"참고: 지금 계신 블로그는 기존 Jekyll을 이용한 블로그에서 현재(2018.09) Gatsby를 이용한 블로그로 개편되었습니다.   원래는 Hexo 블로그 프레임워크를 사용하여 블로그를 시작하려했었다. Hexo를 사용하려던 이유는 Node.js …","fields":{"slug":"/start-jekyll-blog/"},"frontmatter":{"date":"Jan 14, 2018","title":"Jekyll 블로그 시작하기 (MacOS, GitHub Page)","tags":["jekyll","blog","ruby"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트에서 함수선언문과 함수표현식의 차이점을 인식해두는 것은 중요한 점이다.\n큰 차이점이라 하면 호이스팅(Hoisting)이라고 할 수 있다.\n\n우선 함수선언문과 같은 경우를 살펴보자.\n\n```javascript\nfunctionDeclaration();\nfunction functionDeclaration(){\n  return 'functionDeclaration';\n}\n```\n\n```javascript\n'functionDeclaration'\n```\n\n함수 선언문의 경우에는 호이스팅에 의해 함수 전체가 호이스팅의 대상이 된다.\n따라서 작성한 코드에서 함수 선언문 보다 위에 함수 호출이 있더라도 정상적으로 호출이 된다.\n\n다음으로 함수표현식의 경우를 살펴보자\n\n```javascript\nunnamedFunctionExpression();\nvar unnamedFunctionExpression = function(){\n  return 'unnamedFunctionExpression';\n}\n```\n\n```\nUncaught TypeError: unnamedFunctionExpression is not a function\n```\n\n결과는 unnamedFunctionExpression 변수가 함수가 아니라는 오류가 뜨게 된다.\n변수 선언 자체는 호이스팅되었지만 할당은 호이스팅의 대상이 아니므로 할당된 값이 없는 변수를 함수라 여기고 함수 호출을 한 샘이니 이러한 오류가 발생한 것이다.\n\n즉, 함수 선언문과 함수 표현식의 차이는 호이스팅 여부를 가름짓는 **할당**에 있다고 할 수 있다.\n\n함수선언문을 사용해서 나타날 수 있는 문제점을 아래 코드에 나타냈다.\n\n```javascript\nfunction a(){\n  return 'a';\n}\na();\nfunction a(){\n  return 'A';\n}\na();\n```\n\n위의 코드는 a A 를 원하지만 A A가 나오게 된 문제가 생긴 코드 라인이 방대한 프로젝트의 경우 위와같은 커뮤니케이션 오류에 따라 원하는 함수의 결과를 얻지 못할 수 있다.\n\n이러한 점들을 종합해 함수선언문의 사용보다는 함수표현식의 사용이 권장된다.  \n유명한 더글라스 크락포드 그리고 Airbnb의 Code Convension에서도 함수표현식을 권장하고 있다.\n\n## Reference\n\n- [KENDRICK'S BLOG](http://blog.sonim1.com/142)\n- [CAPTAIN PANGYO](https://joshua1988.github.io/web-development/javascript/function-expressions-vs-declarations/#%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EC%8B%9D---function-declarations)\n","excerpt":"자바스크립트에서 함수선언문과 함수표현식의 차이점을 인식해두는 것은 중요한 점이다.\n큰 차이점이라 하면 호이스팅(Hoisting)이라고 할 수 있다. 우선 함수선언문과 같은 경우를 살펴보자. 함수 선언문의 경우에는 호이스팅에 의해 함수 전체가 호이스팅…","fields":{"slug":"/js-functions/"},"frontmatter":{"date":"Jan 02, 2018","title":"Javascript 함수선언문과 함수표현식","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n`git log --oneline --graph` 처럼 명령어를 입력하면 Log를 보기 좋게 출력할 수 있는데,  \n매번 이 명령어를 치기도 곤혹이다. \n\nLinux의 alias를 이용하여 특정 명령어를 별도의 키워드로 지정하여 간단하게 사용할 수 있는다.\n\n```\n$ git config --global alias.[키워드] [명령어]\n```\n\n\n\n예로 `git log --oneline --graph`를 `git logs`로 간단히 사용하려면 아래와 같은 명령어를 사용한다.\n\n```\n$ git config --global alias.logs 'log --oneline --graph'\n```\n\n그 결과 아래와 같이 되었다.\n\n```\n$ git logs\n*   73a81d6 Merge branch 'dev'\n|\\\n| * 6f75a02 Add memo features\n| * b4de8c5 Modify bookmark localstorage name\n| * 7fa5424 Modify styles\n| * 86a5634 Add memo.js, add mvc layout\n| * 3688670 Add memo script\n| * 76e1478 Modify namespace name\n| * bd6dbdd Add bookmark title\n| * 4fbe5fb Add memo layout\n* | 78addaa Update README.md\n|/\n* 328f641 Fix bookmark add bug\n*   eb32dbc Merge branch 'dev'\n|\\\n| * 84b0d77 Modify bookmark modal style\n| * 4fc5a5c Modify bookmark bug fix\n| * 5ac2c33 Modify bookmark modal message\n| * 0a08125 Modify bookmark modal style\n| * 9d88539 Modify bookmark.js, Remove Unused property\n| * 34a6dd1 Refactoring bookmark.js\n| * 57cdfc5 Add .gitignore\n| * 1d1145b Modify bookmark, add drag sorting feature\n| * 2b13a6a Add jQuery-ui\n| * ebc5f98 Modify bookmark.js\n| * a58d2ff Modift bookmark, add modify function\n| * f0c1224 Modify Styles\n| * 4cf5a2a Modify index.html, cdn -> local\n| * c7d3110 Add Bootstrap local file\n```\n","excerpt":"처럼 명령어를 입력하면 Log를 보기 좋게 출력할 수 있는데, 매번 이 명령어를 치기도 곤혹이다.  Linux의 alias를 이용하여 특정 명령어를 별도의 키워드로 지정하여 간단하게 사용할 수 있는다. 예로 를 로 간단히 사용하려면 아래와 같은 명령…","fields":{"slug":"/git-alias/"},"frontmatter":{"date":"Dec 30, 2017","title":"Git, Alias(별칭)를 이용하여 편리하게 명령어 사용하기","tags":["git"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nHoist는 \"끌어올리다\"라는 뜻을 가지고 있다.  \n자바스크립트 엔진은 코드를 실행하기 전에 코드 전체를 살펴본다.  \n이 과정에서 선언된 내용이 있는지 '선언'을 살펴본다.  \n그리고 그 '선언'된 내용들을 모두 호이스팅. 즉, 끌어올리게 된다.  \n\n아래 코드를 보자.\n\n\n```javascript\nconsole.log(a());\nconsole.log(b);\nconsole.log(c());\nfunction a() {\n  return 'a';\n}\nvar b = 'b';\nvar c = function(){\n  return 'c';\n}\n```\n\n일반적인 생각으로 코드가 라인 순서대로 실행된다면, \n1번 라인에서부터 함수 a가 선언되기 전이므로 a가 없어 오류가 발생해야한다.\n하지만 위에서 설명한 호이스팅에 따라서 결론적으로 실행되는 코드는 아래와 같게 된다.\n\n```javascript\nfunction a() {\n  return 'a';\n}\nvar b;\nvar c;\nconsole.log(a());\nconsole.log(b);\nconsole.log(c());\nb = 'b';\nc = function(){\n  return 'c';\n}\n```\n\n**함수 선언문 a는 통째로 끌어올려졌다.**\n기본 값이 담긴 변수 b와 함수 표현식 c는 선언만 끌어올려졌다.\n할당은 호이스팅의 해당 사항이 아니다.\nb와 c는 선언과 할당이 동시에 이루어진 것으로 분리되어 선언만 호이스팅 된 것이다.\n\n따라서 위의 코드에서는 에러가 하나 발생하게 된다.\n\n```javascript\na\nundefined\nUncaught TypeError: c is not a function\n```\n\n`console.log(a())`는 정상적으로 출력되어 'a'가 출력되었고,\n`console.log(b)`는 `var b`의 선언만이 호이스팅 되었으므로 undefined가 출력,\n`console.log(c())`는 `var c`의 선언만이 있고 함수 호출을 하였으므로 함수가 아니라는 오류가 발생하게 된다.","excerpt":"Hoist는 \"끌어올리다\"라는 뜻을 가지고 있다. 자바스크립트 엔진은 코드를 실행하기 전에 코드 전체를 살펴본다. 이 과정에서 선언된 내용이 있는지 '선언'을 살펴본다. 그리고 그 '선언'된 내용들을 모두 호이스팅. 즉, 끌어올리게 된다.   아래 …","fields":{"slug":"/js-hoisting/"},"frontmatter":{"date":"Dec 30, 2017","title":"자바스크립트 호이스팅(Hoisting)","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## 환경\n\n- Create-react-app (CRA)\n- SCSS 로 적용\n\n\n\n\n## 적용법\n\n### react 설정 eject & sass 패키지 설치\n\n1. `$ npm run eject` 를 실행한다.\n   해당 명령어는 `node_modules/react-scripts`에 위치하던 환경설정을 프로젝트 루트 경로로 이동시켜 상세한 환경설정이 가능하도록 한다.\n2. `npm install --save node-sass sass-loader`  두개의 패키지를 설치한다.\n   - node-sass : sass 코드를 css 코드로 변환\n   - sass-loader : webpack에서 sass 파일을 읽는 역할.\n\n\n### 코드 수정\n\n#### `config/webpack.config.dev.js` \n\nfile-loader 키워드를 찾아 아래 코드에서 exclude 배열에 ` /\\.scss$/`를 추가해준다.\n\n```javascript\n{\n  // exclude: [/\\.js$/, /\\.html$/, /\\.json$/] \n  exclude: [/\\.js$/, /\\.html$/, /\\.json$/, /\\.scss$/],\n    loader: require.resolve('file-loader'),\n      options: {\n        name: 'static/media/[name].[hash:8].[ext]',\n      },\n},\n```\n\n`test: /\\.css$/` 키워드를 찾아 아래 코드를 수정한다.\n\n- `test: /\\.css$/`를 `test: /\\.scss$/`로 수정한다.\n- postcss-loader 로더 아래 sass-loader 로더 코드를 추가한다\n\n\n```javascript\nmodule : {\n  //...\n    {\n      // test: /\\.css$/,\n      test: /\\.scss$/,\n        use: [\n          require.resolve('style-loader'),\n          {\n            loader: require.resolve('css-loader'),\n            options: {\n              importLoaders: 1,\n            },\n          },\n          {\n            loader: require.resolve('postcss-loader'),\n            options: {\n              ident: 'postcss',\n              plugins: () => [\n                require('postcss-flexbugs-fixes'),\n                autoprefixer({\n                  browsers: [\n                    '>1%',\n                    'last 4 versions',\n                    'Firefox ESR',\n                    'not ie < 9',\n                  ],\n                  flexbox: 'no-2009',\n                }),\n              ],\n            },\n          },\n          // 아래 4줄 코드 추가\n          {\n            loader: require.resolve('sass-loader'),\n            options: {}\n          }\n          // \n        ],\n    },\n    /...\n}\n```\n\n\n\n#### `config/webpack.config.prod.js` \n\n위 dev 설정 파일과 비슷하게 수정한다.\n\n- file-loader 키워드를 찾아 아래 코드에서 exclude 배열에 ` /\\.scss$/`를 추가해준다.\n- `test: /\\.css$/` 키워드를 찾아 코드를 수정한다.\n  - `test: /\\.css$/`를 `test: /\\.scss$/`로 수정한다.\n  - postcss-loader 로더 아래 sass-loader 로더 코드를 추가한다\n\n\n\n## 사용\n\n기존의 css 파일을 scss로 확장자 변경하여 사용할 수 있다.\n\n또한 설정 변경 전 `npm start`가 실행중이었다면 새로 시작해주어야한다.\n\n\n\n[SASS Documentation (Ko)](https://sass-guidelin.es/ko/)\n\n[SASS Official Site](http://sass-lang.com/)\n\n\n\n\n\n---\n\n## Reference\n\n[리액트 컴포넌트 스타일링 – CSS Module / Sass / styled-components](https://velopert.com/3447)","excerpt":"환경 Create-react-app (CRA) SCSS 로 적용 적용법 react 설정 eject & sass 패키지 설치  를 실행한다.\n해당 명령어는 에 위치하던 환경설정을 프로젝트 루트 경로로 이동시켜 상세한 환경설정이 가능하도록 한다.   두…","fields":{"slug":"/js-react-apply-sass/"},"frontmatter":{"date":"Nov 08, 2017","title":"React 프로젝트에 SASS 적용하기","tags":["react","javascript","sass"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n### Cookie\n\n클라이언트(브라우저)에 데이터를 저장한다.  \n`setCookie(Key_String, Value_String)`  \n`$_COOKIE`\n\n```php\n<?php\n  setCookie('user', 'baik');\n  echo $_COOKIE['user']; // baik\n?>\n```\n\n#### 위 코드의 문제점\n\n위 코드가 HTML 코드 안에 포함되어있다면 \n\n`Warning: Cannot modify header information ...`\n\n위와 같은 Warning을 만나게 되는데 HTML 코드 바깥으로 setCookie() 를 옮기면 해결할 수 있다 자세한 내용은 [링크](https://stackoverflow.com/questions/2658083/setcookie-cannot-modify-header-information-headers-already-sent) 참고.\n\n이 경고는 session에서도 동일하게 발생한다.\n\n### Session\n\nSessionID(SID)를 식별자로 서버에 데이터를 저장\n\nSID로는 쿠키나 도메인 파라미터를 사용\n\n`session_start();`로 시작, 스크립트의 최상단에 위치해야함\n\n`$_SESSION`\n\n데이터는 서버 내에 파일이나 DB에 저장\n\n주로 사용자 인증시에 사용함\n\n```php\n<?php\nsession_save_path('./session');\nsession_start();\n$_SESSION['name'] = 'baik';\necho $_SESSION['name'];\n?>\n```\n\n#### 간단한 로그인 예제\n\n- login.html\n\n```html\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" >\n  </head>\n  <body>\n    <form action=\"login_process.php\" method=\"POST\">\n      <p><label>아이디</label><input type=\"text\" name=\"id\" /></p>\n      <p><label>비밀번호</label><input type=\"text\" name=\"pwd\" /></p>\n\n      <input type=\"submit\" />\n    </form>\n  </body>\n</html>\n```\n\n- login_process.php\n\n```php\n<?php\nsession_start();\n$id = 'id';\n$pwd = 'pw';\nif(!empty($_POST['id']) && !empty($_POST['pwd'])){\n    if($_POST['id'] == $id && $_POST['pwd'] == $pwd){\n        $_SESSION['is_login'] = true;\n        $_SESSION['nickname'] = 'nick';\n        header('Location: ./session.php'); //redirection\n        exit;\n    }\n}\necho '로그인 하지 못했습니다.';\n?>\n```\n\n- session.php\n\n```php\n<?php\nsession_start();\nif(!isset($_SESSION['is_login'])){\n    header('Location: ./login.html');\n}\n?>\n    <html>\n\n    <head>\n        <meta charset=\"UTF-8\">\n    </head>\n\n    <body>\n        <?php echo $_SESSION['nickname'];?>님 환영합니다\n        <br />\n        <a href=\"./logout.php\">로그아웃</a>\n    </body>\n\n    </html>\n```\n\n- logout.php\n\n```php\n<?php\nini_set(\"display_errors\", \"1\");\nsession_start();\nsession_destroy();\nheader('Location: ./login.html');\n?>\n```\n\n## Reference\n\n- [생활코딩 PHP 기본 강의](https://opentutorials.org/module/6)\n","excerpt":"Cookie 클라이언트(브라우저)에 데이터를 저장한다.   위 코드의 문제점 위 코드가 HTML 코드 안에 포함되어있다면   위와 같은 Warning을 만나게 되는데 HTML 코드 바깥으로 setCookie() 를 옮기면 해결할 수 있다 자세한 내용…","fields":{"slug":"/php-cookie-session/"},"frontmatter":{"date":"Nov 06, 2017","title":"PHP Cookie, Session","tags":["php"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n타 언어를 사용하다가(파이썬 제외...) 자바스크립트를 처음 접한 사람에게는 세미콜론을 쓰지 않고도 오류가 나지 않는 것을 보고 꽤나 놀랐을 것이다.\n\n\n\n\"자바스크립트에서는 세미콜론을 쓰지 않아도 오류가 나지 않는데 그렇다면 세미콜론을 쓰지 않고 짧게 작성하는게 좋지\" 라는 사람도 있다.\n\n어느쪽이 바람직 한 것일까...?\n\n\n\n우선 자바스크립트에서 세미콜론(;)을 쓰지 않아도 오류가 나지 않는 이유는  \n**ASI (Automatic Semicolon Insertion)**라는 것 때문이다.\n\n이것을 통해 엔진이 자동으로 ; 을 삽입해 주는 것이다.\n\n\n\n중요한 점은 개행, 즉 **새 줄(Line Break)에만 적용**된다는 점이다.\n\n\n\n아래 경우를 보자\n\n```javascript\nvar i = 0;\ndo {\n    console.log(i);\n} while(i===10)\ni;\n```\n\ndo-while의 경우 while끝에 ;을 붙여야 문법적으로 맞는데 깜박하더라도 ASI가 ;을 삽입해준다.\n\n```javascript\nfunction foo(){\n    if(true) return\n    console.log(\"foo\");\n}\n```\n\n위의 경우도 return 뒤에 ;을 붙여줄 것이다.  \n이 경우에는 console.log가 실행되게 할지 말지 의도한게 어떤 것인지에 따라  \n유용하게 된 경우 또는 실수에서 이어진 문제점으로 해석 될 수도 있다.\n\n\n\n세미콜론(;)을 쓰지 않더라도 유용한 ASI가 존재함에 따라 대부분은 문제가 없을 것이다.  \n그러나 초보 개발자의 실수라던가 또는 의도하지 않은 ;의 삽입으로 곤혹을 겪을 가능성이 어찌되었건 존재한다.\n\n\n\n```\n\"ASI(Automatic Semicolon Insertion) is an error correction procedure.  \nIf you start to code as if it were a universal significant-newline rule,  \nyou will get into trouble.\" —Brendan Eich\n```\n\n위는 자바스크립트의 창시자인 브렌던 아이크가 한 말이다.  \n여기서 ASI를 에러 정정 프로시저라고 말하며 이것을 보편적인 것처럼 코딩한다면 문제에 당도할 것이라고 말하고 있다.\n\n\n\n자바스크립트에서 세미콜론을 쓰는가 마는가는,  \n공백은 탭인가 스패이스인가와 같은 논쟁거리가 아니라고 생각한다.  \nASI는 에러 정정을 목적으로 만들어졌고, 아무리 적은 가능성이라도 오류가 날 가능성이 있다면,  \n글쓴이 본인은 ; 을 쓰는 것이 맞다고 생각한다.","excerpt":"타 언어를 사용하다가(파이썬 제외...) 자바스크립트를 처음 접한 사람에게는 세미콜론을 쓰지 않고도 오류가 나지 않는 것을 보고 꽤나 놀랐을 것이다. \"자바스크립트에서는 세미콜론을 쓰지 않아도 오류가 나지 않는데 그렇다면 세미콜론을 쓰지 않고 짧게 …","fields":{"slug":"/js-semicolon-asi/"},"frontmatter":{"date":"Oct 17, 2017","title":"자바스크립트에서 세미콜론(;)을 안써도 될까?","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nJavascript는 Java와 달리 int, double 같은 숫자 타입이 나눠져있지 않다.  \nnumber 하나로 정수(Integer)와 부동 소수점 수를 모두 표현한다.\n\n\n\n### 숫자 리터럴\n\n```javascript\nvar n = 12 //12\nn = 12. //12\nn = 12.0 //12\nn = 12.300 //12.3\nn = 0.12 //0.12\nn = .12 //0.12\n```\n\n.12, 12. 과 같은 방식은 틀린 것은 아니더라도 좋은 코드라고 하긴 어려울 것이다.\n\n\n\n### Number Methods\n\n#### - Number.isInteger()\n\n정수인지 확인할 수 있는 메서드.\n\n```javascript\nvar n = 12;\nNumber.isInteger(n); // true\nn = .12;\nNumber.isInteger(n); // false\n```\n#### - Number.isSafeInteger()   **/\\*ES6\\*/**\n\n안전한 정수값인 `-(253 - 1)` 부터 `253 - 1` 사이의 정수 값인지 확인하는 메서드, ES6에서 출현하였다.\n\n```javascript\nNumber.isSafeInteger(100);                    // true\nNumber.isSafeInteger(Math.pow(2, 53));      // false\nNumber.isSafeInteger(Math.pow(2, 53) - 1);  // true\n```\n\n#### - Number.toFixed()\n\n인자로 넘긴 수 만큼의 소수점 이하를 반올림하여 문자열 형태로 반환하는 메서드.\n\n```javascript\nvar n = 12.39;\nn.toFixed(0); //\"12\"\nn.toFixed(1); //\"12.4\"\nn.toFixed(2); //\"12.39\"\nn.toFixed(3); //\"12.390\"\n```\n\n#### - Number.toPrecision()\n\n수의 길이를 제한하여 문자열로 반환한다.\n\n```javascript\nvar n = 12.39;\nn.toPrecision() //\"12.39\"\nn.toPrecision(1) //\"1e+1\"\nn.toPrecision(2) //\"12\"\nn.toPrecision(3) //\"12.4\"\nn.toPrecision(4) //\"12.39\"\n```\n\n#### - Number.toExponential()\n\n수를 지수표현식 문자열으로 반환한다.\n\n```javascript\nvar n = 10000000000;\nn; // 10000000000\nn.toExponential(); //\"1e+10\"\n```\n\n\n\n---\n\n\n\n### 0.5 === 0.2 + 0.3 // false ??\n\nJava나 타 언어를 배워봤다면 한번은 봤을만한 질문이다. \n\n0.5와 같은 부동 소수점 수는 결국 프로그래밍 언어에서는 0.5000000001과 같이 0.5와 가까운 수이기 때문이라는 것인데...\n\nJavascript에서는 어떨까?\n\n아래는 크롬 브라우저(2017.10 최신버전)의 콘솔창 결과이다.\n\n```javascript\n0.0000005 === 0.0000002 + 0.0000003;\ntrue\n0.000005 === 0.000002 + 0.000003;\nfalse\n0.00005 === 0.00002 + 0.00003;\ntrue\n0.0005 === 0.0002 + 0.0003;\ntrue\n0.005 === 0.002 + 0.003;\ntrue\n0.05 === 0.02 + 0.03;\ntrue\n0.5 === 0.2 + 0.3;\ntrue\n\n0.1 + 0.2 === 0.3\nfalse\n\n1.2 - 1 \n0.19999999999999996\n1.5 - 0.5\n1\n```\n\n모두 true 이길 바라지만 결과는 그렇지 않다. 더 어려운 것은 모두 false도 아니라는 것이다.\n\n어떤 것은 true이고 어떤 것은 false인 이러한 이유는 아직까지 정확하게 찾지 못했지만 부동 소수점 수의 계산에 있어 조심해야한다는 것을 알 수 있다.\n\n\n\n##### 해결 방법\n\n```javascript\n(1.2 - 1).toFixed(1) * 1 // 0.2\n(1.1000001 - 1).toFixed(7) * 1 // 0.1000001\n```\n\nNumber의 메서드를 사용하여 위와 같은 방법으로 해결하는 방법도 있다.\n\n","excerpt":"Javascript는 Java와 달리 int, double 같은 숫자 타입이 나눠져있지 않다. number 하나로 정수(Integer)와 부동 소수점 수를 모두 표현한다. 숫자 리터럴 .12, 12. 과 같은 방식은 틀린 것은 아니더라도 좋은 코드라…","fields":{"slug":"/js-number-type/"},"frontmatter":{"date":"Oct 16, 2017","title":"자바스크립트의 숫자 타입(Number Type)","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Set\n\n중복없이 유일한 값을 저장하기 위한 타입, 이미 존재하는지 체크할때 유용하다\n\n```javascript\nlet mySet = new Set();\nconsole.log(toString.call(mySet)); // [object Set]\n\nfunction print(set){\n  set.forEach(function(value){\n    console.log(value); \n  });\n}\n\nmySet.add('a');\nmySet.add('b');\nmySet.add('a'); //저장 안됨\n\nprint(mySet); // \"a\" \"b\"\n\nconsole.log(mySet.has('b')); // true\n\nmySet.delete('a');\n\nprint(mySet); // \"b\"\n```\n\n\n\n## WeakSet\n\n참조를 가지고 있는 객체만 저장이 가능하다.\n\n참조를 가지고 있던 객체가 참조를 잃게 되면 (null 이 되거나…) 가비지컬렉션의 대상이 된다.\n\n객체를 중복없이 저장하고 활용하려할때 유용하게 쓰일 수 있다.\n\n```javascript\nlet ws = new WeakSet();\nconsole.log(toString.call(ws)); // [object WeakSet]\n\nlet arr = [1,2,3,4,5];\nlet obj = { arr };\nlet number = 100;\nfunction foo(){}\n\n//ws.add(100);\nws.add(arr);\nws.add([1,2,3,4,5]);\nws.add(obj);\n//ws.add(100);\n//ws.add(number);\n//ws.add('string')\nws.add(foo);\nws.add(function a(){});\n// 위 주석처리는 모두 에러 발생한 것들\n// TypeError: Invalid value used in weak set\n\n\narr = null;\nconsole.log(ws.has(arr)); //false\n```\n\n\n\n\n\n### map / WeakMap\n\nmap과 set의 차이는 다루는 타입과, 구조가 다르다.\n\nmap => object , key/value\nset => array\n\n이러한 차이점 이외에는 사용법은 거의 동일하다, \nWeak와 같은 경우에도 참조가 사라지면 가비지컬렉션의 대상이 되는 것도 동일하다.\n\nmap을 활용하여 따로 부가적인 정보를 저장하는 key/value를 활용할 수 있는 것 정도의 차이점이 있다.\n\n### \n\n#### WeakMap 활용\n\n프라이빗한 변수 만들기.\n\n```javascript\nconst wm = new WeakMap();\n\nfunction MyInfo(name, age){\n  wm.set(this, {name, age});\n}\n\nMyInfo.prototype.getInfo = function(){\n  const {name, age} = wm.get(this);\n  return 'name:'+name+\"/age:\"+age;\n}\n\nlet myInfo = new MyInfo('baik', 27);\n\nconsole.log(myInfo.getInfo());\n//\"name:baik/age:27\"\n\nconsole.log(wm.has(myInfo)); //true\nmyInfo = null;\nconsole.log(wm.has(myInfo)); //false\n\n//myInfo를 통해서는 name, age 값을 뽑아낼 수 없다, (private)\n```\n\n\n\n---\n\n## Reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)\n","excerpt":"Set 중복없이 유일한 값을 저장하기 위한 타입, 이미 존재하는지 체크할때 유용하다 WeakSet 참조를 가지고 있는 객체만 저장이 가능하다. 참조를 가지고 있던 객체가 참조를 잃게 되면 (null 이 되거나…) 가비지컬렉션의 대상이 된다. 객체를 …","fields":{"slug":"/js-es6-set-map/"},"frontmatter":{"date":"Oct 14, 2017","title":"자바스크립트 ES6 Set, WeakSet / Map, WeakMap","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"자바스크립트의 배열은 어떤 타입이던 담을 수 있고, 배열 크기도 미리 정하지 않는다.\n\n```javascript\nvar arr = [\n  null,\n  undefined,\n  true,\n  1,\n  \"array\",\n  {}\n];\n\nconsole.log(arr); \n// [null, undefined, true, 1, \"array\", [object Object]{...}]\n\nconsole.log(typeof arr, toString.call(arr));\n//'object', '[object Array]'\n```\n\n\n\n### 배열에서 빈 슬롯의 주의점\n\n배열에서 주의 해야할 점은 중간에 빈 구멍이 있는 배열을 조심해야 한다.\n\n```javascript\nvar arr = [];\narr[0] = 1;\narr[2] = 2;\narr[3] = undefined;\n```\n\n위와 같은 코드가 있을때 배열의 1번은 비어있을 것이다. 어떤 배열이 되어있을지 보면\n\n```javascript\nconsole.log(arr); //[1, undefined, 2, undefined]\nconsole.log(arr.length); // 4\n```\n\n위와 같이 되어있다. 비어있는 배열이 undefined가 되어있다.\n1번 undefined와 따로 선언한 undefined의 3번은 서로 같은 것인 것일까?\n\n```javascript\nconsole.log(arr[1] === arr[3])\nconsole.log(typeof arr[1] === typeof arr[3]);\nconsole.log(toString.call(arr[1]) === toString.call(arr[3]));\nconsole.log(arr[1] === undefined);\nconsole.log(arr[3] === undefined);\n```\n\n이렇게 비교를 해 보아도 모두가 **true** 로 일치한다고 나온다 하지만\n빈 슬롯이 undefined과 된 것과 선언으로 인해 undefined 인 것은 **엄연히 다르다.**\n\n그 이유는 아래에서 알 수 있다.\n\n```javascript\nconsole.log(arr);\n[1, undefined, 2, undefined]\n\nfor(index in arr){\n  console.log(index);\n}\n// 0, 2, 3\n\nvar newArr = [];\narr.forEach(function(value, index){\n  console.log(\"index:\"+index+\"/value:\"+value);\n  newArr.push(value);\n})\n// \"index:0/value:1\"\n// \"index:2/value:2\"\n// \"index:3/value:undefined\"\n\nconsole.log(newArr);\n// [1, 2, undefined]\n```\n\nfor in, forEach 등을 통해 실험을 해 본 결과이다.\nfor in 에서는 index 1이 존재하지 않는 것으로 보이고,\nforEach를 통해서도 새로운 배열을 복사하는 것을 하려 했으나 1번 배열이 빠진채로 수행 된 것을 볼 수 있다.\n\n이러한 예제를 통해 빈 슬롯이 있는 배열을 다루게 된다면 조심해야한다는 것을 알 수 있다.\n\n\n\n### 배열의 key/property 형태의 활용\n\n배열 인덱스는 숫자이다. 그런데 배열도 객체이기 때문에 key/property 문자열을 추가 할 수 있다.\n\n```javascript\nvar arr = [];\n\narr[0] = 1;\narr[\"two\"] = 2;\n```\n\n조심해야할 점은 이렇게 선언할 경우 배열의 길이는 늘어나지 않는 것을 조심해야한다. 또한 배열을 출력할 경우 나타나지 않는다.\n\n```javascript\nconsole.log(arr); // [1]\nconsole.log(arr[\"two\"]); // 2\n\nconsole.log(arr.length); // 1\n\nfor(index in arr){\n  console.log(index);\n} // '0'\n```\n\n더욱 조심해야 할 점은 키로 넣은 문자열이 표준 10진수 숫자로 이루어져 있다면 아래와 같은 결과를 얻게 된다.\n\n```javascript\narr[\"5\"] = \"five\";\nconsole.log(arr);\n//[1, undefined, undefined, undefined, undefined, \"five\"]\nconsole.log(arr.length); // 6\n\nfor(index in arr){\n  console.log(index);\n} // '0', '5', 'two'\n```\n\n키/프로퍼티 형태로 활용하는 것을 지양하고 이렇게 써야한다는 상황이라면 문자열 프로퍼티는 꼭 숫자가 아닌 글자만 사용하도록 하자.\n\n\n\n### 유사배열\n\n유사배열을 진짜 배열로 바꾸는 방법\n\n일반적으로 indexOf, concat, forEach 등의 배열 함수들을 사용한다, \n또한 slice를 활용한 방법도 있다\n\n```javascript\nfunction test(){\n  var arr = Array.prototype.slice.call( arguments );\n  return arr;\n}\n\nvar a = test('a', 1);\nconsole.log(toString.call(a), a); \n//\"[object Array]\" [\"a\", 1]\n```\n\nES6에 와서는 유사 배열을 진짜 배열로 바꾸는 기능이 추가되었다. \n`Array.from()`\n\n```javascript\nfunction test(){\n  var arr = Array.from( arguments );\n  return arr;\n}\n\nvar a = test('a', 1);\nconsole.log(toString.call(a), a); \n//\"[object Array]\" [\"a\", 1]\n```","excerpt":"자바스크립트의 배열은 어떤 타입이던 담을 수 있고, 배열 크기도 미리 정하지 않는다. 배열에서 빈 슬롯의 주의점 배열에서 주의 해야할 점은 중간에 빈 구멍이 있는 배열을 조심해야 한다. 위와 같은 코드가 있을때 배열의 1번은 비어있을 것이다. 어떤 …","fields":{"slug":"/js-array/"},"frontmatter":{"date":"Sep 11, 2017","title":"자바스크립트의 배열(Array)","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Javascript Variable Types\n\n\n자바스크립트의 변수는 모든 데이터 타입을 수용할 수 있도록 되어있다.\n\n`typeof` 라는 특정 변수의 데이터 타입을 확인하여 문자열로 반환하는 연산자가 있다.\n\n\n\n- **값은 타입을 가진다 / 변수에는 따로 타입이란 없다**\n  변수는 언제라도 어떤 형태의 값이라도 가질 수 있다.\n  `var a = '123'`\n  변수 a는 string 타입이다 (X)\n  변수 a의 값으 string 타입이다 (O) //정확한 표현\n\n  ​\n\n### Standard defines seven data types\n\n1. Six data types that are primitives\n  1. Boolean\n  2. Null\n  3. Undefinend\n  4. Number\n  5. String\n  6. Symbol\n2. and Object\n\n\n\n\n… symbol 은 ES6부터 출현한 타입\n\n… object를 제외한 나머지 타입을 원시 타입(primitives)이라 한다\n\n\n\n### typeof results\n\n\n| Type             | 'typeof' Result |\n| ---------------- | --------------- |\n| number           | number          |\n| string           | string          |\n| boolean          | boolean         |\n| undefined        | undefined       |\n| null             | **object**      |\n| symbol           | symbol          |\n| function object  | function        |\n| any other object | object          |\n\n\n\n- **typeof null === 'object' //… true ??**\n\n자바스크립트에서는 null 이 기본형으로 구분되어있다.\n하지만 typeof null의 결과로는 null이 반환되지 않고 object가 반환되는 이유는 자바스크립트 개발 당시 다른 언어들과 같이 null이 0값을 가지고 있는 객체로 취급하여 object를 반환하도록 개발되었기 때문이다.\nnull값이 기본형이므로 반환값을 null로 바꾸자는 의견도 많으나 이미 object 반환 방식으로 구현된 웹들이 많아 쉽게 바꾸지 못하고 있다.\n\nnull을 확인하기 위한 방법으로는 (var a = null)\n`!a && typeof a === 'object'`\n\n- **typeof function a(){} // function**\n\ntypeof가 반환하는 값 중 7가지 타입이 아닌 것이 하나 있는데 그것이 function이다.  function은 object의 하위 타입으로 함수가 객체라서 유용한 점으로는 property를 들 수 있다, a.length로 property의 갯수를 알 수 있다.\n\n- **배열…?**\n\ntypeof [1,2,3] // 'object' 이다.\n배열도 객체이기 때문이다, 숫자 인덱스를 가지고 length 프로퍼티가 자동으로 관리되는 등 추가 특성을 가진 객체의 하위 타입이라 할 수 있다.\ntoString.call([1,2,3]) 을 사용하면 [object Array]의 반환값을 얻어 구체적으로 타입을 알 수 있어 배열인지 알 수 있게 된다.\n\n\n\n### undefined\n\n```javascript\nvar a;\nconsole.log(a); //undefined\nvar b = 1;\nconsole.log(b); //1\nvar c;\nconsole.log(c); //undefined\nb = c;\nconsole.log(b); //undefined\nconsole.log(d); //ReferenceError: d is not defined\n```\n\n위의 코드를 보면\n\nundefined (값이 없는), undefined(선언되지 않은) 은 자바스크립트에서는 전혀 다르다는 것을 알 수 있게 된다.\n\n\n\n```javascript\nvar a;\nvar b = 1;\nconsole.log(typeof a); //undefined\nconsole.log(typeof b); //undefined\nconsole.log(typeof c); //undefined\n```\n\n위의 코드를 보면 typeof는 값이 없는, 선언되지 않은 것 모두가 undefined 으로 표시된다.\n\ntypeof로는 둘을 구분 할 수 없지만 이렇게 에러가 발생하지 않는 특성(안전가드라고 한다)을 이용하여 유용하게 사용하는 방법도 있다.","excerpt":"Javascript Variable Types 자바스크립트의 변수는 모든 데이터 타입을 수용할 수 있도록 되어있다.  라는 특정 변수의 데이터 타입을 확인하여 문자열로 반환하는 연산자가 있다. 값은 타입을 가진다 / 변수에는 따로 타입이란 없다\n변수…","fields":{"slug":"/js-variable-types/"},"frontmatter":{"date":"Sep 11, 2017","title":"자바스크립트의 타입들","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nProxy : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n\n\n```javascript\nconst myInfo = {\n  name: 'baik'\n};\n\nconst proxy = new Proxy(myInfo, {});\n// Proxy(object, handler);\n\nconsole.log(toString.call(proxy)); // object\n\n\nconsole.log(proxy.name); // baik\nproxy.name = 'junho';\nconsole.log(proxy.name); // junho\nconsole.log(myInfo.name); // junho\n\n\nconsole.log(proxy === myInfo); // false\nconsole.log(proxy.name === myInfo.name); // true\n```\n\n\n\n```javascript\nconst myInfo = {\n  name: 'baik',\n  change: 0\n};\n\nconst proxy1 = new Proxy(myInfo, {});\n\nconst proxy2 = new Proxy(myInfo, {\n  get: function(target, property, receiver){\n    console.log(\"get\");\n    return target[property];\n  },\n  set: function(target, property, value){\n    console.log(\"set\");\n    target['change']++;\n    target[property] = value;\n  }\n  // target => myInfo\n  // receiver => proxy2\n});\n\n\nconsole.log(proxy1.name); // \"baik\"\nconsole.log(proxy2.name); // \"get\" \"baik\"\nconsole.log(proxy2.change); // \"get\" 0\nproxy2.name = 'junho'; // \"set\"\nconsole.log(proxy2.name); // \"get\" \"junho\"\nconsole.log(proxy2.change); // \"get\" 1\nconsole.log(myInfo.name); // \"junho\"\n\n//porxy의 getter setter를 통해서 값을 가로채서 값을 변화시킨다거나,\n//변경사항 로그를 남기는 등의 용도록 활용할 수 있다.\n```\n\n\n\n권장되는 패턴\n\n```javascript\nconst proxy = new Proxy(myInfo, {\n  get: function(target, property, receiver){\n    //...\n    return Reflect.get(target, property);\n    // Reflect 활용\n  },\n```\n\n\n\n\n\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"Proxy : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Proxy 권장되는 패턴 reference 모던 자바스크립트(javascript) 개발을 위한 …","fields":{"slug":"/js-es6-proxy/"},"frontmatter":{"date":"Sep 09, 2017","title":"자바스크립트 ES6 프록시(Proxy)","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nES6에서 출현한 module 기능은 브라우저 호환성이 아직은 완전하지 않다.  \ndevOps로 webpack, babel 등을 활용해 사용해 서비스 코드를 만드는 것이 좋다.\n\n\n\n### 기본 사용법\n\napp.js\n\n```javascript\nimport foo from './foo';\n\n// ...\n\nprint('Hello World'); // Hello World\n```\n\nfoo.js\n\n```javascript\nexport function print(value){\n    console.log(value);\n}\n```\n\n\n\n\n\n### 심화, 서비스 코드 구현\n\napp.js\n\n```javascript\nimport sayHi, { print, getTime, myInfo } from './foo';\n//default로 지정한 것은 {}바깥, 그렇지 않은 것들은 {}안에 위치한다.\n\n// ...\n\nprint('Hello World'); // Hello World\ngetTime(); // \n\nconst me = new myInfo();\nprint(`My Name is ${getFullName()}`);\n// My Name is Junho Baik\n```\n\nfoo.js\n\n```javascript\nexport function print(value){\n    console.log(value);\n}\n\nexport const getTime = () => {\n    return Date.now();\n}\n\nexport class myInfo {\n    constructor(props){\n        this.name = [\"Junho\", \"Baik\"];\n    }\n  \n    getFullName(){\n        return this.name[0] + \" \" + this.name[1];\n    }\n}\n\nconst sayHi = () => {\n    console.log(\"Hi!\");\n}\nexport default sayHi;\n// export defalut const sayHi... 이와 같이는 쓸 수 없다.\n```\n\n\n\n\n```javascript\nexport const _ = {\n    print(value){\n        if(window.console) console.log(value);\n    }\n  \t\n  \t// ...\n}\n\n// 위와 같은 방식으로 사용하여\n_.print(\"ABC\"); // 이와같이 사용하는 방법 또한 있다.\n```\n\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"ES6에서 출현한 module 기능은 브라우저 호환성이 아직은 완전하지 않다. devOps로 webpack, babel 등을 활용해 사용해 서비스 코드를 만드는 것이 좋다. 기본 사용법 app.js foo.js 심화, 서비스 코드 구현 app.js …","fields":{"slug":"/js-es6-module/"},"frontmatter":{"date":"Sep 01, 2017","title":"자바스크립트 ES6 module(export&import)","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nsetPrototypeOf 로 프로토타입 객체를 추가 할 수 있다.  \n`Object.setPrototypeOf(obj, prototype)`  \nobject에 prototype을 추가한다.\n\n\n\n```javascript\nconst infoObj = {\n  sayHi : function(){\n    console.log(\"Hi \" + this.name)\n  },\n  setName : function(name){\n      this.name = name;\n  }\n};\n\nconst myInfo = {\n  name : \"Baik\",\n  msg : \"Hi\"\n};\n\nObject.setPrototypeOf(myInfo, infoObj);\n\nconsole.log(myInfo.sayHi());\n//Hi Baik\n\nmyInfo.setName(\"Baek\");\n\nconsole.log(myInfo.sayHi());\n```\n\n\n\n\n\n### setPrototypeOf 로 개체간 prototype Chain 만들기\n\n\n\n```javascript\nconst infoObj = {\n  sayHi : function(){\n    console.log(\"Hi \" + this.name)\n  },\n  setName : function(name){\n      this.name = name;\n  }\n};\n\nconst infoChildObj = {\n  getAge : function(){\n    return this.age;\n  }\n}\n\nconst myInfo = Object.setPrototypeOf({\n  age : 22\n}, infoChildObj);\n// Chain = infoChildObj - myInfo\n\nconsole.log(myInfo);\n// age, getAge\n\nObject.setPrototypeOf(infoChildObj, infoObj);\n// Chain = infoObj - infoChildObj - myInfo\n\nconsole.log(myInfo);\n// age, getAge, sayHi, setName\n\ninfoObj.sayAge = function(){\n  console.log(\"Age is \" + this.age)\n}\n// infoObj에 sayAge를 추가함으로 myInfo에 까지 영향을 미치게된다.\n\nconsole.log(myInfo);\n//age, getAge, sayAge, sayHi, setName\n\n\n```\n\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"setPrototypeOf 로 프로토타입 객체를 추가 할 수 있다.  object에 prototype을 추가한다. setPrototypeOf 로 개체간 prototype Chain 만들기 reference 모던 자바스크립트(javascript) 개발…","fields":{"slug":"/js-es6-setprototypeof/"},"frontmatter":{"date":"Sep 01, 2017","title":"자바스크립트 ES6 Object setPrototypeOf","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n아래 코드는 Object create를 사용한 코드이다.\n\n```javascript\nconst infoObj = {\n  showName : function(){\n    console.log(\"My name is \" + this.name);\n  }\n}\n\n//아래와 같은 방법으로 프로토타입을 사용한 것 보다 간결하게 나타낼 수 있다.\nconst myInfo = Object.create(infoObj);\n\nmyInfo.name = \"Junho\";\nmyInfo.age = 27;\n\nconsole.log(myInfo);\n/*\n{name: \"Junho\", age: 27}\n  age:27\n  name:\"Junho\"\n  __proto__: \n    showName: ƒ showName()\n    __proto__:Object\n*/\nconsole.log(myInfo.showName()); //\"My name is Junho\"\n```\n\n\n\n아래 코드는 위의 코드에 Object assign을 사용한 코드이다.\n\n`myInfo.name = \"Junho\";` 와 같이 계속해서 추가해야하는 수고를 덜어줄 수 있다.\n\n```javascript\nconst infoObj = {\n  showName : function(){\n    console.log(\"My name is \" + this.name);\n  }\n}\n\nconst myInfo = Object.assign(Object.create(infoObj), {\n  name : \"Junho\",\n  age : 27\n});\n\n\nconsole.log(myInfo);\nconsole.log(myInfo.showName());\n```\n\n\n\n\n\n## Object assign 으로 Immutable 객체 만들기\n\n```javascript\nconst previousObj = {\n  name : \"Junho\",\n  age : 27\n};\n\nconst myInfo = Object.assign({}, previousObj, {\n  name : \"Baik\",\n  msg : \"Hi\"\n});\n\nconst myInfo2 = Object.assign({}, previousObj, {});\n\n\nconsole.log(previousObj); //{name: \"Junho\", age: 27}\n\nconsole.log(myInfo); //{name: \"Junho\", age: 27}\nconsole.log(previousObj === myInfo); //false\n\nconsole.log(myInfo2); //{name: \"Junho\", age: 27}\nconsole.log(previousObj === myInfo2); \n//false\n//내용은 같으나 사실상 다른 객체이다, immutable object\n```\n\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"아래 코드는 Object create를 사용한 코드이다. 아래 코드는 위의 코드에 Object assign을 사용한 코드이다.  와 같이 계속해서 추가해야하는 수고를 덜어줄 수 있다. Object assign 으로 Immutable 객체 만들기 re…","fields":{"slug":"/js-es6-object-assign/"},"frontmatter":{"date":"Aug 10, 2017","title":"자바스크립트 ES6 Object.assign","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트에도 이번 ES6에서 Class라는 키워드가 생겼다.\n\n\n\n아래는 기존 자바스크립트의 코드이다.\n\n```javascript\nfunction myInfo(name) {\n    this.name = name;\n}\n\nmyInfo.prototype.showName = function(){\n    console.log(\"My name is \"+ this.name);\n}\n\nconst baik = new myInfo(\"Junho\");\nbaik.showName(); // \"My name is Junho\"\n```\n\n\n\n아래는 Class를 활용한 코드이다.\n\n```javascript\nclass myInfo {\n  constructor(name){\n    this.name = name;\n  }\n  \n  showName() {\n    console.log(\"My name is \"+ this.name);\n  }\n}\n\nconst baik = new myInfo(\"Junho\");\nbaik.showName(); //\"My name is Junho\"\n```\n\n위와 같이 클래스로 똑같은 코드를 구현할 수 있다. 하지만 그렇다고 클래스라는 것이 완전히 새로 생긴 것이 아니고 위와 같이 했더라도 내부적으로는 함수, 프로토타입을 통해 작동하는 것이다.\n\n```javascript\nconsole.log(toString.call(myInfo)); //[object Function]\n```\n\n이번에 ES6에서 편의와 가독성을 위해 class라는 키워드가 생긴 것이라고 볼 수 있다.\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"자바스크립트에도 이번 ES6에서 Class라는 키워드가 생겼다. 아래는 기존 자바스크립트의 코드이다. 아래는 Class를 활용한 코드이다. 위와 같이 클래스로 똑같은 코드를 구현할 수 있다. 하지만 그렇다고 클래스라는 것이 완전히 새로 생긴 것이 아…","fields":{"slug":"/js-es6-class/"},"frontmatter":{"date":"Aug 10, 2017","title":"자바스크립트 ES6 클래스(Class)","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nES6 에 출현한 새로운 형태의 함수 표현 방법\n\n```javascript\nconst fn = function(){};\nconst arrowFn = () => {};\n\n(v) => (v+1) //{}없이 사용, v+1이 리턴값\n(v) => v+1 //()생략 가능\n```\n\n\n\n### Arrow Function, this context\n\n```javascript\nconst obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this)); //[object Window]\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout(); //[object Window]\nobj.sayHi(); // hi [object Object]\n```\n\n위의 코드는 아무런 문제 없이 작동하는 코드이다, runTimeout은 settimeout때문에 이벤트큐에 등록 된뒤 실행되는 것이라 this가 해당 오브젝트가 아닌 윈도우이다. 우선 위에서 this가 가리키는 것이 무엇인지 잘 봐두고, 문제가 될 수 있는 상황을 아래서 살펴보자\n\n```javascript\nconst obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this));\n      this.sayHi(); //<========\n      //typeError: this.sayHi is not a function\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout();\n```\n\nrunTimeout 에서 sayHi를 실행하려면 this가 가리키는 것이 서로 다르기 때문에 오류가 난다.\n\n```javascript\nconst obj = {\n  runTimeout() {\n    setTimeout(function(){\n      console.log(toString.call(this)); //[obejct Object]\n      this.sayHi();\n    }.bind(this), 1000); //<========\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this)); //[obejct Object]\n  }\n}\n\nobj.runTimeout(); // [obejct Object] hi [obejct Object]\n```\n\n위와 같이 .bind(this) 를 사용하여 해결하는 방법이 있다.\n\n```javascript\nconst obj = {\n  runTimeout() {\n    setTimeout(()=>{ //<========\n      console.log(toString.call(this));\n      this.sayHi();\n    }, 1000);\n  },\n  \n  sayHi(){\n    console.log(\"hi\");\n    console.log(toString.call(this));\n  }\n}\n\nobj.runTimeout();\n```\n\n또 다른 방법으로 Arrow function을 이용하여 해결할 수 있다.\n\nArrow function은 항상 this context를 실행되는 해당 context를 유지하는 특성이 있다.\n\n\n\n---\n\n## reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"ES6 에 출현한 새로운 형태의 함수 표현 방법 Arrow Function, this context 위의 코드는 아무런 문제 없이 작동하는 코드이다, runTimeout은 settimeout때문에 이벤트큐에 등록 된뒤 실행되는 것이라 this가 해당…","fields":{"slug":"/js-es6-arrow-function/"},"frontmatter":{"date":"Jul 21, 2017","title":"자바스크립트 ES6 Arrow Function","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nJavascript에서는 배열로 보이지만 정작 배열이 아닌 형태의 것들이 존재한다.\n\n예로 메소드로 전달되는 인자들을 활용하는 arguments 객체같은 경우에도 배열같아보이지만 실제 배열은 아니다.\n따라서, map과 같은 배열을 다루는 메소드를 활용할 수 없는데 이러한 가짜 배열을 진짜배열로 바꿔주는 것을 from 이 해주게 된다.\n\n\n\n```javascript\nfunction toArray(array){\n  const len = array.length;\n  const temp = [];\n  \n  for(let i=0; i<len; i++){\n    temp.push(array[i]);\n  }\n  \n  return temp;\n}\n\nfunction toArray2(array){\n  return array.map(function(value){\n    return value;\n  })\n}\n\n\nfunction foo() {\n  \n  console.log(toString.call(arguments)); \n  // [object Arguments]\n  \n  console.log(toArray(arguments));\n  // [1, 2, 3, 4, 5]\n  \n  //console.log(toArray2(arguments));\n  // map 사용시 배열이 아니기 떄문에 오류 발생\n  \n  /*************************************/\n  \n  let newArray = Array.from(arguments);\n  \n  console.log(toString.call(newArray));\n  // [object Array]\n  \n  console.log(toArray(newArray));\n  // [1, 2, 3, 4, 5]\n  \n  console.log(toArray2(newArray));\n  // [1, 2, 3, 4, 5]\n}\n\nfoo(1,2,3,4,5);\n```\n\n\n\n위 코드에서 toArray2 메소드는 map을 활용하여 배열을 반환한다.\n\n하지만 arguments를 인자로 전달했을때는 에러가 발생하는 것을 볼 수 있다.","excerpt":"Javascript에서는 배열로 보이지만 정작 배열이 아닌 형태의 것들이 존재한다. 예로 메소드로 전달되는 인자들을 활용하는 arguments 객체같은 경우에도 배열같아보이지만 실제 배열은 아니다.\n따라서, map과 같은 배열을 다루는 메소드를 활용…","fields":{"slug":"/js-es6-from/"},"frontmatter":{"date":"Jun 29, 2017","title":"자바스크립트 ES6 from","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\n\n쉽게 말해 배열을 펼쳐주는 역할이다. ''[ ]''를 떼어낸다고 생각하면 쉽다.  \n배열을 바꾸지 않고 새로운 값을 복사, 배열을 합치거나 배열을 펼쳐진 상태로 파라메터로 전달 등의 활용이 가능하다.\n\n\n\n```javascript\nlet a = [1,\"\",undefined,NaN,null];\nlet b = [...a];\n\nconsole.log(a); //[1, \"\", undefined, NaN, null]\nconsole.log(b); //[1, \"\", undefined, NaN, null]\n\nconsole.log(a === b); //false\n// 새로운 배열로 메모리에 들어간 복사를 한 형태, \n// concat을 이용한 것과 같은 결과이다.\n// 배열을 바꾸지 않고 새로운 값을 복사할 수 있는 방법.\n```\n\n\n\n```javascript\nlet c = [...a, 'add'];\nconsole.log(c); //[1, \"\", undefined, NaN, null, \"add\"]\n// 기존에 복잡한 과정을 거쳐했던 것을 간단하게 \n// 이러한 방식으로 배열 앞뒤에 새로운 것을 추가할 수 있다.\n```\n\n\n\n```javascript\nfunction sum(a,b,c){\n  return a+b+c;\n}\n\nlet s = [1,2,3];\n\nconsole.log(sum.apply(null,s)); \n// 기존 방식\n\nconsole.log(sum(...s)); \n// spread operator를 이용한 새로운 방식\n```\n\n","excerpt":"쉽게 말해 배열을 펼쳐주는 역할이다. '' ''를 떼어낸다고 생각하면 쉽다. 배열을 바꾸지 않고 새로운 값을 복사, 배열을 합치거나 배열을 펼쳐진 상태로 파라메터로 전달 등의 활용이 가능하다.","fields":{"slug":"/js-es6-spread-operator/"},"frontmatter":{"date":"Jun 29, 2017","title":"자바스크립트 ES6 Spread operator, 펼침 연산자","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n## Javascript 'For Loop'\n\n자바스크립트에서 사용하는 for 반복문의 유형에 대해 알아보자.\n\n- for\n   - `for ([initialization]; [condition]; [final-expression])`\n- for in\n   - `for (variable in [object | array])`\n- for of (ES6)\n   - `for (variable of object)`\n\n---\n\n### - for\n\n`for ([initialization]; [condition]; [final-expression])`\n\n### - for in\n\n`for (variable in [object | array])`\n\n- variable\n 1. object 일때 variable = object의 다음 속성 이름\n 2. array 일때 variable = array의 다음 요소 인덱스\n\n### - for of (ES6)\n\n`for (variable of object)`\n\n- variable\n 1. object의 임의 속성 **값**일 수 있는 변수입니다.\n\n\n```javascript\nconst arr = [1,\"\",undefined,NaN,null];\n\n/**************************************/\n\nfor(let index = 0; index < arr.length; index++){\n  console.log(arr[index]);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n\n\n/**************************************/\n\n\nfor(let index in arr){\n  console.log(\"index:\" + index + \" / arr[index]:\" + arr[index]);\n}\n// index:0 / arr[index]:1\n// index:1 / arr[index]:\"\"\n// index:2 / arr[index]:undefined\n// index:3 / arr[index]:NaN\n// index:4 / arr[index]:null\n\n\n/**************************************/\n\n\nfor(let value of arr){\n  console.log(value);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n```\n\n\n\n### for of / for in 의 차이점\n\n배열일 경우 배열 전체를 순회하는 반복문인 것은 같지만 차이점이 있다.\n\n여기서 ES6에서 새로 나온 for of 의 장점을 발견 할 수 있다.\n\n\n아래 코드를 살펴보면 Array의 prototype에 foo라는 새로운 메소드를 정의해놓았다.\n그런데 arr를 for in문을 통해서 콘솔 출력한 결과 foo라는 메소드까지 같이 출력되는 것을 볼 수 있다.\n하지만 for of는 그렇지 않다, 온전히 자신의 것만 출력할 수 있다.\n\n```javascript\nconst arr = [1,\"\",undefined,NaN,null];\nArray.prototype.foo = function(){};\n\nfor(let index in arr){\n  console.log(\"index:\" + index + \" / arr[index]:\" + arr[index]);\n}\n// index:0 / arr[index]:1\n// index:1 / arr[index]:\"\"\n// index:2 / arr[index]:undefined\n// index:3 / arr[index]:NaN\n// index:4 / arr[index]:null\n// index:foo / arr[index]:function () {}\n\nfor(let value of arr){\n  console.log(value);\n}\n// 1\n// \"\"\n// undefined\n// NaN\n// null\n```\n\n","excerpt":"Javascript 'For Loop' 자바스크립트에서 사용하는 for 반복문의 유형에 대해 알아보자. for  for in  for of (ES6)  - for  - for in  variable object 일때 variable = object의…","fields":{"slug":"/js-for-loop/"},"frontmatter":{"date":"Jun 29, 2017","title":"자바스크립트 for문들의 유형과 차이점","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n- [String.prototype.startsWith()][https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith]\n  - 문자열이 특정 문자로 시작하는지 확인, 결과를 true, false로 반환.\n- [String.prototype.endsWith()][https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith]\n  - 문자열이 특정 문자로 끝나는지 확인, 결과를 true, false로 반환.\n- [String.prototype.includes()][https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/includes]\n  - 문자열에 특정 문자열이 포함되는지 확인, 결과를 true, false로 반환.\n\n```javascript\nlet str = 'javascript es6 string methods';\n\nconsole.log(str.startsWith('javascript')); //true\nconsole.log(str.endsWith('methods')); //true\nconsole.log(str.includes('es6')); //true\n```\n\n\n\n- [String.prototype.repeat()][https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/repeat]\n  - 문자열을 인자만큼 반복하는 문자열을 반환\n\n```javascript\nlet str = 'es6';\n\nconsole.log(str.repeat(3)); //es6es6es6\n```\n\n\n\n\n\n---\n\n## Reference\n\n- [모던 자바스크립트(javascript) 개발을 위한 ES6 강좌](https://www.inflearn.com/course/es6-%ea%b0%95%ec%a2%8c-%ec%9e%90%eb%b0%94%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8/)","excerpt":"String.prototype.startsWith() 문자열이 특정 문자로 시작하는지 확인, 결과를 true, false로 반환. String.prototype.endsWith() 문자열이 특정 문자로 끝나는지 확인, 결과를 true, false로 …","fields":{"slug":"/js-es6-string-methods/"},"frontmatter":{"date":"Jun 29, 2017","title":"자바스크립트 ES6 String Methods","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\nES6 (ES2015) 에서는 새로운 선언 방법이 생겼는데,  \n그것이 const와 let이다.  \n기존에 다른 프로그래밍 언어를 사용하고 왔다면 처음 var 를 접할때 당황스러운 점을 느껴본 적이 있을 것이다. var의 관대함 때문이다. 그런 것을 비교하며 살펴보겠다.\n\n```javascript\n//case 1\nconsole.log(a);\nvar a;\n\n//case 2\nconsole.log(a);\nlet a;\n\n//case 3\nconsole.log(a);\nconst a;\n```\n\n해당 변수를 선언하기 전에 호출하는 모습이다.\n\n- case 1 : `undefined`\n- case 2 & 3 : `error`\n\n\n\n```javascript\n//case 1\nvar a = 'a';\nvar a = 'A';\n\n//case 2\nlet b = 'b';\nlet b = 'B';\n\n//case 3\nconst c = 'c';\nconst c = 'C';\n```\n\n위의 세 경우를 보자 같은 이름의 변수를 다시금 선언하고 있는 모습이다.\n\n- case 1 : `a=1`\n- case 2 & 3 : `error`\n\n\n\n**위의 두가지 경우를 통해서 let, const는 기존의 var의 관대함 없이 엄격해진 것을 볼 수 있다**\n\n\n\n### scope\n\n다음으로 스코프, 즉 유효 범위에 따른 차이점이다.\n\n```javascript\n//case 1\nvar a = 'a';\nfunction print(){\n  var a = 'A';\n  console.log(a);\n}\nprint(); // 'A'\nconsole.log(a); // 'A'\n\n//case 2\nlet a = 'a';\nfunction print(){\n  let a = 'A';\n  console.log(a);\n}\nprint(); // 'A'\nconsole.log(a); // 'a'\n```\n\n- case 1\n  - 함수 밖에서 a 선언, 그리고 함수 안에서 재선언되었다.\n  - 함수 안 a 출력은 함수 안에서 선언한 'A'가 출력\n  - 함수 밖 a 출력은 함수 안에서 재선언한 'A'가 출력\n  - 즉, 동일한 유효범위 안에 있다.\n- case 2\n  - 함수 밖에서 a 선언, 그리고 함수 안에서 선언.\n  - 함수 안 a 출력은 함수 안에서 선언한 'A'가 출력\n  - 함수 밖 a 출력은 함수 밖에서 선언한 'a'가 출력\n  - 즉, 서로 다른 유효범위를 가지고 있다.\n  - let, const는 블록 유효범위(Block scope)를 가지고 있어,\n    해당 블록 범위 안에서만 유효하다.\n\n\n\n\n### let, const 의 차이점\n\nvar 와 let, const의 차이점을 알아보았고, 그렇다면 let, const의 차이점은 무엇일까?\n\n- const \n  - 상수\n  - 초기값 필요 / 값 재할당 불가\n  - Array, Object, function의 경우 멤버값 조작 가능\n- let\n  - 초기값 불필요 / 값 재할당 가능\n\n\n\n\n### let, const 의 사용\n\n그렇다면 언제 let을 사용하고 const를 사용해야 할까?\n\n- const\n  - 값이 수정되지 않는 상수값 선언시 사용\n  - array, object, function 활용시 사용\n- let\n  - 값을 재할당할 필요가 있는 변수에 사용\n\n\n\n\n---\n\n### etc.\n\n#### immutable array 만들기 (불변의 어레이 만들기)\n\n```javascript\nconst list = [1,2,3];\n\nconst list2 = list;\nlist2.push(4);\n\n// 원하는 결과\n// list = [1,2,3]\n// list2 = [1,2,3,4]\n// 'list === list2' 가 false\n\nconsole.log('1, '+list);\nconsole.log('2, '+list2);\nconsole.log(list === list2);\n\n// 실제 결과\n// list = [1,2,3,4]\n// list2 = [1,2,3,4]\n// 'list === list2' 가 true\n\n// 원하는 결과를 얻기 위한 방법\nconst newlist = [1,2,3]\nconst newlist2 = [].concat(newlist);\nnewlist2.push(4);\n\nconsole.log('1, '+newlist);\nconsole.log('2, '+newlist2);\nconsole.log(newlist === newlist2);\n\n// newlist = [1,2,3]\n// newlist2 = [1,2,3,4]\n// 'newlist === newlist2' false\n```\n\n\n\n\n\n---\n\n## References\n- http://blog.nekoromancer.kr/2016/01/26/es6-var-let-%EA%B7%B8%EB%A6%AC%EA%B3%A0-const/","excerpt":"ES6 (ES2015) 에서는 새로운 선언 방법이 생겼는데, 그것이 const와 let이다. 기존에 다른 프로그래밍 언어를 사용하고 왔다면 처음 var 를 접할때 당황스러운 점을 느껴본 적이 있을 것이다. var의 관대함 때문이다. 그런 것을 비교하…","fields":{"slug":"/js-es6-const-let/"},"frontmatter":{"date":"Jun 28, 2017","title":"자바스크립트 ES6 const, let","tags":["javascript","ES6"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![출처 : https://velopert.com/1130](https://velopert.com/wp-content/uploads/2016/03/Screenshot-from-2016-12-10-00-21-26-1.png)\n\n\n## - Mount\n\n컴포넌트가 실행 될 때, 'Mount 된다' 라고 표현.\n\n컴포넌트가 시작되면 제일 초기의 작업은\n\n1. context, defaultProps, state 저장\n2. componentWillMount 메소드 호출\n3. render, 컴포넌트를 DOM에 그린다.\n4. componentDidMount 호출\n\n---\n\n## - 기본적인 컴포넌트 생성 과정\n\n### constructor\n\n```javascript\nconstructor(props){\n\tsuper(props);\n}\n```\n\n컴포넌트가 처음 만들어 질 때 **가장 먼저** 실행되는 메소드\n\n\n### componentWillMount\n\n```javascript\ncomponentWillMount(){\n}\n```\n\n컴포넌트가 DOM 위에 만들어지기 전에 실행된다,\n\n- componentWillMount 중 주의할 점\n  - 현재 Mount 진행 중이므로(DidMount 전이다), props나 state를 변경해서는 안된다.\n  - 또한 render 단계에 진입하지 않았으므로 DOM에 접근 할 수 없다.\n\n\n### componentDidMount\n\n```javascript\ncomponentDidMount(){\n}\n```\n\n컴포넌트가 만들어지고 난 후 render를 거치고 실행되는 메소드.\n\n여기서 javascript framework 연동, setTimeout, setInterval 및 AJAX 처리를 한다.\n\n- componentDidMount 에서 주의할 점\n  - render가 되었으므로 DOM에 접근 할 수 있지만,\n    state를 바꾸면 안된다. setState메소드를 사용하면 render 메소드가 다시 실행되기 때문이다.\n    방금 render를 마친 단계인데, 다시금 render가 실행되면 사용자에게 표시될때 깜박임 등을 유발 할 수 있게 된다.\n\n---\n\n\n\n## - Props Update 에 따른 cycle\n\nprops가 업데이트 될 때의 사이클,\n\n업데이트 되기 전, 업데이트를 감지 우선 **componentWillRecieveProps** 메소드 호출.\n\n다음으로 **shouldComponentUpdate, componentWillUpdate**가 차례로 호출.\n\n업데이트(render)가 완료되면 componentDidUpdate가 실행된다.\n\n여기서 componentDidUpdate는 이미 업데이트 된 상태이다, 따라서 바뀌지 이전의 props에 대한 정보를 가지고 있다.\n\n메소드들의 첫번째 인자로 props에 대한 정보를 가지고 있다.\n\n\n\n1. componentWillRecieveProps\n2. shouldComponentUpdate\n3. componentWillUpdate\n4. render\n5. componentDidUpdate\n\n\n\n###  componentWillRecieveProps\n\n```javascript\ncomponentWillRecieveProps(nextProps){\n  \n}\n```\n\n컴포넌트가 props를 새로 받았을 때 실행.\n\nprop에 따라 state 를 업데이트 해야 할 때 사용하면 유용하다.\n\n- componentWillRecieveProps 단계에서 주의 할 점\n  - setState를 할 때 추가적으로 렌더링 하지 않는다\n\n### shouldComponentUpdate\n\n```javascript\nshouldComponentUpdate(nextProps, nextState){\n  var foo = nextProps !== this.props;\n  return foo;\n}\n```\n\nprop 또는 state가 변경되었을때, 다시 render를 할지 결정하는 메소드.\n\nreturn 값 boolean으로 결정된다.\n\n\n\n###  componentWillUpdate\n\n```javascript\ncomponentWillUpdate(nextProps, nextState){\n    \n}\n```\n\n컴포넌트가 업데이트 되기 전에 실행.\n\n- 주의사항\n  - setState 사용 시 무한 루프 발생\n\n\n\n### componentDidUpdate\n\n```javascript\ncomponentDidUpdate(prevProps, prevState){\n    \n}\n```\n\nrender를 마친 후 실행된다.\n\n변경되고 난 후 이므로 변경 전의 prop, state를 가지고 있다.\n\n\n\n---\n\n\n\n## - State Update 에 따른 cycle\n\nsetState를 통해서 state가 업데이트 될 때의 과정.\n\nprops update와 과정은 동일하나 componentWillRecieveProps 메소드는 호출되지 않는다.\n\n메소드들의 두번째 인자로 state에 대한 정보를 가지고 있다.\n\n\n\n1. shouldComponentUpdate\n2. componentWillUpdate\n3. render\n4. componentDidUpdate\n\n\n---\n\n\n\n## - Unmount\n\nUnmount, 컴포넌트가 제거되는 것.\n\n\n\n1. componentWillUnmount\n\n### componentWillUnmount\n\n```javascript\ncomponentWillUnmount(){\n  \n}\n```\n\n컴포넌트가 DOM 에서 사라진 후 실행되는 메소드,\n\n연결해두었던 이벤트 리스너를 제거하는 등의 수행을 하게 된다.\n\n\n\n\n\n\n\n---\n\n## References\n\n- https://velopert.com/1130\n- https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955\n","excerpt":"출처 : https://velopert.com/1130 - Mount 컴포넌트가 실행 될 때, 'Mount 된다' 라고 표현. 컴포넌트가 시작되면 제일 초기의 작업은 context, defaultProps, state 저장 componentWillM…","fields":{"slug":"/js-react-lifecycle/"},"frontmatter":{"date":"Jun 20, 2017","title":"리액트 생명주기 (React LifeCycle)","tags":["javascript","react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n스코프 = 현재 접근 할 수 있는 변수들의 범위  \n\n예제 1\n```html\n<button id=\"btn0\">버튼 1</button>\n<button id=\"btn1\">버튼 2</button>\n<button id=\"btn2\">버튼 3</button>\n\n<script>\n  var i, len = 3;\n  for (i = 0; i < len; i++) {\n    document.getElementById('btn'+i).addEventListener(\"click\", function () {\n      console.log(\"Click btn\", i);\n    });\n  }\n</script>\n```\n버튼 3개를 각각 클릭했을때 결과값은 모두 \"Click btn3\"가 나온다.  \n이벤트 핸들러의 콜백 함수가 작성되어 있는데 그 콜백 함수는 콜백함수 밖에 있는 변수들에 접근 할 수 있는 스코프를 가지게 된다.  \nfor 반복문을 통해서 각각 div 순서대로 클릭 이벤트 핸들러가 부여될 때 변수 i가 0부터 3까지 증가한 뒤 이후에 for 반복문이 끝나도 계속해서 유지된다.  \n따라서 나중에 출력문이 호출될때 변수 i의 값은 이미 for반복문이 끝난 값인 3으로 출력되는 것이다.  \n\nfor문을 돌때는 별도의 스코프가 생성되지 않고 i는 글로벌 스코프에 존재한다.  \n그러다가 **이벤트리스너의 콜백함수를 설정할때 익명 함수가 선언되면서 이때 스코프가 생성**되어 스코프 체인을 만들게 된다.\n\n이러한 현상은 **자바스크립트에서 스코프가 함수로 인해 생성되고 함수가 호출될 때도 계속 지속되어 변수들을 참조하는 특성**때문에 일어난다.  \n\n-----------\n\n스코프의 생성  \n\nfor문의 스코프 생성 여부를 알아보기 위한 예제  \n0부터 9까지 더하여 총합이 16이 넘는 숫자를 구하는 코드  \n```html\n<script>\n  for(var i = 0; i < 10; i++){\n    var total = (total || 0) + 1;\n    var last = i;\n    if(total > 16){\n      break;\n    }\n  }\n  console.log(\"typeof total !== 'undifined'\",typeof total !== \"undifined\");\n  console.log(\"typeof last !== 'undifined'\",typeof last !== \"undifined\");\n  console.log(\"typeof i !== 'undifined'\",typeof i !== \"undifined\");\n  console.log(\"total ===\"+total+\", last ===\"+last);\n</script>\n```\nConsole\n```\ntypeof total !== 'undifined' true\ntypeof last !== 'undifined' true\ntypeof i !== 'undifined' true\ntotal ===10, last ===9\n```\nfor문 안에서 생성된 변수 total,last,i가 정의되지 않은 것이 아니며, 값에 접근 할 수 있는 것을 알 수 있다.  \n\n다른 프로그래밍 언어에서는 for문 안에서 선언한 변수를 for문 밖에서 접근하게 되면 에러가 발생하지만  자바스크립트에서는 모든 값에 접근 할 수 있다.  \n이처럼 자바스크립트는 다른 언어와는 달리 일반적인 블록 스코프를 따르지 않는다.  \n**자바스크립트의 스코프는 특정 구문이 실행될 때 새로 생성하여 스코프 체인을 생성하게 된다.**   \n이렇게 스코프를 생성하는 구문들은 다음과 같다.  \n\n- function\n- with\n- catch  \n\n자바스크립트에서 이들의 사용법은 각각 다르지만, 중요한건 이런 구문들이 사용될 때문 스코프가 생성되고, **다른 프로그래밍 언어처럼 {}를 이용해 블록을 생성한다고 해서 스코프가 생성되는 것이 아니라는 점**이다.\n\n----------\n\nfunction 구문의 스코프 생성  \n\n```js\nfunction foo(){\n  var b = \"Can you access me?\";\n}\nconsole.log(typeof b === \"undefined\");\n```\nconsole\n```\ntrue\n```\nfunction foo안의 b값에 접근하지 못하는 것을 알 수 있다.    \n**function 구문을 통해서 스코프가 생성된 것을 알 수 있다.**  \n\n----------\n\ncatch 구문의 스코프 생성  \n\ncatch 구문도 스코프를 생성하기는 하지만 function과는 다른 동작을 보인다.  \n괄호 안에 인자로 받는 변수들만 새로운 내부 스코프에 포함되어 그 다음으로 오는 블록 안에서만 접근 할 수 있다.  \n반면 블록 안에서 새로 정의한 변수들은 for-loop와 비슷하게 블록 외부에서도 접근 할 수 있다.  \n```js\ntry {\n  throw new exception(\"fake exception\");\n} catch (error) {\n  var test = \"can you see me?\";\n  console.log(error instanceof ReferenceError === true);\n}\nconsole.log(test === \"can you see me?\");\nconsole.log(typeof error === undefined);\n```\nconsole\n```\ntrue\ntrue\nfalse\n```\n첫번째 출력문에서는 error라는 인자로 받은 변수가 해당 블록 안에 있는 것을 알 수 있다.  \n두번째 출력문에서는 catch 구문에서 **새로 정의한 test 변수에 접근이 가능**하다는 것을 알 수 있다.  \n세번째 출력문에서는 catch 구문에서 **인자로 받은 변수에는 접근이 불가능** 하다는 것을 알 수 있다.  \n\n----------\n\n엄밀하게 따져보면 스코프가 생성되는 방식이 기존 언어와 다르지 않다.  \n하지만 스코프가 지속되는 것은 다른 언어와는 다른 자바스크립트만의 강점 중 하나이다.  \n이러한 스코프의 지속성이 필요한 이유는 새로운 스코프가 생성되고  \n**스코프 체인을 참조하는 함수를 변수에도 넣을 수 있고**,  \n**다른 함수의 인자로 넘겨줄 수도 있으며**,  \n**함수의 반환값으로 이용할 수도 있기 때문이다**.  \n즉, 지금 함수가 선언된 곳이 아닌 전혀 다른 곳에서 함수가 호출 될 수 있어서, 해당 함수가 현재 참조하는 스코프를 지속할 필요가 있는 것이다.\n\n----------\n\n함수를 이용한 문제 해결  \n\n이러한 지속성을 이해하기 위해 앞의 클릭 이벤트 핸들러 문제를 또 다른 방식으로 해결해보자.  \n\n```html\n<button id=\"btn0\">버튼 1</button>\n<button id=\"btn1\">버튼 2</button>\n<button id=\"btn2\">버튼 3</button>\n<script>\n  var i, len = 3;\n\n  function setDiv(index) {\n    document.getElementById('btn' + index).addEventListener(\"click\", function () {\n      console.log(\"Click btn\", index);\n    });\n  }\n\n  for (i = 0; i < len; i++) {\n    setDiv(i);\n  }\n</script>\n```\n\nconsole\n\n```\nClick btn 0\nClick btn 1\nClick btn 2\n```\n\n이렇게 **함수로 분리하는 것은 비동기 처리를 많이 하는 자바스크립트의 특성에서는 중요하게 생각해야 하는 개발 방식**이다.  \n\n----------\n\n클로저를 이용한 문제 해결\n\n자바스크립트의 특징 중 하나인 클로저를 활용하여 이를 해결 할 수도 있다.\n\n```html\n  <button id=\"btn0\">버튼 1</button>\n  <button id=\"btn1\">버튼 2</button>\n  <button id=\"btn2\">버튼 3</button>\n  <script>\n    var i, len = 3;\n    /* 처음의 해결 전 코드\n    for (i = 0; i < len; i++) {\n      document.getElementById('btn'+i).addEventListener(\"click\", function () {\n        console.log(\"Click btn\", i);\n      });\n    }\n    */\n    for (i = 0; i < len; i++) {\n      document.getElementById('btn'+i).addEventListener(\"click\", (function(index) { //1\n        return function (){ //2\n          console.log(\"Click btn\", index);\n        };\n      }(i)));//3\n    }\n  </script>\n```\n\nconsole\n\n```\nClick btn 0\nClick btn 1\nClick btn 2\n```\n\n이벤트 리스너 실행 전 즉시 호출 함수 실행, 즉시 호출 함수 안의 함수가 반환된 값이 이벤트 리스너 함수의 두번째 인자로 들어간다.  \n1, 3은 즉시 호출 함수를 나타냄, 그리고 바로 다음 2는 index변수를 상위 스코프 체인에 추가한 뒤 addEventListener() 함수의 2번째 인자로 들어간다.  \n이벤트 리스너가 실행되기 전 먼저 즉시 호출 함수가 값을 반환받아 그 값이 이벤트 리스너의 2번째 인자로 작동하는 것.  \n\nglobal scope // i=2, len=3 <- function(index) // index = 0 <- btn0.click // empty scope  \nglobal scope // i=2, len=3 <- function(index) // index = 1 <- btn1.click // empty scope  \nglobal scope // i=2, len=3 <- function(index) // index = 2 <- btn2.click // empty scope  \n","excerpt":"스코프 = 현재 접근 할 수 있는 변수들의 범위   예제 1 버튼 3개를 각각 클릭했을때 결과값은 모두 \"Click btn3\"가 나온다. 이벤트 핸들러의 콜백 함수가 작성되어 있는데 그 콜백 함수는 콜백함수 밖에 있는 변수들에 접근 할 수 있는 스코…","fields":{"slug":"/js-scope/"},"frontmatter":{"date":"Jun 19, 2017","title":"자바스크립트의 스코프(Scope)","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n\nSPA(Single page application) 에서는 새로운 페이지 전체를 렌더링하지 않고, 부분적인 UI를 새로 렌더링한다.\n따라서 브라우저는 이 정보에 대한 이력을 남기지 않는다.\n결국 ''뒤로가기/앞으로가기''를 사용할 수 없다는 이야기이며,\n이는 사용자에게 당연시 되는 기능이므로 안된다면 많은 불편을 야기할 수 있다.\n그를 해결하기 위한 방법으로 React-router 라이브러리를 사용하게 된다.\n\n\n\n## install\n\n`npm install --save-dev react-router-dom`\n\n기존 v3 에서는 react-router 만 설치해서 사용하면 됐었다.\nv4에서는 브라우저와 react에서 사용되는 라우터가 분리되어 사용하도록 되어있다.\nReact-router-dom을 설치하면 react-router도 같이 설치된다.\n\n\n\n## Use\n\n### Basic \n\n상단의 헤더, 그 아래 컨텐츠가 나타나는 기본 구조.\n\n- src/App.js\n\n```javascript\n//..\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Main from './routes/Main';\nimport User from './routes/User';\nimport Header from './components/Header';\nimport Posts from './routes/Posts';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header/>\n          <Route exact path=\"/\" component={Main}/>\n          <Route path=\"/user\" component={User}/>\n          <Route path=\"/posts\" component={Posts}\n          {/* exact 키워드가 없으면 /user 경로에서 /도 있는 것으로 인식, \n          Main과 User가 동시 출력 된다.*/}\n        </div>\n      </Router>\n    );\n  }\n}\n```\n\n\n\n- src/components/Header.js\n\n```javascript\n//..\n  return (\n    <div>\n    \t<Link to=\"/\">Home</Link>\n      \t<Link to=\"/User\">User</Link>\n    </div>\n  );\n```\n\n\n\n---\n\n\n\n### URL Parameter\n\n- src/App.js\n\n```javascript\n//..\n<Route path=\"/user/:username\" component={User}/>\n//..\n```\n\n\n\n- src/routes/User.js\n\n```javascript\n//..\nconst User = ({match}) => {\n  return (\n  \t<div> UserName is {match.params.username} </div>\n  );\n}\n```\n\n`…/user/baik` URL로 접속하면 UserName is baik 라는 것을 확인 할 수 있다.\n\n\n\n---\n\n\n\n### Route in Component\n\n- src/routes/Posts.js\n\n```javascript\n//..\n\nimport { Route, Link } from 'react-router-dom';\n\nconst Post = ({match}) => {\n  return (\n\t<div>\n    \t<h2>{match.params.title}</h2>\n    </div>\n  );\n}\n\nconst Posts = () => {\n  return (\n  \t<div>\n    \t<h1>Post</h1>\n      \t<Link to=\"/posts/react\">React</Link>\n      \t<Link to=\"/posts/redux\">Redux</Link>\n      \t<Route\n          \tpath=\"/posts/:title\"\n          \tcomponent={Post}\n          />\n    </div>\n  );\n}\n\nexports default Posts;\n```\n\n\n\n---\n\n\n\n### NavLink\n\n- src/components/Header.css\n\n```css\n.item.active {\n  \n}\n```\n\n- src/components/Header.js\n\n```javascript\n// <Link to ...></Link> => <NavLink to...></NavLink>\n\n<NavLink exact to=\"/\" className=\"item\" activeClassName=\"active\">Home</NavLink>\n\n{/* exact를 줘야 효과가 지난후에도 남아있지 않고 정확히 일치할때만 효과 적용 가능*/}\n```\n\n\n\n---\n\n\n\n### Redirect\n\n```javascript\nimport { Redirect } from 'react-router-dom';\n\nconst isLogin = false\n\n//..\nreturn (\n  <div>\t\n\t{!isLogin && <Redirect to=\"/login\"/>}\n    MyPage\n  </div>\n);\n```\n\n\n\n```javascript\nconst Main = ({history}) => {\n  return (\n  \t<div>\n    \t<button onClick={()=>{history.push('/posts')}}>포스트로 이동</button>\n    </div>\n  );\n}\n```\n\n\n\n---\n\n\n\n### Query Parameter\n\n```javascript\n//..\nconst Main = ({location}) => {\n  return (\n      <div>\n          {new URLSearchParams(location.search).get('keyword')} 검색\n      </div>\n  );\n}\n```\n\n\n\n---\n\n\n\n### Make NotFound Page\n\n- src/App.js\n\n```javascript\n//..\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\n//..\nimport notFound from './routes/notFound';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header/>\n          \t<div>\n              <Switch>\n                <Route exact path=\"/\" component={Main}/>\n                <Route path=\"/user\" component={User}/>\n                <Route path=\"/posts\" component={Posts}/>\n                <Route component={notFound}/>\n              </Switch>\n            </div>\n        </div>\n      </Router>\n    );\n  }\n}\n```\n\nSwitch를 추가한다.\n\n기존 Switch가 없고, exact 조차 없을때는 Route 전체를 하나하나 비교해서 출력하나\n\nSwitch가 있으면 일치하는 것이 있으면 비교를 그만둔다, 끝까지 일치하는 것이 없으면 notFound 컴포넌트를 보여주게 된다.\n\n\n\n---\n\n## Reference\n\n- CodeSquad\n- https://velopert.com/3275\n","excerpt":"SPA(Single page application) 에서는 새로운 페이지 전체를 렌더링하지 않고, 부분적인 UI를 새로 렌더링한다.\n따라서 브라우저는 이 정보에 대한 이력을 남기지 않는다.\n결국 ''뒤로가기/앞으로가기''를 사용할 수 없다는 이야기이…","fields":{"slug":"/js-react-router-v4/"},"frontmatter":{"date":"Jun 06, 2017","title":"리액트 라우터 V4 사용하기 (React-Router v4)","tags":["react"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n```js\nvar user1 = {\n  name: 'user1',\n  say: function(){ console.log(this.name, \"-\", this) }\n}\nuser1.say(); //user1 - Object {name: \"user1\", say: function}\n/* user1의 this는 해당 user1 object를 가리킨다 */\n\nvar user = user1.say;\nuser(); //undefined - Window {...}\n/* user의 this는 window를 가리킨다, window.user()로 window에서 호출했기 때문 */\n\nvar user2 = {\n  name: 'user2',\n  say: user1.say\n}\nuser2.say(); //user2 - Object {name: \"user2\", say: function}\n/* user2의 say가 user1의 say의 내용이지만 this는 호출된 해당 user2 object이다 */\n\nuser2.say.call(user1); //user1 - Object {name: \"user1\", say: function}\n/* call과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 this를 가리키도록 지정하는 것 */\n```\n\n\n\n**call(), apply()**\n\n두 함수는 function 객체의 기본 내장 함수이다.\n일반적으로 함수가 호출될 때는 내부적으로 call() 함수로 변형되어서 처리된다.\ncall과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 this를 가리키도록 지정하는 것으로 첫번째 인자로 this를 지정하고 두번째 인자로는 함수의 인자를 지정한다.\ncall은 함수의 인자를 ','로 여러개를 넘기고 apply는 배열 한개로 넘긴다.\n\n\n\n---\n\n\n\n#### this의 이해\n\n일반적인 객체지향 언어와 달리 자바스크립트에서의 this는 조금 다르게 동작하는 경우가 많다.\n\n일반적인 상황에서 this가 어떻게 결정되는지 알려면 먼저 함수를 호출하는 방법에 대해 살펴봐야한다.\n\n\n\n자바스크립트에서 함수가 호출되는 방법은 다음 네가지가 주요하다.\n\n1. 일반 함수로의 호출\n   - ```js\n     function hello(name){\n       alert('hello', name);\n     }\n     hello('jhon');\n     ```\n\n2. 멤버함수로의 호출\n\n   - ```js\n     var hello = {\n       say : function(){\n         alert('hello');\n       }\n     }\n     hello.say();\n     ```\n\n3. call() 함수를 통한 호출\n\n   - ```js\n     function hello(name){\n       alert('hello', name);\n     }\n     hello.call(undefined, \"jhon\");\n     ```\n\n4. apply() 함수를 통한 호출\n\n   -  ```js\n      function hello(name){\n        alert('hello', name);\n      }\n      hello.apply(undefined, [\"jhon\"]);\n      ```\n\n\n\n\n```js\nfunction whatsThis(){\n  return this.toString();\n}\nvar user = {\n  what: whatsThis,\n  toString: function(){\n    return \"[objcet user]\"\n  }\n}\n\nwhatsThis(); \n//일반함수 \"[object Window]\"\n//글로벌 객체 window가 this로 설정되어있다.\n//일반적으로 함수가 호출될때는 내부적으로 call()함수로 변형되어 처리된다.\n//이때 call의 첫번째 인자는 undefined로 넘겨주어 this의 기본값으로 window가 되게 된다.\n\nuser.what(); \n//멤버함수 \"[objcet user]\"\n//이것또한 내부적으로 call함수로 변형되어 처리된다.\n//이때 call함수의 첫번째 인자로는 멤버함수를 보유한 객체(user)가 된다.\n//따라서 this는 user가 된다. \n//같은 함수라도 멤버함수가 호출되는 방법에 따라 this또한 변경되는 것이다.\n\nwhatsThis.call(); \n//call이용, 인자 없음 \"[object Window]\"\n\nwhatsThis.apply(user); \n//apply이용, 첫번째 인자 user\"[objcet user]\"\n\nuser.what.call(undefined) \n//멤버함수, call이용, 첫번째 인자 undefined \"[object Window]\"\n\nuser.what.call(user); \n//멤버함수, call이용, 첫번째 인자 user \"[objcet user]\"\n```\n\n\n\n**this는 함수나 스코프를 기반으로 결정되는 것이 나닌, 호출 방법에 따라 변경된다.**\n\n**콜백함수를 인자로 넘기는 등의 비동기적 방식의 호출이 많은 자바스크립트에서는 중요하게 생각해야한다.**","excerpt":"call(), apply() 두 함수는 function 객체의 기본 내장 함수이다.\n일반적으로 함수가 호출될 때는 내부적으로 call() 함수로 변형되어서 처리된다.\ncall과 apply 함수는 this를 자동적으로 만들어진 this가 아닌 지정한 …","fields":{"slug":"/js-this/"},"frontmatter":{"date":"May 14, 2017","title":"자바스크립트 this","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n- 함수, 함수가 선언될 때의 environment로 구성  \n- 함수가 정의 될 때의 environment가 함께 closure로 결합되면서, 다양한 활용이 가능  \n\n```js\nfunction makeCounterFunction(initVal){\n    var count = initVal;\n    function Increase(){\n        count++;\n        console.log(count);\n    }\n    return Increase;\n}\n\nvar counter1 = makeCounterFunction(0);\nvar counter2 = makeCounterFunction(10);\n```\n- counter1의 closure\n    - 함수 : function Increase(){}\n    - 환경 : var count = 0;\n- counter2의 closure\n    - 함수 : function Increase(){}\n    - 환경 : var count = 10;\n여기서 counter1, counter2 함수가지고는 count 변수의 값을 직접 제어할 수 없다, count 변수는 makecounterfunction 안에 있고 여기선 increse함수밖에 없기때문이다. 이 원리를 이용해 private한 변수를 활용할 수 있다 아래서 확인해보자.\n\n---\n\n간단하게 클로저의 두가지 개념을 이해하도록 하자.  \n\n1) 외부 함수가 소멸된 뒤에도 내부 함수는 외부 함수의 지역 변수에 접근 할 수 있다.  \n2) 클로저를 이용하여 private한 변수를 만들 수 있다.  \n\n1번의 예\n```js\nfunction sum() {\n    var num = 0;\n    console.log(num);\n    function addsum() {\n        console.log(num);\n        num++;\n        return num;\n    }\n    return addsum;\n}\nvar a = sum(); \n// function addsum(){...}\n// 여기서 sum 함수는 수명이 끝남.\n\na();\n// 여기서 addsum()을 하게 되는 꼴인데,\n// num을 증가시키는 부분에서 num은 클로저에 담긴 num이다.\n// Closure(sum) num: 0\n\na();\n// Closure(sum) num: 1\n\na();\n// Closure(sum) num: 2\n```\n\n2번의 예\n```js\nfunction people(name) {\n    return {\n        get_name: function () {\n            console.log(name);\n            return name;\n        },\n        set_name: function (_name) {\n            console.log(name);\n            name = _name;\n        }\n    }\n}\nvar junho = people(\"junhobaik\"); \n//여기서 외부 함수의 인자로 값을 넘긴다.\n//함수에서는 전달 받은 값을 직접 조작할 수 없게 되고\n//get,set_name을 통해서만 접근 할 수 있게 된다.\n//이렇게 사용하는 방법으로 private한 변수를 만들 수 있다.\n\njunho.get_name(); \n//이때 실행되는 get_name의 console.log에서 name값은 closure(people) name:'junhobaik' 이다.\n```\n\n---\n\n### 추가 내용\n\n```html\n<button id=\"btn0\">버튼 1</button>\n<button id=\"btn1\">버튼 2</button>\n<button id=\"btn2\">버튼 3</button>\n<script> \n    for (var i = 0; i < 3; i++) {\n        document.getElementById('btn' + i).addEventListener(\"click\", function () {\n            console.log(\"Click btn\", i+1);\n        });\n    }\n</script>\n```\n기대하는 결과는 Click btn1,2,3 하지만 실제 결과는 Click btn3,3,3  \n그 이유는 아래와 같다.  \n1. for문을 돌며 버튼 1,2,3에 이벤트가 등록되며 콜백함수또한 등록된다. (여기서 위에서 살펴본 설명으로 이벤트는 외부함수, 콜백함수는 내부함수라고 할 수 있다)\n2. 이벤트가 등록되면서 이벤트 함수는 스택에서 떠난다 (소멸되었다)\n3. 따라서 콜백함수는 클로저 i값에 접근하게 되는데 클로저 i값은 콜백함수 모두가 공유하게 되는 값이다.\n4. for문을 통해 증가가 완료된 값이 클로저에 남아있고, 그 클로저 값이 계속해서 노출되는 것이다.\n\n해결 방법  \n1. let을 이용한 block scope 생성을 통한 해결\n2. 이벤트 함수(외부함수)를 또 함수로 묶어 새로운 scope를 만들어낸다.","excerpt":"함수, 함수가 선언될 때의 environment로 구성   함수가 정의 될 때의 environment가 함께 closure로 결합되면서, 다양한 활용이 가능   counter1의 closure 함수 : function Increase(){} 환경 :…","fields":{"slug":"/js-clouser/"},"frontmatter":{"date":"Apr 19, 2017","title":"자바스크립트 클로저(Closure)","tags":["javascript"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n자바스크립트에서 모든 객체는 자신의 부모 객체와 연결 되어있다.  \n이것을 이용하여 객체지향에서 자식이 부모 객체의 요소를 가져다 쓸 수 있는 상속 개념을 사용할 수 있다.\n\n모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 프로토타입 객체를 자신의 부모 객체로 설정하는 [[Prototype]] 프로퍼티로 연결한다. `[[Prototype]] Link`\n\n생성된 객체의 실제 부모 역활을 하는 건 생성자 자신이 아닌 생성자의 prototype 프로퍼티가 가리키는 프로토타입 객체이다.\n\n## Prototype?\n\n```js\nfunction Person(name){\n    this.name = name;\n}\nvar foo = new Person('foo');\n```\nPerson() 생성자는 prototype 프로퍼티로 자신과 링크된 프로토타입 객체(Person.prototype)를 가리킨다.  \n\nPerson() 생성자로 생성된 객체 foo는,  \nPerson() 함수의 프로토타입 객체를 [[Prototype]]Link로 연결한다.  \n\n\n### 프로토타입 체이닝\n특정 객체의 프로퍼티나 메서드에 접근하려 할 때, 해당 객체에 접근하려고 하는 프로퍼티나 메서드가 없다면 [[Prototype]]Link를 따라 자신의 부모 방향으로 프로토타입 객체의 프로퍼티를 차례대로 검사하는 것을 말한다.  \n즉, 프로토타입 체이닝을 통해 자신이 아닌 부모의 프로토타입 객체 프로퍼티에도 접근이 가능.  \n\n객체 리터럴로 생성한 객체는 Object()라는 내장 생성자 함수로 생성된 것으로,  \nObject가 갖고 있는 prototype 프로퍼티가 가리키는 프로토타입 객체인 Object.prototype 객체를 자신의 프로토타입 객체로 연결한다.\n\n\n```js\n//...위의 예제 코드...\nconsole.log(foo.hasOwnProperty('name'));\n```\n위의 예제 아래 이런 코드를 넣는다면 프로토타입 체이닝에 따라서 hasOwnProperty 메서드를 찾게 된다.  \n`foo > Person.prototype > Object.prototype.hasOwnProperty`\n\n\n프로토타입 또한 자바스크립트 객체이다. 함수가 생성될 때 자신의 prototype 프로퍼티에 연결되는 프로토타입 객체는 기본적으로 constructor 프로퍼티만을 가진 객체이다.  \n따라서 일반 객체처럼 동적으로 프로퍼티를 추가/삭제하는 것이 가능하다. 또한 변경된 프로퍼티는 프로토타입 체이닝에 항시 반영된다.\n\n```js\nfunction Person(name) {\n    this.name = name;\n}\n\nvar foo = new Person('foo');\n\nvar func = function() {console.log('hello');}\n\nPerson.prototype.sayHello = func;\nfoo.sayHello(); // Hello\n```\n---\n\nPrototype을 이용한 간단한 Todo list 예제\n\n```js\nvar toDoObj = { //이것을 변경하면 변경사항이 항시 반영되어 나타난다.\n  show: function () {\n    var listLength = this.toDoList.length;\n    for (var i = 0; i < listLength; i++) {\n      console.log('- ', this.toDoList[i]);\n    }\n  }\n  , add: function (task) {\n    this.toDoList.push(task);\n  }\n  , del: function (index) {\n    this.toDoList.splice(index, 1);\n  }\n}\n\nfunction toDo() {\n  this.toDoList = [];\n}\n\ntoDo.prototype = toDoObj; \n//todo 함수 객체의 프로토타입에 toDoObj를 추가해 \n//show,add,del을 프로퍼티를 사용할 수 있게 된다.\n//class toDo extends toDoObj {...}\n\nvar allTask = new toDo();\n//Object.setPrototypeOf(allTask,toDoObj);\n//toDo.prototype을 통해 todo() 생성자를 이용해 allTask라는 객체를 만들기 전에\n//todo.prototype = toDoObj를 하여 프로토타입을 추가하는 방법 대신에\n//object.setPrototypeOf를 사용하여 \n//allTask 객체에 toDoObj를 추가하는 방법 또한 있다.\n\nconsole.log(\"task 1~5 추가\");\nallTask.add(\"task 1\");\nallTask.add(\"task 2\");\nallTask.add(\"task 3\");\nallTask.add(\"task 4\");\nallTask.add(\"task 5\");\nallTask.show();\nconsole.log(\"\\n2,3 제거\");\nallTask.del(1);\nallTask.del(2);\nallTask.show();\n```\n\n\n---\n## References\n- [https://github.com/jsonko/dailyJavaScript/blob/171161c67ddcfb8dad369bb826e73cb5f4f93588/PrototypeChaining.md](https://github.com/jsonko/dailyJavaScript/blob/171161c67ddcfb8dad369bb826e73cb5f4f93588/PrototypeChaining.md)\n- [https://github.com/KyusungDev/JSStudy/blob/5167fba10310d2b177aa26be43fb0d3b2b831f8b/docs/books/inside_javascript/02.md](https://github.com/KyusungDev/JSStudy/blob/5167fba10310d2b177aa26be43fb0d3b2b831f8b/docs/books/inside_javascript/02.md)\n- [https://github.com/Lutece/sundayJavascript/blob/85d633268926261307ec18a3d4dad8c644e0c60f/inside_javascript/ch03/chapter03-04.md](https://github.com/Lutece/sundayJavascript/blob/85d633268926261307ec18a3d4dad8c644e0c60f/inside_javascript/ch03/chapter03-04.md)","excerpt":"자바스크립트에서 모든 객체는 자신의 부모 객체와 연결 되어있다. 이것을 이용하여 객체지향에서 자식이 부모 객체의 요소를 가져다 쓸 수 있는 상속 개념을 사용할 수 있다. 모든 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 …","fields":{"slug":"/js-prototype/"},"frontmatter":{"date":"Apr 18, 2017","title":"자바스크립트 프로토타입(Prototype)","tags":["javascript"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}